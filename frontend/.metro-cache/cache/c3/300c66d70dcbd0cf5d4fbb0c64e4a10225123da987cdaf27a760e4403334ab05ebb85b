{"dependencies":[{"name":"crypto-js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"TLjsXnAWOlf/gpObabse3HZX8VY=","exportNames":["*"],"imports":1}},{"name":"bcryptjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":30,"index":64}}],"key":"RrVAj5NITFKrtYKjtF9q+h3YF4s=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"EncryptionService\", {\n    enumerable: true,\n    get: function () {\n      return EncryptionService;\n    }\n  });\n  var _cryptoJs = require(_dependencyMap[0], \"crypto-js\");\n  var CryptoJS = _interopDefault(_cryptoJs);\n  var _bcryptjs = require(_dependencyMap[1], \"bcryptjs\");\n  var bcrypt = _interopDefault(_bcryptjs);\n  class EncryptionService {\n    // Generate a key from master password using PBKDF2 (web-compatible alternative to Argon2)\n    static async deriveKey(masterPassword, salt) {\n      try {\n        // Use PBKDF2 with high iteration count for key derivation\n        const key = CryptoJS.default.PBKDF2(masterPassword, salt, {\n          keySize: 256 / 32,\n          iterations: 100000\n        });\n        return key.toString();\n      } catch (error) {\n        console.error('Key derivation failed:', error);\n        throw new Error('Failed to derive encryption key');\n      }\n    }\n\n    // Generate a random salt\n    static generateSalt() {\n      return CryptoJS.default.lib.WordArray.random(16).toString();\n    }\n\n    // Encrypt data with AES-256 - improved version to handle UTF-8 properly\n    static encrypt(data, key) {\n      try {\n        // Ensure the data is properly encoded as UTF-8\n        const utf8Data = CryptoJS.default.enc.Utf8.parse(data);\n        const encrypted = CryptoJS.default.AES.encrypt(utf8Data, key, {\n          mode: CryptoJS.default.mode.CBC,\n          padding: CryptoJS.default.pad.Pkcs7\n        });\n        console.log('Encryption successful');\n        return encrypted.toString();\n      } catch (error) {\n        console.error('Encryption failed:', error);\n        throw new Error('Failed to encrypt data');\n      }\n    }\n\n    // Decrypt data with AES-256 - improved version to handle UTF-8 properly\n    static decrypt(encryptedData, key) {\n      try {\n        console.log('Attempting to decrypt data...');\n        const decrypted = CryptoJS.default.AES.decrypt(encryptedData, key, {\n          mode: CryptoJS.default.mode.CBC,\n          padding: CryptoJS.default.pad.Pkcs7\n        });\n\n        // Convert to UTF-8 string\n        const decryptedString = decrypted.toString(CryptoJS.default.enc.Utf8);\n        if (!decryptedString) {\n          throw new Error('Invalid decryption key or corrupted data');\n        }\n        console.log('Decryption successful');\n        return decryptedString;\n      } catch (error) {\n        console.error('Decryption failed:', error);\n        throw new Error('Failed to decrypt data - invalid key or corrupted data');\n      }\n    }\n\n    // Hash master password for server storage using bcrypt\n    static async hashMasterPassword(password, salt) {\n      try {\n        // Use bcrypt with salt rounds for password hashing\n        const saltRounds = 12;\n        const hash = await bcrypt.default.hash(password + salt, saltRounds);\n        return hash;\n      } catch (error) {\n        console.error('Password hashing failed:', error);\n        throw new Error('Failed to hash password');\n      }\n    }\n\n    // Generate strong password\n    static generatePassword(length = 16, includeUppercase = true, includeLowercase = true, includeNumbers = true, includeSymbols = true) {\n      let charset = '';\n      if (includeUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      if (includeLowercase) charset += 'abcdefghijklmnopqrstuvwxyz';\n      if (includeNumbers) charset += '0123456789';\n      if (includeSymbols) charset += '!@#$%^&*()_+-=[]{}|;:,.<>?';\n      if (!charset) {\n        throw new Error('At least one character type must be selected');\n      }\n      let password = '';\n      for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * charset.length);\n        password += charset[randomIndex];\n      }\n      return password;\n    }\n\n    // Calculate password strength\n    static calculatePasswordStrength(password) {\n      let score = 0;\n      const suggestions = [];\n\n      // Length check\n      if (password.length >= 12) score += 2;else if (password.length >= 8) score += 1;else suggestions.push('Use at least 8 characters');\n\n      // Character diversity\n      if (/[a-z]/.test(password)) score += 1;else suggestions.push('Include lowercase letters');\n      if (/[A-Z]/.test(password)) score += 1;else suggestions.push('Include uppercase letters');\n      if (/[0-9]/.test(password)) score += 1;else suggestions.push('Include numbers');\n      if (/[^a-zA-Z0-9]/.test(password)) score += 1;else suggestions.push('Include symbols');\n\n      // Patterns check\n      if (!/(.)\\1{2,}/.test(password)) score += 1;else suggestions.push('Avoid repeated characters');\n      let label = 'Very Weak';\n      if (score >= 6) label = 'Very Strong';else if (score >= 5) label = 'Strong';else if (score >= 4) label = 'Good';else if (score >= 3) label = 'Fair';else if (score >= 2) label = 'Weak';\n      return {\n        score,\n        label,\n        suggestions\n      };\n    }\n  }\n});","lineCount":138,"map":[[12,2,4,0,"Object"],[12,8,4,0],[12,9,4,0,"defineProperty"],[12,23,4,0],[12,24,4,0,"exports"],[12,31,4,0],[13,4,4,0,"enumerable"],[13,14,4,0],[14,4,4,0,"get"],[14,7,4,0],[14,18,4,0,"get"],[14,19,4,0],[15,6,4,0],[15,13,4,0,"EncryptionService"],[15,30,4,0],[16,4,4,0],[17,2,4,0],[18,2,1,0],[18,6,1,0,"_cryptoJs"],[18,15,1,0],[18,18,1,0,"require"],[18,25,1,0],[18,26,1,0,"_dependencyMap"],[18,40,1,0],[19,2,1,0],[19,6,1,0,"CryptoJS"],[19,14,1,0],[19,17,1,0,"_interopDefault"],[19,32,1,0],[19,33,1,0,"_cryptoJs"],[19,42,1,0],[20,2,2,0],[20,6,2,0,"_bcryptjs"],[20,15,2,0],[20,18,2,0,"require"],[20,25,2,0],[20,26,2,0,"_dependencyMap"],[20,40,2,0],[21,2,2,0],[21,6,2,0,"bcrypt"],[21,12,2,0],[21,15,2,0,"_interopDefault"],[21,30,2,0],[21,31,2,0,"_bcryptjs"],[21,40,2,0],[22,2,4,7],[22,8,4,13,"EncryptionService"],[22,25,4,30],[22,26,4,31],[23,4,5,2],[24,4,6,2],[24,17,6,15,"deriveKey"],[24,26,6,24,"deriveKey"],[24,27,6,25,"masterPassword"],[24,41,6,47],[24,43,6,49,"salt"],[24,47,6,61],[24,49,6,80],[25,6,7,4],[25,10,7,8],[26,8,8,6],[27,8,9,6],[27,14,9,12,"key"],[27,17,9,15],[27,20,9,18,"CryptoJS"],[27,28,9,26],[27,29,9,26,"default"],[27,36,9,26],[27,37,9,27,"PBKDF2"],[27,43,9,33],[27,44,9,34,"masterPassword"],[27,58,9,48],[27,60,9,50,"salt"],[27,64,9,54],[27,66,9,56],[28,10,10,8,"keySize"],[28,17,10,15],[28,19,10,17],[28,22,10,20],[28,25,10,21],[28,27,10,23],[29,10,11,8,"iterations"],[29,20,11,18],[29,22,11,20],[30,8,12,6],[30,9,12,7],[30,10,12,8],[31,8,13,6],[31,15,13,13,"key"],[31,18,13,16],[31,19,13,17,"toString"],[31,27,13,25],[31,28,13,26],[31,29,13,27],[32,6,14,4],[32,7,14,5],[32,8,14,6],[32,15,14,13,"error"],[32,20,14,18],[32,22,14,20],[33,8,15,6,"console"],[33,15,15,13],[33,16,15,14,"error"],[33,21,15,19],[33,22,15,20],[33,46,15,44],[33,48,15,46,"error"],[33,53,15,51],[33,54,15,52],[34,8,16,6],[34,14,16,12],[34,18,16,16,"Error"],[34,23,16,21],[34,24,16,22],[34,57,16,55],[34,58,16,56],[35,6,17,4],[36,4,18,2],[38,4,20,2],[39,4,21,2],[39,11,21,9,"generateSalt"],[39,23,21,21,"generateSalt"],[39,24,21,21],[39,26,21,32],[40,6,22,4],[40,13,22,11,"CryptoJS"],[40,21,22,19],[40,22,22,19,"default"],[40,29,22,19],[40,30,22,20,"lib"],[40,33,22,23],[40,34,22,24,"WordArray"],[40,43,22,33],[40,44,22,34,"random"],[40,50,22,40],[40,51,22,41],[40,53,22,43],[40,54,22,44],[40,55,22,45,"toString"],[40,63,22,53],[40,64,22,54],[40,65,22,55],[41,4,23,2],[43,4,25,2],[44,4,26,2],[44,11,26,9,"encrypt"],[44,18,26,16,"encrypt"],[44,19,26,17,"data"],[44,23,26,29],[44,25,26,31,"key"],[44,28,26,42],[44,30,26,52],[45,6,27,4],[45,10,27,8],[46,8,28,6],[47,8,29,6],[47,14,29,12,"utf8Data"],[47,22,29,20],[47,25,29,23,"CryptoJS"],[47,33,29,31],[47,34,29,31,"default"],[47,41,29,31],[47,42,29,32,"enc"],[47,45,29,35],[47,46,29,36,"Utf8"],[47,50,29,40],[47,51,29,41,"parse"],[47,56,29,46],[47,57,29,47,"data"],[47,61,29,51],[47,62,29,52],[48,8,30,6],[48,14,30,12,"encrypted"],[48,23,30,21],[48,26,30,24,"CryptoJS"],[48,34,30,32],[48,35,30,32,"default"],[48,42,30,32],[48,43,30,33,"AES"],[48,46,30,36],[48,47,30,37,"encrypt"],[48,54,30,44],[48,55,30,45,"utf8Data"],[48,63,30,53],[48,65,30,55,"key"],[48,68,30,58],[48,70,30,60],[49,10,31,8,"mode"],[49,14,31,12],[49,16,31,14,"CryptoJS"],[49,24,31,22],[49,25,31,22,"default"],[49,32,31,22],[49,33,31,23,"mode"],[49,37,31,27],[49,38,31,28,"CBC"],[49,41,31,31],[50,10,32,8,"padding"],[50,17,32,15],[50,19,32,17,"CryptoJS"],[50,27,32,25],[50,28,32,25,"default"],[50,35,32,25],[50,36,32,26,"pad"],[50,39,32,29],[50,40,32,30,"Pkcs7"],[51,8,33,6],[51,9,33,7],[51,10,33,8],[52,8,35,6,"console"],[52,15,35,13],[52,16,35,14,"log"],[52,19,35,17],[52,20,35,18],[52,43,35,41],[52,44,35,42],[53,8,36,6],[53,15,36,13,"encrypted"],[53,24,36,22],[53,25,36,23,"toString"],[53,33,36,31],[53,34,36,32],[53,35,36,33],[54,6,37,4],[54,7,37,5],[54,8,37,6],[54,15,37,13,"error"],[54,20,37,18],[54,22,37,20],[55,8,38,6,"console"],[55,15,38,13],[55,16,38,14,"error"],[55,21,38,19],[55,22,38,20],[55,42,38,40],[55,44,38,42,"error"],[55,49,38,47],[55,50,38,48],[56,8,39,6],[56,14,39,12],[56,18,39,16,"Error"],[56,23,39,21],[56,24,39,22],[56,48,39,46],[56,49,39,47],[57,6,40,4],[58,4,41,2],[60,4,43,2],[61,4,44,2],[61,11,44,9,"decrypt"],[61,18,44,16,"decrypt"],[61,19,44,17,"encryptedData"],[61,32,44,38],[61,34,44,40,"key"],[61,37,44,51],[61,39,44,61],[62,6,45,4],[62,10,45,8],[63,8,46,6,"console"],[63,15,46,13],[63,16,46,14,"log"],[63,19,46,17],[63,20,46,18],[63,51,46,49],[63,52,46,50],[64,8,48,6],[64,14,48,12,"decrypted"],[64,23,48,21],[64,26,48,24,"CryptoJS"],[64,34,48,32],[64,35,48,32,"default"],[64,42,48,32],[64,43,48,33,"AES"],[64,46,48,36],[64,47,48,37,"decrypt"],[64,54,48,44],[64,55,48,45,"encryptedData"],[64,68,48,58],[64,70,48,60,"key"],[64,73,48,63],[64,75,48,65],[65,10,49,8,"mode"],[65,14,49,12],[65,16,49,14,"CryptoJS"],[65,24,49,22],[65,25,49,22,"default"],[65,32,49,22],[65,33,49,23,"mode"],[65,37,49,27],[65,38,49,28,"CBC"],[65,41,49,31],[66,10,50,8,"padding"],[66,17,50,15],[66,19,50,17,"CryptoJS"],[66,27,50,25],[66,28,50,25,"default"],[66,35,50,25],[66,36,50,26,"pad"],[66,39,50,29],[66,40,50,30,"Pkcs7"],[67,8,51,6],[67,9,51,7],[67,10,51,8],[69,8,53,6],[70,8,54,6],[70,14,54,12,"decryptedString"],[70,29,54,27],[70,32,54,30,"decrypted"],[70,41,54,39],[70,42,54,40,"toString"],[70,50,54,48],[70,51,54,49,"CryptoJS"],[70,59,54,57],[70,60,54,57,"default"],[70,67,54,57],[70,68,54,58,"enc"],[70,71,54,61],[70,72,54,62,"Utf8"],[70,76,54,66],[70,77,54,67],[71,8,56,6],[71,12,56,10],[71,13,56,11,"decryptedString"],[71,28,56,26],[71,30,56,28],[72,10,57,8],[72,16,57,14],[72,20,57,18,"Error"],[72,25,57,23],[72,26,57,24],[72,68,57,66],[72,69,57,67],[73,8,58,6],[74,8,60,6,"console"],[74,15,60,13],[74,16,60,14,"log"],[74,19,60,17],[74,20,60,18],[74,43,60,41],[74,44,60,42],[75,8,61,6],[75,15,61,13,"decryptedString"],[75,30,61,28],[76,6,62,4],[76,7,62,5],[76,8,62,6],[76,15,62,13,"error"],[76,20,62,18],[76,22,62,20],[77,8,63,6,"console"],[77,15,63,13],[77,16,63,14,"error"],[77,21,63,19],[77,22,63,20],[77,42,63,40],[77,44,63,42,"error"],[77,49,63,47],[77,50,63,48],[78,8,64,6],[78,14,64,12],[78,18,64,16,"Error"],[78,23,64,21],[78,24,64,22],[78,80,64,78],[78,81,64,79],[79,6,65,4],[80,4,66,2],[82,4,68,2],[83,4,69,2],[83,17,69,15,"hashMasterPassword"],[83,35,69,33,"hashMasterPassword"],[83,36,69,34,"password"],[83,44,69,50],[83,46,69,52,"salt"],[83,50,69,64],[83,52,69,83],[84,6,70,4],[84,10,70,8],[85,8,71,6],[86,8,72,6],[86,14,72,12,"saltRounds"],[86,24,72,22],[86,27,72,25],[86,29,72,27],[87,8,73,6],[87,14,73,12,"hash"],[87,18,73,16],[87,21,73,19],[87,27,73,25,"bcrypt"],[87,33,73,31],[87,34,73,31,"default"],[87,41,73,31],[87,42,73,32,"hash"],[87,46,73,36],[87,47,73,37,"password"],[87,55,73,45],[87,58,73,48,"salt"],[87,62,73,52],[87,64,73,54,"saltRounds"],[87,74,73,64],[87,75,73,65],[88,8,74,6],[88,15,74,13,"hash"],[88,19,74,17],[89,6,75,4],[89,7,75,5],[89,8,75,6],[89,15,75,13,"error"],[89,20,75,18],[89,22,75,20],[90,8,76,6,"console"],[90,15,76,13],[90,16,76,14,"error"],[90,21,76,19],[90,22,76,20],[90,48,76,46],[90,50,76,48,"error"],[90,55,76,53],[90,56,76,54],[91,8,77,6],[91,14,77,12],[91,18,77,16,"Error"],[91,23,77,21],[91,24,77,22],[91,49,77,47],[91,50,77,48],[92,6,78,4],[93,4,79,2],[95,4,81,2],[96,4,82,2],[96,11,82,9,"generatePassword"],[96,27,82,25,"generatePassword"],[96,28,83,4,"length"],[96,34,83,18],[96,37,83,21],[96,39,83,23],[96,41,84,4,"includeUppercase"],[96,57,84,29],[96,60,84,32],[96,64,84,36],[96,66,85,4,"includeLowercase"],[96,82,85,29],[96,85,85,32],[96,89,85,36],[96,91,86,4,"includeNumbers"],[96,105,86,27],[96,108,86,30],[96,112,86,34],[96,114,87,4,"includeSymbols"],[96,128,87,27],[96,131,87,30],[96,135,87,34],[96,137,88,12],[97,6,89,4],[97,10,89,8,"charset"],[97,17,89,15],[97,20,89,18],[97,22,89,20],[98,6,90,4],[98,10,90,8,"includeUppercase"],[98,26,90,24],[98,28,90,26,"charset"],[98,35,90,33],[98,39,90,37],[98,67,90,65],[99,6,91,4],[99,10,91,8,"includeLowercase"],[99,26,91,24],[99,28,91,26,"charset"],[99,35,91,33],[99,39,91,37],[99,67,91,65],[100,6,92,4],[100,10,92,8,"includeNumbers"],[100,24,92,22],[100,26,92,24,"charset"],[100,33,92,31],[100,37,92,35],[100,49,92,47],[101,6,93,4],[101,10,93,8,"includeSymbols"],[101,24,93,22],[101,26,93,24,"charset"],[101,33,93,31],[101,37,93,35],[101,65,93,63],[102,6,95,4],[102,10,95,8],[102,11,95,9,"charset"],[102,18,95,16],[102,20,95,18],[103,8,96,6],[103,14,96,12],[103,18,96,16,"Error"],[103,23,96,21],[103,24,96,22],[103,70,96,68],[103,71,96,69],[104,6,97,4],[105,6,99,4],[105,10,99,8,"password"],[105,18,99,16],[105,21,99,19],[105,23,99,21],[106,6,100,4],[106,11,100,9],[106,15,100,13,"i"],[106,16,100,14],[106,19,100,17],[106,20,100,18],[106,22,100,20,"i"],[106,23,100,21],[106,26,100,24,"length"],[106,32,100,30],[106,34,100,32,"i"],[106,35,100,33],[106,37,100,35],[106,39,100,37],[107,8,101,6],[107,14,101,12,"randomIndex"],[107,25,101,23],[107,28,101,26,"Math"],[107,32,101,30],[107,33,101,31,"floor"],[107,38,101,36],[107,39,101,37,"Math"],[107,43,101,41],[107,44,101,42,"random"],[107,50,101,48],[107,51,101,49],[107,52,101,50],[107,55,101,53,"charset"],[107,62,101,60],[107,63,101,61,"length"],[107,69,101,67],[107,70,101,68],[108,8,102,6,"password"],[108,16,102,14],[108,20,102,18,"charset"],[108,27,102,25],[108,28,102,26,"randomIndex"],[108,39,102,37],[108,40,102,38],[109,6,103,4],[110,6,105,4],[110,13,105,11,"password"],[110,21,105,19],[111,4,106,2],[113,4,108,2],[114,4,109,2],[114,11,109,9,"calculatePasswordStrength"],[114,36,109,34,"calculatePasswordStrength"],[114,37,109,35,"password"],[114,45,109,51],[114,47,113,4],[115,6,114,4],[115,10,114,8,"score"],[115,15,114,13],[115,18,114,16],[115,19,114,17],[116,6,115,4],[116,12,115,10,"suggestions"],[116,23,115,31],[116,26,115,34],[116,28,115,36],[118,6,117,4],[119,6,118,4],[119,10,118,8,"password"],[119,18,118,16],[119,19,118,17,"length"],[119,25,118,23],[119,29,118,27],[119,31,118,29],[119,33,118,31,"score"],[119,38,118,36],[119,42,118,40],[119,43,118,41],[119,44,118,42],[119,49,119,9],[119,53,119,13,"password"],[119,61,119,21],[119,62,119,22,"length"],[119,68,119,28],[119,72,119,32],[119,73,119,33],[119,75,119,35,"score"],[119,80,119,40],[119,84,119,44],[119,85,119,45],[119,86,119,46],[119,91,120,9,"suggestions"],[119,102,120,20],[119,103,120,21,"push"],[119,107,120,25],[119,108,120,26],[119,135,120,53],[119,136,120,54],[121,6,122,4],[122,6,123,4],[122,10,123,8],[122,17,123,15],[122,18,123,16,"test"],[122,22,123,20],[122,23,123,21,"password"],[122,31,123,29],[122,32,123,30],[122,34,123,32,"score"],[122,39,123,37],[122,43,123,41],[122,44,123,42],[122,45,123,43],[122,50,124,9,"suggestions"],[122,61,124,20],[122,62,124,21,"push"],[122,66,124,25],[122,67,124,26],[122,94,124,53],[122,95,124,54],[123,6,126,4],[123,10,126,8],[123,17,126,15],[123,18,126,16,"test"],[123,22,126,20],[123,23,126,21,"password"],[123,31,126,29],[123,32,126,30],[123,34,126,32,"score"],[123,39,126,37],[123,43,126,41],[123,44,126,42],[123,45,126,43],[123,50,127,9,"suggestions"],[123,61,127,20],[123,62,127,21,"push"],[123,66,127,25],[123,67,127,26],[123,94,127,53],[123,95,127,54],[124,6,129,4],[124,10,129,8],[124,17,129,15],[124,18,129,16,"test"],[124,22,129,20],[124,23,129,21,"password"],[124,31,129,29],[124,32,129,30],[124,34,129,32,"score"],[124,39,129,37],[124,43,129,41],[124,44,129,42],[124,45,129,43],[124,50,130,9,"suggestions"],[124,61,130,20],[124,62,130,21,"push"],[124,66,130,25],[124,67,130,26],[124,84,130,43],[124,85,130,44],[125,6,132,4],[125,10,132,8],[125,24,132,22],[125,25,132,23,"test"],[125,29,132,27],[125,30,132,28,"password"],[125,38,132,36],[125,39,132,37],[125,41,132,39,"score"],[125,46,132,44],[125,50,132,48],[125,51,132,49],[125,52,132,50],[125,57,133,9,"suggestions"],[125,68,133,20],[125,69,133,21,"push"],[125,73,133,25],[125,74,133,26],[125,91,133,43],[125,92,133,44],[127,6,135,4],[128,6,136,4],[128,10,136,8],[128,11,136,9],[128,22,136,20],[128,23,136,21,"test"],[128,27,136,25],[128,28,136,26,"password"],[128,36,136,34],[128,37,136,35],[128,39,136,37,"score"],[128,44,136,42],[128,48,136,46],[128,49,136,47],[128,50,136,48],[128,55,137,9,"suggestions"],[128,66,137,20],[128,67,137,21,"push"],[128,71,137,25],[128,72,137,26],[128,99,137,53],[128,100,137,54],[129,6,139,4],[129,10,139,8,"label"],[129,15,139,13],[129,18,139,16],[129,29,139,27],[130,6,140,4],[130,10,140,8,"score"],[130,15,140,13],[130,19,140,17],[130,20,140,18],[130,22,140,20,"label"],[130,27,140,25],[130,30,140,28],[130,43,140,41],[130,44,140,42],[130,49,141,9],[130,53,141,13,"score"],[130,58,141,18],[130,62,141,22],[130,63,141,23],[130,65,141,25,"label"],[130,70,141,30],[130,73,141,33],[130,81,141,41],[130,82,141,42],[130,87,142,9],[130,91,142,13,"score"],[130,96,142,18],[130,100,142,22],[130,101,142,23],[130,103,142,25,"label"],[130,108,142,30],[130,111,142,33],[130,117,142,39],[130,118,142,40],[130,123,143,9],[130,127,143,13,"score"],[130,132,143,18],[130,136,143,22],[130,137,143,23],[130,139,143,25,"label"],[130,144,143,30],[130,147,143,33],[130,153,143,39],[130,154,143,40],[130,159,144,9],[130,163,144,13,"score"],[130,168,144,18],[130,172,144,22],[130,173,144,23],[130,175,144,25,"label"],[130,180,144,30],[130,183,144,33],[130,189,144,39],[131,6,146,4],[131,13,146,11],[132,8,146,13,"score"],[132,13,146,18],[133,8,146,20,"label"],[133,13,146,25],[134,8,146,27,"suggestions"],[135,6,146,39],[135,7,146,40],[136,4,147,2],[137,2,148,0],[138,0,148,1],[138,3]],"functionMap":{"names":["<global>","EncryptionService","EncryptionService.deriveKey","EncryptionService.generateSalt","EncryptionService.encrypt","EncryptionService.decrypt","EncryptionService.hashMasterPassword","EncryptionService.generatePassword","EncryptionService.calculatePasswordStrength"],"mappings":"AAA;OCG;ECE;GDY;EEG;GFE;EGG;GHe;EIG;GJsB;EKG;GLU;EMG;GNwB;EOG;GPsC"},"hasCjsExports":false},"type":"js/module"}]}