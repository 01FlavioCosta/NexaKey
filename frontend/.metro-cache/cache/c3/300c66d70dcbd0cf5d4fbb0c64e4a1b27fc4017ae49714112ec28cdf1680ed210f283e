{"dependencies":[{"name":"crypto-js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"TLjsXnAWOlf/gpObabse3HZX8VY=","exportNames":["*"],"imports":1}},{"name":"bcryptjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":30,"index":64}}],"key":"RrVAj5NITFKrtYKjtF9q+h3YF4s=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"EncryptionService\", {\n    enumerable: true,\n    get: function () {\n      return EncryptionService;\n    }\n  });\n  var _cryptoJs = require(_dependencyMap[0], \"crypto-js\");\n  var CryptoJS = _interopDefault(_cryptoJs);\n  var _bcryptjs = require(_dependencyMap[1], \"bcryptjs\");\n  var bcrypt = _interopDefault(_bcryptjs);\n  class EncryptionService {\n    // Generate a key from master password using PBKDF2 (web-compatible alternative to Argon2)\n    static async deriveKey(masterPassword, salt) {\n      try {\n        // Use PBKDF2 with high iteration count for key derivation\n        const key = CryptoJS.default.PBKDF2(masterPassword, salt, {\n          keySize: 256 / 32,\n          iterations: 100000\n        });\n        return key.toString();\n      } catch (error) {\n        console.error('Key derivation failed:', error);\n        throw new Error('Failed to derive encryption key');\n      }\n    }\n\n    // Generate a random salt\n    static generateSalt() {\n      return CryptoJS.default.lib.WordArray.random(16).toString();\n    }\n\n    // Encrypt data with AES-256\n    static encrypt(data, key) {\n      try {\n        const encrypted = CryptoJS.default.AES.encrypt(data, key).toString();\n        return encrypted;\n      } catch (error) {\n        console.error('Encryption failed:', error);\n        throw new Error('Failed to encrypt data');\n      }\n    }\n\n    // Decrypt data with AES-256\n    static decrypt(encryptedData, key) {\n      try {\n        const bytes = CryptoJS.default.AES.decrypt(encryptedData, key);\n        const decrypted = bytes.toString(CryptoJS.default.enc.Utf8);\n        if (!decrypted) {\n          throw new Error('Invalid decryption key');\n        }\n        return decrypted;\n      } catch (error) {\n        console.error('Decryption failed:', error);\n        throw new Error('Failed to decrypt data');\n      }\n    }\n\n    // Hash master password for server storage using bcrypt\n    static async hashMasterPassword(password, salt) {\n      try {\n        // Use bcrypt with salt rounds for password hashing\n        const saltRounds = 12;\n        const hash = await bcrypt.default.hash(password + salt, saltRounds);\n        return hash;\n      } catch (error) {\n        console.error('Password hashing failed:', error);\n        throw new Error('Failed to hash password');\n      }\n    }\n\n    // Generate strong password\n    static generatePassword(length = 16, includeUppercase = true, includeLowercase = true, includeNumbers = true, includeSymbols = true) {\n      let charset = '';\n      if (includeUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      if (includeLowercase) charset += 'abcdefghijklmnopqrstuvwxyz';\n      if (includeNumbers) charset += '0123456789';\n      if (includeSymbols) charset += '!@#$%^&*()_+-=[]{}|;:,.<>?';\n      if (!charset) {\n        throw new Error('At least one character type must be selected');\n      }\n      let password = '';\n      for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * charset.length);\n        password += charset[randomIndex];\n      }\n      return password;\n    }\n\n    // Calculate password strength\n    static calculatePasswordStrength(password) {\n      let score = 0;\n      const suggestions = [];\n\n      // Length check\n      if (password.length >= 12) score += 2;else if (password.length >= 8) score += 1;else suggestions.push('Use at least 8 characters');\n\n      // Character diversity\n      if (/[a-z]/.test(password)) score += 1;else suggestions.push('Include lowercase letters');\n      if (/[A-Z]/.test(password)) score += 1;else suggestions.push('Include uppercase letters');\n      if (/[0-9]/.test(password)) score += 1;else suggestions.push('Include numbers');\n      if (/[^a-zA-Z0-9]/.test(password)) score += 1;else suggestions.push('Include symbols');\n\n      // Patterns check\n      if (!/(.)\\1{2,}/.test(password)) score += 1;else suggestions.push('Avoid repeated characters');\n      let label = 'Very Weak';\n      if (score >= 6) label = 'Very Strong';else if (score >= 5) label = 'Strong';else if (score >= 4) label = 'Good';else if (score >= 3) label = 'Fair';else if (score >= 2) label = 'Weak';\n      return {\n        score,\n        label,\n        suggestions\n      };\n    }\n  }\n});","lineCount":125,"map":[[12,2,4,0,"Object"],[12,8,4,0],[12,9,4,0,"defineProperty"],[12,23,4,0],[12,24,4,0,"exports"],[12,31,4,0],[13,4,4,0,"enumerable"],[13,14,4,0],[14,4,4,0,"get"],[14,7,4,0],[14,18,4,0,"get"],[14,19,4,0],[15,6,4,0],[15,13,4,0,"EncryptionService"],[15,30,4,0],[16,4,4,0],[17,2,4,0],[18,2,1,0],[18,6,1,0,"_cryptoJs"],[18,15,1,0],[18,18,1,0,"require"],[18,25,1,0],[18,26,1,0,"_dependencyMap"],[18,40,1,0],[19,2,1,0],[19,6,1,0,"CryptoJS"],[19,14,1,0],[19,17,1,0,"_interopDefault"],[19,32,1,0],[19,33,1,0,"_cryptoJs"],[19,42,1,0],[20,2,2,0],[20,6,2,0,"_bcryptjs"],[20,15,2,0],[20,18,2,0,"require"],[20,25,2,0],[20,26,2,0,"_dependencyMap"],[20,40,2,0],[21,2,2,0],[21,6,2,0,"bcrypt"],[21,12,2,0],[21,15,2,0,"_interopDefault"],[21,30,2,0],[21,31,2,0,"_bcryptjs"],[21,40,2,0],[22,2,4,7],[22,8,4,13,"EncryptionService"],[22,25,4,30],[22,26,4,31],[23,4,5,2],[24,4,6,2],[24,17,6,15,"deriveKey"],[24,26,6,24,"deriveKey"],[24,27,6,25,"masterPassword"],[24,41,6,47],[24,43,6,49,"salt"],[24,47,6,61],[24,49,6,80],[25,6,7,4],[25,10,7,8],[26,8,8,6],[27,8,9,6],[27,14,9,12,"key"],[27,17,9,15],[27,20,9,18,"CryptoJS"],[27,28,9,26],[27,29,9,26,"default"],[27,36,9,26],[27,37,9,27,"PBKDF2"],[27,43,9,33],[27,44,9,34,"masterPassword"],[27,58,9,48],[27,60,9,50,"salt"],[27,64,9,54],[27,66,9,56],[28,10,10,8,"keySize"],[28,17,10,15],[28,19,10,17],[28,22,10,20],[28,25,10,21],[28,27,10,23],[29,10,11,8,"iterations"],[29,20,11,18],[29,22,11,20],[30,8,12,6],[30,9,12,7],[30,10,12,8],[31,8,13,6],[31,15,13,13,"key"],[31,18,13,16],[31,19,13,17,"toString"],[31,27,13,25],[31,28,13,26],[31,29,13,27],[32,6,14,4],[32,7,14,5],[32,8,14,6],[32,15,14,13,"error"],[32,20,14,18],[32,22,14,20],[33,8,15,6,"console"],[33,15,15,13],[33,16,15,14,"error"],[33,21,15,19],[33,22,15,20],[33,46,15,44],[33,48,15,46,"error"],[33,53,15,51],[33,54,15,52],[34,8,16,6],[34,14,16,12],[34,18,16,16,"Error"],[34,23,16,21],[34,24,16,22],[34,57,16,55],[34,58,16,56],[35,6,17,4],[36,4,18,2],[38,4,20,2],[39,4,21,2],[39,11,21,9,"generateSalt"],[39,23,21,21,"generateSalt"],[39,24,21,21],[39,26,21,32],[40,6,22,4],[40,13,22,11,"CryptoJS"],[40,21,22,19],[40,22,22,19,"default"],[40,29,22,19],[40,30,22,20,"lib"],[40,33,22,23],[40,34,22,24,"WordArray"],[40,43,22,33],[40,44,22,34,"random"],[40,50,22,40],[40,51,22,41],[40,53,22,43],[40,54,22,44],[40,55,22,45,"toString"],[40,63,22,53],[40,64,22,54],[40,65,22,55],[41,4,23,2],[43,4,25,2],[44,4,26,2],[44,11,26,9,"encrypt"],[44,18,26,16,"encrypt"],[44,19,26,17,"data"],[44,23,26,29],[44,25,26,31,"key"],[44,28,26,42],[44,30,26,52],[45,6,27,4],[45,10,27,8],[46,8,28,6],[46,14,28,12,"encrypted"],[46,23,28,21],[46,26,28,24,"CryptoJS"],[46,34,28,32],[46,35,28,32,"default"],[46,42,28,32],[46,43,28,33,"AES"],[46,46,28,36],[46,47,28,37,"encrypt"],[46,54,28,44],[46,55,28,45,"data"],[46,59,28,49],[46,61,28,51,"key"],[46,64,28,54],[46,65,28,55],[46,66,28,56,"toString"],[46,74,28,64],[46,75,28,65],[46,76,28,66],[47,8,29,6],[47,15,29,13,"encrypted"],[47,24,29,22],[48,6,30,4],[48,7,30,5],[48,8,30,6],[48,15,30,13,"error"],[48,20,30,18],[48,22,30,20],[49,8,31,6,"console"],[49,15,31,13],[49,16,31,14,"error"],[49,21,31,19],[49,22,31,20],[49,42,31,40],[49,44,31,42,"error"],[49,49,31,47],[49,50,31,48],[50,8,32,6],[50,14,32,12],[50,18,32,16,"Error"],[50,23,32,21],[50,24,32,22],[50,48,32,46],[50,49,32,47],[51,6,33,4],[52,4,34,2],[54,4,36,2],[55,4,37,2],[55,11,37,9,"decrypt"],[55,18,37,16,"decrypt"],[55,19,37,17,"encryptedData"],[55,32,37,38],[55,34,37,40,"key"],[55,37,37,51],[55,39,37,61],[56,6,38,4],[56,10,38,8],[57,8,39,6],[57,14,39,12,"bytes"],[57,19,39,17],[57,22,39,20,"CryptoJS"],[57,30,39,28],[57,31,39,28,"default"],[57,38,39,28],[57,39,39,29,"AES"],[57,42,39,32],[57,43,39,33,"decrypt"],[57,50,39,40],[57,51,39,41,"encryptedData"],[57,64,39,54],[57,66,39,56,"key"],[57,69,39,59],[57,70,39,60],[58,8,40,6],[58,14,40,12,"decrypted"],[58,23,40,21],[58,26,40,24,"bytes"],[58,31,40,29],[58,32,40,30,"toString"],[58,40,40,38],[58,41,40,39,"CryptoJS"],[58,49,40,47],[58,50,40,47,"default"],[58,57,40,47],[58,58,40,48,"enc"],[58,61,40,51],[58,62,40,52,"Utf8"],[58,66,40,56],[58,67,40,57],[59,8,41,6],[59,12,41,10],[59,13,41,11,"decrypted"],[59,22,41,20],[59,24,41,22],[60,10,42,8],[60,16,42,14],[60,20,42,18,"Error"],[60,25,42,23],[60,26,42,24],[60,50,42,48],[60,51,42,49],[61,8,43,6],[62,8,44,6],[62,15,44,13,"decrypted"],[62,24,44,22],[63,6,45,4],[63,7,45,5],[63,8,45,6],[63,15,45,13,"error"],[63,20,45,18],[63,22,45,20],[64,8,46,6,"console"],[64,15,46,13],[64,16,46,14,"error"],[64,21,46,19],[64,22,46,20],[64,42,46,40],[64,44,46,42,"error"],[64,49,46,47],[64,50,46,48],[65,8,47,6],[65,14,47,12],[65,18,47,16,"Error"],[65,23,47,21],[65,24,47,22],[65,48,47,46],[65,49,47,47],[66,6,48,4],[67,4,49,2],[69,4,51,2],[70,4,52,2],[70,17,52,15,"hashMasterPassword"],[70,35,52,33,"hashMasterPassword"],[70,36,52,34,"password"],[70,44,52,50],[70,46,52,52,"salt"],[70,50,52,64],[70,52,52,83],[71,6,53,4],[71,10,53,8],[72,8,54,6],[73,8,55,6],[73,14,55,12,"saltRounds"],[73,24,55,22],[73,27,55,25],[73,29,55,27],[74,8,56,6],[74,14,56,12,"hash"],[74,18,56,16],[74,21,56,19],[74,27,56,25,"bcrypt"],[74,33,56,31],[74,34,56,31,"default"],[74,41,56,31],[74,42,56,32,"hash"],[74,46,56,36],[74,47,56,37,"password"],[74,55,56,45],[74,58,56,48,"salt"],[74,62,56,52],[74,64,56,54,"saltRounds"],[74,74,56,64],[74,75,56,65],[75,8,57,6],[75,15,57,13,"hash"],[75,19,57,17],[76,6,58,4],[76,7,58,5],[76,8,58,6],[76,15,58,13,"error"],[76,20,58,18],[76,22,58,20],[77,8,59,6,"console"],[77,15,59,13],[77,16,59,14,"error"],[77,21,59,19],[77,22,59,20],[77,48,59,46],[77,50,59,48,"error"],[77,55,59,53],[77,56,59,54],[78,8,60,6],[78,14,60,12],[78,18,60,16,"Error"],[78,23,60,21],[78,24,60,22],[78,49,60,47],[78,50,60,48],[79,6,61,4],[80,4,62,2],[82,4,64,2],[83,4,65,2],[83,11,65,9,"generatePassword"],[83,27,65,25,"generatePassword"],[83,28,66,4,"length"],[83,34,66,18],[83,37,66,21],[83,39,66,23],[83,41,67,4,"includeUppercase"],[83,57,67,29],[83,60,67,32],[83,64,67,36],[83,66,68,4,"includeLowercase"],[83,82,68,29],[83,85,68,32],[83,89,68,36],[83,91,69,4,"includeNumbers"],[83,105,69,27],[83,108,69,30],[83,112,69,34],[83,114,70,4,"includeSymbols"],[83,128,70,27],[83,131,70,30],[83,135,70,34],[83,137,71,12],[84,6,72,4],[84,10,72,8,"charset"],[84,17,72,15],[84,20,72,18],[84,22,72,20],[85,6,73,4],[85,10,73,8,"includeUppercase"],[85,26,73,24],[85,28,73,26,"charset"],[85,35,73,33],[85,39,73,37],[85,67,73,65],[86,6,74,4],[86,10,74,8,"includeLowercase"],[86,26,74,24],[86,28,74,26,"charset"],[86,35,74,33],[86,39,74,37],[86,67,74,65],[87,6,75,4],[87,10,75,8,"includeNumbers"],[87,24,75,22],[87,26,75,24,"charset"],[87,33,75,31],[87,37,75,35],[87,49,75,47],[88,6,76,4],[88,10,76,8,"includeSymbols"],[88,24,76,22],[88,26,76,24,"charset"],[88,33,76,31],[88,37,76,35],[88,65,76,63],[89,6,78,4],[89,10,78,8],[89,11,78,9,"charset"],[89,18,78,16],[89,20,78,18],[90,8,79,6],[90,14,79,12],[90,18,79,16,"Error"],[90,23,79,21],[90,24,79,22],[90,70,79,68],[90,71,79,69],[91,6,80,4],[92,6,82,4],[92,10,82,8,"password"],[92,18,82,16],[92,21,82,19],[92,23,82,21],[93,6,83,4],[93,11,83,9],[93,15,83,13,"i"],[93,16,83,14],[93,19,83,17],[93,20,83,18],[93,22,83,20,"i"],[93,23,83,21],[93,26,83,24,"length"],[93,32,83,30],[93,34,83,32,"i"],[93,35,83,33],[93,37,83,35],[93,39,83,37],[94,8,84,6],[94,14,84,12,"randomIndex"],[94,25,84,23],[94,28,84,26,"Math"],[94,32,84,30],[94,33,84,31,"floor"],[94,38,84,36],[94,39,84,37,"Math"],[94,43,84,41],[94,44,84,42,"random"],[94,50,84,48],[94,51,84,49],[94,52,84,50],[94,55,84,53,"charset"],[94,62,84,60],[94,63,84,61,"length"],[94,69,84,67],[94,70,84,68],[95,8,85,6,"password"],[95,16,85,14],[95,20,85,18,"charset"],[95,27,85,25],[95,28,85,26,"randomIndex"],[95,39,85,37],[95,40,85,38],[96,6,86,4],[97,6,88,4],[97,13,88,11,"password"],[97,21,88,19],[98,4,89,2],[100,4,91,2],[101,4,92,2],[101,11,92,9,"calculatePasswordStrength"],[101,36,92,34,"calculatePasswordStrength"],[101,37,92,35,"password"],[101,45,92,51],[101,47,96,4],[102,6,97,4],[102,10,97,8,"score"],[102,15,97,13],[102,18,97,16],[102,19,97,17],[103,6,98,4],[103,12,98,10,"suggestions"],[103,23,98,31],[103,26,98,34],[103,28,98,36],[105,6,100,4],[106,6,101,4],[106,10,101,8,"password"],[106,18,101,16],[106,19,101,17,"length"],[106,25,101,23],[106,29,101,27],[106,31,101,29],[106,33,101,31,"score"],[106,38,101,36],[106,42,101,40],[106,43,101,41],[106,44,101,42],[106,49,102,9],[106,53,102,13,"password"],[106,61,102,21],[106,62,102,22,"length"],[106,68,102,28],[106,72,102,32],[106,73,102,33],[106,75,102,35,"score"],[106,80,102,40],[106,84,102,44],[106,85,102,45],[106,86,102,46],[106,91,103,9,"suggestions"],[106,102,103,20],[106,103,103,21,"push"],[106,107,103,25],[106,108,103,26],[106,135,103,53],[106,136,103,54],[108,6,105,4],[109,6,106,4],[109,10,106,8],[109,17,106,15],[109,18,106,16,"test"],[109,22,106,20],[109,23,106,21,"password"],[109,31,106,29],[109,32,106,30],[109,34,106,32,"score"],[109,39,106,37],[109,43,106,41],[109,44,106,42],[109,45,106,43],[109,50,107,9,"suggestions"],[109,61,107,20],[109,62,107,21,"push"],[109,66,107,25],[109,67,107,26],[109,94,107,53],[109,95,107,54],[110,6,109,4],[110,10,109,8],[110,17,109,15],[110,18,109,16,"test"],[110,22,109,20],[110,23,109,21,"password"],[110,31,109,29],[110,32,109,30],[110,34,109,32,"score"],[110,39,109,37],[110,43,109,41],[110,44,109,42],[110,45,109,43],[110,50,110,9,"suggestions"],[110,61,110,20],[110,62,110,21,"push"],[110,66,110,25],[110,67,110,26],[110,94,110,53],[110,95,110,54],[111,6,112,4],[111,10,112,8],[111,17,112,15],[111,18,112,16,"test"],[111,22,112,20],[111,23,112,21,"password"],[111,31,112,29],[111,32,112,30],[111,34,112,32,"score"],[111,39,112,37],[111,43,112,41],[111,44,112,42],[111,45,112,43],[111,50,113,9,"suggestions"],[111,61,113,20],[111,62,113,21,"push"],[111,66,113,25],[111,67,113,26],[111,84,113,43],[111,85,113,44],[112,6,115,4],[112,10,115,8],[112,24,115,22],[112,25,115,23,"test"],[112,29,115,27],[112,30,115,28,"password"],[112,38,115,36],[112,39,115,37],[112,41,115,39,"score"],[112,46,115,44],[112,50,115,48],[112,51,115,49],[112,52,115,50],[112,57,116,9,"suggestions"],[112,68,116,20],[112,69,116,21,"push"],[112,73,116,25],[112,74,116,26],[112,91,116,43],[112,92,116,44],[114,6,118,4],[115,6,119,4],[115,10,119,8],[115,11,119,9],[115,22,119,20],[115,23,119,21,"test"],[115,27,119,25],[115,28,119,26,"password"],[115,36,119,34],[115,37,119,35],[115,39,119,37,"score"],[115,44,119,42],[115,48,119,46],[115,49,119,47],[115,50,119,48],[115,55,120,9,"suggestions"],[115,66,120,20],[115,67,120,21,"push"],[115,71,120,25],[115,72,120,26],[115,99,120,53],[115,100,120,54],[116,6,122,4],[116,10,122,8,"label"],[116,15,122,13],[116,18,122,16],[116,29,122,27],[117,6,123,4],[117,10,123,8,"score"],[117,15,123,13],[117,19,123,17],[117,20,123,18],[117,22,123,20,"label"],[117,27,123,25],[117,30,123,28],[117,43,123,41],[117,44,123,42],[117,49,124,9],[117,53,124,13,"score"],[117,58,124,18],[117,62,124,22],[117,63,124,23],[117,65,124,25,"label"],[117,70,124,30],[117,73,124,33],[117,81,124,41],[117,82,124,42],[117,87,125,9],[117,91,125,13,"score"],[117,96,125,18],[117,100,125,22],[117,101,125,23],[117,103,125,25,"label"],[117,108,125,30],[117,111,125,33],[117,117,125,39],[117,118,125,40],[117,123,126,9],[117,127,126,13,"score"],[117,132,126,18],[117,136,126,22],[117,137,126,23],[117,139,126,25,"label"],[117,144,126,30],[117,147,126,33],[117,153,126,39],[117,154,126,40],[117,159,127,9],[117,163,127,13,"score"],[117,168,127,18],[117,172,127,22],[117,173,127,23],[117,175,127,25,"label"],[117,180,127,30],[117,183,127,33],[117,189,127,39],[118,6,129,4],[118,13,129,11],[119,8,129,13,"score"],[119,13,129,18],[120,8,129,20,"label"],[120,13,129,25],[121,8,129,27,"suggestions"],[122,6,129,39],[122,7,129,40],[123,4,130,2],[124,2,131,0],[125,0,131,1],[125,3]],"functionMap":{"names":["<global>","EncryptionService","EncryptionService.deriveKey","EncryptionService.generateSalt","EncryptionService.encrypt","EncryptionService.decrypt","EncryptionService.hashMasterPassword","EncryptionService.generatePassword","EncryptionService.calculatePasswordStrength"],"mappings":"AAA;OCG;ECE;GDY;EEG;GFE;EGG;GHQ;EIG;GJY;EKG;GLU;EMG;GNwB;EOG;GPsC"},"hasCjsExports":false},"type":"js/module"}]}