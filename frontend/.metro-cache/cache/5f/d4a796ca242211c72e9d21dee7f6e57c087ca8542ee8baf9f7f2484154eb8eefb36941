{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-local-authentication","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"XtWhUDJAsjsPYmsPbazqQX44aUU=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Alert","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"PEUC6jrQVoAGZ2qYkvimljMOyJI=","exportNames":["*"]}},{"name":"./storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":104},"end":{"line":3,"column":49,"index":153}}],"key":"3rLtLV8J3gSw9c8Ep8Wpc3w/Yxg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.BiometricsService = void 0;\n  var LocalAuthentication = _interopRequireWildcard(require(_dependencyMap[1], \"expo-local-authentication\"));\n  var _Alert = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/Alert\"));\n  var _storage = require(_dependencyMap[3], \"./storage\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  class BiometricsService {\n    // Check if biometric authentication is available\n    static async isAvailable() {\n      try {\n        const hasHardware = await LocalAuthentication.hasHardwareAsync();\n        const isEnrolled = await LocalAuthentication.isEnrolledAsync();\n        return hasHardware && isEnrolled;\n      } catch (error) {\n        console.error('Biometric availability check failed:', error);\n        return false;\n      }\n    }\n\n    // Get supported biometric types\n    static async getSupportedTypes() {\n      try {\n        return await LocalAuthentication.supportedAuthenticationTypesAsync();\n      } catch (error) {\n        console.error('Failed to get supported biometric types:', error);\n        return [];\n      }\n    }\n\n    // Get biometric type name for display\n    static getBiometricTypeName(type) {\n      switch (type) {\n        case LocalAuthentication.AuthenticationType.FINGERPRINT:\n          return 'Impressão Digital';\n        case LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION:\n          return 'Reconhecimento Facial';\n        case LocalAuthentication.AuthenticationType.IRIS:\n          return 'Reconhecimento de Íris';\n        default:\n          return 'Biometria';\n      }\n    }\n\n    // Authenticate with biometrics\n    static async authenticate(promptMessage = 'Confirme sua identidade', fallbackLabel = 'Usar senha mestra') {\n      try {\n        const isAvailable = await this.isAvailable();\n        if (!isAvailable) {\n          _Alert.default.alert('Biometria Indisponível', 'Sua biometria não está configurada no dispositivo.');\n          return false;\n        }\n        const result = await LocalAuthentication.authenticateAsync({\n          promptMessage,\n          fallbackLabel,\n          cancelLabel: 'Cancelar',\n          disableDeviceFallback: false\n        });\n        return result.success;\n      } catch (error) {\n        console.error('Biometric authentication failed:', error);\n        return false;\n      }\n    }\n\n    // Setup biometric authentication for the user\n    static async setupBiometricAuth(masterKey) {\n      try {\n        const isAvailable = await this.isAvailable();\n        if (!isAvailable) {\n          _Alert.default.alert('Biometria Indisponível', 'Configure a biometria nas configurações do seu dispositivo primeiro.');\n          return false;\n        }\n        const supportedTypes = await this.getSupportedTypes();\n        const typeNames = supportedTypes.map(type => this.getBiometricTypeName(type));\n        const success = await this.authenticate(`Confirme sua ${typeNames.join(' ou ')} para ativar o desbloqueio biométrico`, 'Cancelar');\n        if (success) {\n          // Store the master key for biometric recovery\n          await _storage.SecureStorageService.storeBiometricKey(masterKey);\n          await _storage.SecureStorageService.setBiometricEnabled(true);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Biometric setup failed:', error);\n        return false;\n      }\n    }\n\n    // Login with biometric authentication\n    static async biometricLogin() {\n      try {\n        const isBiometricEnabled = await _storage.SecureStorageService.isBiometricEnabled();\n        if (!isBiometricEnabled) {\n          return null;\n        }\n        const success = await this.authenticate('Use sua biometria para acessar o NexaKey', 'Usar senha mestra');\n        if (success) {\n          // Retrieve the stored master key\n          const masterKey = await _storage.SecureStorageService.getBiometricKey();\n          return masterKey;\n        }\n        return null;\n      } catch (error) {\n        console.error('Biometric login failed:', error);\n        return null;\n      }\n    }\n\n    // Reset master password using biometric authentication\n    static async biometricPasswordReset(email, newPassword) {\n      try {\n        const isBiometricEnabled = await _storage.SecureStorageService.isBiometricEnabled();\n        if (!isBiometricEnabled) {\n          _Alert.default.alert('Biometria Não Configurada', 'Você não configurou a biometria para recuperação de senha.');\n          return false;\n        }\n        const success = await this.authenticate('Confirme sua identidade para redefinir a senha mestra', 'Cancelar');\n        if (success) {\n          // Here you would call the backend to reset password\n          // For now, we'll just show a success message\n          _Alert.default.alert('Senha Redefinida', 'Sua senha mestra foi redefinida com sucesso!');\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Biometric password reset failed:', error);\n        return false;\n      }\n    }\n\n    // Disable biometric authentication\n    static async disableBiometricAuth() {\n      try {\n        const success = await this.authenticate('Confirme para desativar o desbloqueio biométrico', 'Cancelar');\n        if (success) {\n          await _storage.SecureStorageService.setBiometricEnabled(false);\n          // Note: We keep the biometric key for future re-enabling\n          _Alert.default.alert('Sucesso', 'Desbloqueio biométrico desativado');\n        }\n      } catch (error) {\n        console.error('Failed to disable biometric auth:', error);\n      }\n    }\n  }\n  exports.BiometricsService = BiometricsService;\n});","lineCount":150,"map":[[7,2,1,0],[7,6,1,0,"LocalAuthentication"],[7,25,1,0],[7,28,1,0,"_interopRequireWildcard"],[7,51,1,0],[7,52,1,0,"require"],[7,59,1,0],[7,60,1,0,"_dependencyMap"],[7,74,1,0],[8,2,1,65],[8,6,1,65,"_Alert"],[8,12,1,65],[8,15,1,65,"_interopRequireDefault"],[8,37,1,65],[8,38,1,65,"require"],[8,45,1,65],[8,46,1,65,"_dependencyMap"],[8,60,1,65],[9,2,3,0],[9,6,3,0,"_storage"],[9,14,3,0],[9,17,3,0,"require"],[9,24,3,0],[9,25,3,0,"_dependencyMap"],[9,39,3,0],[10,2,3,49],[10,11,3,49,"_interopRequireWildcard"],[10,35,3,49,"e"],[10,36,3,49],[10,38,3,49,"t"],[10,39,3,49],[10,68,3,49,"WeakMap"],[10,75,3,49],[10,81,3,49,"r"],[10,82,3,49],[10,89,3,49,"WeakMap"],[10,96,3,49],[10,100,3,49,"n"],[10,101,3,49],[10,108,3,49,"WeakMap"],[10,115,3,49],[10,127,3,49,"_interopRequireWildcard"],[10,150,3,49],[10,162,3,49,"_interopRequireWildcard"],[10,163,3,49,"e"],[10,164,3,49],[10,166,3,49,"t"],[10,167,3,49],[10,176,3,49,"t"],[10,177,3,49],[10,181,3,49,"e"],[10,182,3,49],[10,186,3,49,"e"],[10,187,3,49],[10,188,3,49,"__esModule"],[10,198,3,49],[10,207,3,49,"e"],[10,208,3,49],[10,214,3,49,"o"],[10,215,3,49],[10,217,3,49,"i"],[10,218,3,49],[10,220,3,49,"f"],[10,221,3,49],[10,226,3,49,"__proto__"],[10,235,3,49],[10,243,3,49,"default"],[10,250,3,49],[10,252,3,49,"e"],[10,253,3,49],[10,270,3,49,"e"],[10,271,3,49],[10,294,3,49,"e"],[10,295,3,49],[10,320,3,49,"e"],[10,321,3,49],[10,330,3,49,"f"],[10,331,3,49],[10,337,3,49,"o"],[10,338,3,49],[10,341,3,49,"t"],[10,342,3,49],[10,345,3,49,"n"],[10,346,3,49],[10,349,3,49,"r"],[10,350,3,49],[10,358,3,49,"o"],[10,359,3,49],[10,360,3,49,"has"],[10,363,3,49],[10,364,3,49,"e"],[10,365,3,49],[10,375,3,49,"o"],[10,376,3,49],[10,377,3,49,"get"],[10,380,3,49],[10,381,3,49,"e"],[10,382,3,49],[10,385,3,49,"o"],[10,386,3,49],[10,387,3,49,"set"],[10,390,3,49],[10,391,3,49,"e"],[10,392,3,49],[10,394,3,49,"f"],[10,395,3,49],[10,411,3,49,"t"],[10,412,3,49],[10,416,3,49,"e"],[10,417,3,49],[10,433,3,49,"t"],[10,434,3,49],[10,441,3,49,"hasOwnProperty"],[10,455,3,49],[10,456,3,49,"call"],[10,460,3,49],[10,461,3,49,"e"],[10,462,3,49],[10,464,3,49,"t"],[10,465,3,49],[10,472,3,49,"i"],[10,473,3,49],[10,477,3,49,"o"],[10,478,3,49],[10,481,3,49,"Object"],[10,487,3,49],[10,488,3,49,"defineProperty"],[10,502,3,49],[10,507,3,49,"Object"],[10,513,3,49],[10,514,3,49,"getOwnPropertyDescriptor"],[10,538,3,49],[10,539,3,49,"e"],[10,540,3,49],[10,542,3,49,"t"],[10,543,3,49],[10,550,3,49,"i"],[10,551,3,49],[10,552,3,49,"get"],[10,555,3,49],[10,559,3,49,"i"],[10,560,3,49],[10,561,3,49,"set"],[10,564,3,49],[10,568,3,49,"o"],[10,569,3,49],[10,570,3,49,"f"],[10,571,3,49],[10,573,3,49,"t"],[10,574,3,49],[10,576,3,49,"i"],[10,577,3,49],[10,581,3,49,"f"],[10,582,3,49],[10,583,3,49,"t"],[10,584,3,49],[10,588,3,49,"e"],[10,589,3,49],[10,590,3,49,"t"],[10,591,3,49],[10,602,3,49,"f"],[10,603,3,49],[10,608,3,49,"e"],[10,609,3,49],[10,611,3,49,"t"],[10,612,3,49],[11,2,5,7],[11,8,5,13,"BiometricsService"],[11,25,5,30],[11,26,5,31],[12,4,6,2],[13,4,7,2],[13,17,7,15,"isAvailable"],[13,28,7,26,"isAvailable"],[13,29,7,26],[13,31,7,47],[14,6,8,4],[14,10,8,8],[15,8,9,6],[15,14,9,12,"hasHardware"],[15,25,9,23],[15,28,9,26],[15,34,9,32,"LocalAuthentication"],[15,53,9,51],[15,54,9,52,"hasHardwareAsync"],[15,70,9,68],[15,71,9,69],[15,72,9,70],[16,8,10,6],[16,14,10,12,"isEnrolled"],[16,24,10,22],[16,27,10,25],[16,33,10,31,"LocalAuthentication"],[16,52,10,50],[16,53,10,51,"isEnrolledAsync"],[16,68,10,66],[16,69,10,67],[16,70,10,68],[17,8,11,6],[17,15,11,13,"hasHardware"],[17,26,11,24],[17,30,11,28,"isEnrolled"],[17,40,11,38],[18,6,12,4],[18,7,12,5],[18,8,12,6],[18,15,12,13,"error"],[18,20,12,18],[18,22,12,20],[19,8,13,6,"console"],[19,15,13,13],[19,16,13,14,"error"],[19,21,13,19],[19,22,13,20],[19,60,13,58],[19,62,13,60,"error"],[19,67,13,65],[19,68,13,66],[20,8,14,6],[20,15,14,13],[20,20,14,18],[21,6,15,4],[22,4,16,2],[24,4,18,2],[25,4,19,2],[25,17,19,15,"getSupportedTypes"],[25,34,19,32,"getSupportedTypes"],[25,35,19,32],[25,37,19,86],[26,6,20,4],[26,10,20,8],[27,8,21,6],[27,15,21,13],[27,21,21,19,"LocalAuthentication"],[27,40,21,38],[27,41,21,39,"supportedAuthenticationTypesAsync"],[27,74,21,72],[27,75,21,73],[27,76,21,74],[28,6,22,4],[28,7,22,5],[28,8,22,6],[28,15,22,13,"error"],[28,20,22,18],[28,22,22,20],[29,8,23,6,"console"],[29,15,23,13],[29,16,23,14,"error"],[29,21,23,19],[29,22,23,20],[29,64,23,62],[29,66,23,64,"error"],[29,71,23,69],[29,72,23,70],[30,8,24,6],[30,15,24,13],[30,17,24,15],[31,6,25,4],[32,4,26,2],[34,4,28,2],[35,4,29,2],[35,11,29,9,"getBiometricTypeName"],[35,31,29,29,"getBiometricTypeName"],[35,32,29,30,"type"],[35,36,29,74],[35,38,29,84],[36,6,30,4],[36,14,30,12,"type"],[36,18,30,16],[37,8,31,6],[37,13,31,11,"LocalAuthentication"],[37,32,31,30],[37,33,31,31,"AuthenticationType"],[37,51,31,49],[37,52,31,50,"FINGERPRINT"],[37,63,31,61],[38,10,32,8],[38,17,32,15],[38,36,32,34],[39,8,33,6],[39,13,33,11,"LocalAuthentication"],[39,32,33,30],[39,33,33,31,"AuthenticationType"],[39,51,33,49],[39,52,33,50,"FACIAL_RECOGNITION"],[39,70,33,68],[40,10,34,8],[40,17,34,15],[40,40,34,38],[41,8,35,6],[41,13,35,11,"LocalAuthentication"],[41,32,35,30],[41,33,35,31,"AuthenticationType"],[41,51,35,49],[41,52,35,50,"IRIS"],[41,56,35,54],[42,10,36,8],[42,17,36,15],[42,41,36,39],[43,8,37,6],[44,10,38,8],[44,17,38,15],[44,28,38,26],[45,6,39,4],[46,4,40,2],[48,4,42,2],[49,4,43,2],[49,17,43,15,"authenticate"],[49,29,43,27,"authenticate"],[49,30,44,4,"promptMessage"],[49,43,44,25],[49,46,44,28],[49,71,44,53],[49,73,45,4,"fallbackLabel"],[49,86,45,25],[49,89,45,28],[49,108,45,47],[49,110,46,22],[50,6,47,4],[50,10,47,8],[51,8,48,6],[51,14,48,12,"isAvailable"],[51,25,48,23],[51,28,48,26],[51,34,48,32],[51,38,48,36],[51,39,48,37,"isAvailable"],[51,50,48,48],[51,51,48,49],[51,52,48,50],[52,8,49,6],[52,12,49,10],[52,13,49,11,"isAvailable"],[52,24,49,22],[52,26,49,24],[53,10,50,8,"Alert"],[53,24,50,13],[53,25,50,14,"alert"],[53,30,50,19],[53,31,51,10],[53,55,51,34],[53,57,52,10],[53,109,53,8],[53,110,53,9],[54,10,54,8],[54,17,54,15],[54,22,54,20],[55,8,55,6],[56,8,57,6],[56,14,57,12,"result"],[56,20,57,18],[56,23,57,21],[56,29,57,27,"LocalAuthentication"],[56,48,57,46],[56,49,57,47,"authenticateAsync"],[56,66,57,64],[56,67,57,65],[57,10,58,8,"promptMessage"],[57,23,58,21],[58,10,59,8,"fallbackLabel"],[58,23,59,21],[59,10,60,8,"cancelLabel"],[59,21,60,19],[59,23,60,21],[59,33,60,31],[60,10,61,8,"disableDeviceFallback"],[60,31,61,29],[60,33,61,31],[61,8,62,6],[61,9,62,7],[61,10,62,8],[62,8,64,6],[62,15,64,13,"result"],[62,21,64,19],[62,22,64,20,"success"],[62,29,64,27],[63,6,65,4],[63,7,65,5],[63,8,65,6],[63,15,65,13,"error"],[63,20,65,18],[63,22,65,20],[64,8,66,6,"console"],[64,15,66,13],[64,16,66,14,"error"],[64,21,66,19],[64,22,66,20],[64,56,66,54],[64,58,66,56,"error"],[64,63,66,61],[64,64,66,62],[65,8,67,6],[65,15,67,13],[65,20,67,18],[66,6,68,4],[67,4,69,2],[69,4,71,2],[70,4,72,2],[70,17,72,15,"setupBiometricAuth"],[70,35,72,33,"setupBiometricAuth"],[70,36,72,34,"masterKey"],[70,45,72,51],[70,47,72,71],[71,6,73,4],[71,10,73,8],[72,8,74,6],[72,14,74,12,"isAvailable"],[72,25,74,23],[72,28,74,26],[72,34,74,32],[72,38,74,36],[72,39,74,37,"isAvailable"],[72,50,74,48],[72,51,74,49],[72,52,74,50],[73,8,75,6],[73,12,75,10],[73,13,75,11,"isAvailable"],[73,24,75,22],[73,26,75,24],[74,10,76,8,"Alert"],[74,24,76,13],[74,25,76,14,"alert"],[74,30,76,19],[74,31,77,10],[74,55,77,34],[74,57,78,10],[74,127,79,8],[74,128,79,9],[75,10,80,8],[75,17,80,15],[75,22,80,20],[76,8,81,6],[77,8,83,6],[77,14,83,12,"supportedTypes"],[77,28,83,26],[77,31,83,29],[77,37,83,35],[77,41,83,39],[77,42,83,40,"getSupportedTypes"],[77,59,83,57],[77,60,83,58],[77,61,83,59],[78,8,84,6],[78,14,84,12,"typeNames"],[78,23,84,21],[78,26,84,24,"supportedTypes"],[78,40,84,38],[78,41,84,39,"map"],[78,44,84,42],[78,45,84,43,"type"],[78,49,84,47],[78,53,84,51],[78,57,84,55],[78,58,84,56,"getBiometricTypeName"],[78,78,84,76],[78,79,84,77,"type"],[78,83,84,81],[78,84,84,82],[78,85,84,83],[79,8,86,6],[79,14,86,12,"success"],[79,21,86,19],[79,24,86,22],[79,30,86,28],[79,34,86,32],[79,35,86,33,"authenticate"],[79,47,86,45],[79,48,87,8],[79,64,87,24,"typeNames"],[79,73,87,33],[79,74,87,34,"join"],[79,78,87,38],[79,79,87,39],[79,85,87,45],[79,86,87,46],[79,125,87,85],[79,127,88,8],[79,137,89,6],[79,138,89,7],[80,8,91,6],[80,12,91,10,"success"],[80,19,91,17],[80,21,91,19],[81,10,92,8],[82,10,93,8],[82,16,93,14,"SecureStorageService"],[82,45,93,34],[82,46,93,35,"storeBiometricKey"],[82,63,93,52],[82,64,93,53,"masterKey"],[82,73,93,62],[82,74,93,63],[83,10,94,8],[83,16,94,14,"SecureStorageService"],[83,45,94,34],[83,46,94,35,"setBiometricEnabled"],[83,65,94,54],[83,66,94,55],[83,70,94,59],[83,71,94,60],[84,10,95,8],[84,17,95,15],[84,21,95,19],[85,8,96,6],[86,8,98,6],[86,15,98,13],[86,20,98,18],[87,6,99,4],[87,7,99,5],[87,8,99,6],[87,15,99,13,"error"],[87,20,99,18],[87,22,99,20],[88,8,100,6,"console"],[88,15,100,13],[88,16,100,14,"error"],[88,21,100,19],[88,22,100,20],[88,47,100,45],[88,49,100,47,"error"],[88,54,100,52],[88,55,100,53],[89,8,101,6],[89,15,101,13],[89,20,101,18],[90,6,102,4],[91,4,103,2],[93,4,105,2],[94,4,106,2],[94,17,106,15,"biometricLogin"],[94,31,106,29,"biometricLogin"],[94,32,106,29],[94,34,106,56],[95,6,107,4],[95,10,107,8],[96,8,108,6],[96,14,108,12,"isBiometricEnabled"],[96,32,108,30],[96,35,108,33],[96,41,108,39,"SecureStorageService"],[96,70,108,59],[96,71,108,60,"isBiometricEnabled"],[96,89,108,78],[96,90,108,79],[96,91,108,80],[97,8,109,6],[97,12,109,10],[97,13,109,11,"isBiometricEnabled"],[97,31,109,29],[97,33,109,31],[98,10,110,8],[98,17,110,15],[98,21,110,19],[99,8,111,6],[100,8,113,6],[100,14,113,12,"success"],[100,21,113,19],[100,24,113,22],[100,30,113,28],[100,34,113,32],[100,35,113,33,"authenticate"],[100,47,113,45],[100,48,114,8],[100,90,114,50],[100,92,115,8],[100,111,116,6],[100,112,116,7],[101,8,118,6],[101,12,118,10,"success"],[101,19,118,17],[101,21,118,19],[102,10,119,8],[103,10,120,8],[103,16,120,14,"masterKey"],[103,25,120,23],[103,28,120,26],[103,34,120,32,"SecureStorageService"],[103,63,120,52],[103,64,120,53,"getBiometricKey"],[103,79,120,68],[103,80,120,69],[103,81,120,70],[104,10,121,8],[104,17,121,15,"masterKey"],[104,26,121,24],[105,8,122,6],[106,8,124,6],[106,15,124,13],[106,19,124,17],[107,6,125,4],[107,7,125,5],[107,8,125,6],[107,15,125,13,"error"],[107,20,125,18],[107,22,125,20],[108,8,126,6,"console"],[108,15,126,13],[108,16,126,14,"error"],[108,21,126,19],[108,22,126,20],[108,47,126,45],[108,49,126,47,"error"],[108,54,126,52],[108,55,126,53],[109,8,127,6],[109,15,127,13],[109,19,127,17],[110,6,128,4],[111,4,129,2],[113,4,131,2],[114,4,132,2],[114,17,132,15,"biometricPasswordReset"],[114,39,132,37,"biometricPasswordReset"],[114,40,133,4,"email"],[114,45,133,17],[114,47,134,4,"newPassword"],[114,58,134,23],[114,60,135,22],[115,6,136,4],[115,10,136,8],[116,8,137,6],[116,14,137,12,"isBiometricEnabled"],[116,32,137,30],[116,35,137,33],[116,41,137,39,"SecureStorageService"],[116,70,137,59],[116,71,137,60,"isBiometricEnabled"],[116,89,137,78],[116,90,137,79],[116,91,137,80],[117,8,138,6],[117,12,138,10],[117,13,138,11,"isBiometricEnabled"],[117,31,138,29],[117,33,138,31],[118,10,139,8,"Alert"],[118,24,139,13],[118,25,139,14,"alert"],[118,30,139,19],[118,31,140,10],[118,58,140,37],[118,60,141,10],[118,120,142,8],[118,121,142,9],[119,10,143,8],[119,17,143,15],[119,22,143,20],[120,8,144,6],[121,8,146,6],[121,14,146,12,"success"],[121,21,146,19],[121,24,146,22],[121,30,146,28],[121,34,146,32],[121,35,146,33,"authenticate"],[121,47,146,45],[121,48,147,8],[121,103,147,63],[121,105,148,8],[121,115,149,6],[121,116,149,7],[122,8,151,6],[122,12,151,10,"success"],[122,19,151,17],[122,21,151,19],[123,10,152,8],[124,10,153,8],[125,10,154,8,"Alert"],[125,24,154,13],[125,25,154,14,"alert"],[125,30,154,19],[125,31,155,10],[125,49,155,28],[125,51,156,10],[125,97,157,8],[125,98,157,9],[126,10,158,8],[126,17,158,15],[126,21,158,19],[127,8,159,6],[128,8,161,6],[128,15,161,13],[128,20,161,18],[129,6,162,4],[129,7,162,5],[129,8,162,6],[129,15,162,13,"error"],[129,20,162,18],[129,22,162,20],[130,8,163,6,"console"],[130,15,163,13],[130,16,163,14,"error"],[130,21,163,19],[130,22,163,20],[130,56,163,54],[130,58,163,56,"error"],[130,63,163,61],[130,64,163,62],[131,8,164,6],[131,15,164,13],[131,20,164,18],[132,6,165,4],[133,4,166,2],[135,4,168,2],[136,4,169,2],[136,17,169,15,"disableBiometricAuth"],[136,37,169,35,"disableBiometricAuth"],[136,38,169,35],[136,40,169,53],[137,6,170,4],[137,10,170,8],[138,8,171,6],[138,14,171,12,"success"],[138,21,171,19],[138,24,171,22],[138,30,171,28],[138,34,171,32],[138,35,171,33,"authenticate"],[138,47,171,45],[138,48,172,8],[138,98,172,58],[138,100,173,8],[138,110,174,6],[138,111,174,7],[139,8,176,6],[139,12,176,10,"success"],[139,19,176,17],[139,21,176,19],[140,10,177,8],[140,16,177,14,"SecureStorageService"],[140,45,177,34],[140,46,177,35,"setBiometricEnabled"],[140,65,177,54],[140,66,177,55],[140,71,177,60],[140,72,177,61],[141,10,178,8],[142,10,179,8,"Alert"],[142,24,179,13],[142,25,179,14,"alert"],[142,30,179,19],[142,31,179,20],[142,40,179,29],[142,42,179,31],[142,77,179,66],[142,78,179,67],[143,8,180,6],[144,6,181,4],[144,7,181,5],[144,8,181,6],[144,15,181,13,"error"],[144,20,181,18],[144,22,181,20],[145,8,182,6,"console"],[145,15,182,13],[145,16,182,14,"error"],[145,21,182,19],[145,22,182,20],[145,57,182,55],[145,59,182,57,"error"],[145,64,182,62],[145,65,182,63],[146,6,183,4],[147,4,184,2],[148,2,185,0],[149,2,185,1,"exports"],[149,9,185,1],[149,10,185,1,"BiometricsService"],[149,27,185,1],[149,30,185,1,"BiometricsService"],[149,47,185,1],[150,0,185,1],[150,3]],"functionMap":{"names":["<global>","BiometricsService","BiometricsService.isAvailable","BiometricsService.getSupportedTypes","BiometricsService.getBiometricTypeName","BiometricsService.authenticate","BiometricsService.setupBiometricAuth","supportedTypes.map$argument_0","BiometricsService.biometricLogin","BiometricsService.biometricPasswordReset","BiometricsService.disableBiometricAuth"],"mappings":"AAA;OCI;ECE;GDS;EEG;GFO;EGG;GHW;EIG;GJ0B;EKG;2CCY,uCD;GLmB;EOG;GPuB;EQG;GRkC;ESG;GTe"}},"type":"js/module"}]}