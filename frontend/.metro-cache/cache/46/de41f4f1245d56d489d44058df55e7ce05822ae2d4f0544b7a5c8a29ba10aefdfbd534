{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"../utils/storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":56,"index":146}}],"key":"rswhtWQFlk40P6/ZSXiz3NZSC0I=","exportNames":["*"]}},{"name":"../utils/encryption","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":147},"end":{"line":3,"column":56,"index":203}}],"key":"Wlvn+1B4yqF3uisuH0wrMQSpnGk=","exportNames":["*"]}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useAuth = exports.AuthProvider = void 0;\n  var _env2 = require(_dependencyMap[0], \"expo/virtual/env\");\n  var _react = _interopRequireWildcard(require(_dependencyMap[1], \"react\"));\n  var _storage = require(_dependencyMap[2], \"../utils/storage\");\n  var _encryption = require(_dependencyMap[3], \"../utils/encryption\");\n  var _jsxDevRuntime = require(_dependencyMap[4], \"react/jsx-dev-runtime\");\n  var _jsxFileName = \"/app/frontend/contexts/AuthContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  const AuthContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const API_BASE_URL = _env2.env.EXPO_PUBLIC_BACKEND_URL || '';\n  const AuthProvider = ({\n    children\n  }) => {\n    _s();\n    const [user, setUser] = (0, _react.useState)(null);\n    const [isLoading, setIsLoading] = (0, _react.useState)(true);\n    const [isFirstTime, setIsFirstTime] = (0, _react.useState)(false);\n    const [masterKey, setMasterKeyState] = (0, _react.useState)(null);\n    (0, _react.useEffect)(() => {\n      initializeAuth();\n    }, []);\n    const initializeAuth = async () => {\n      try {\n        // Check if user has been through onboarding\n        const userData = await _storage.SecureStorageService.getUserData();\n        const token = await _storage.SecureStorageService.getAccessToken();\n        if (!userData) {\n          setIsFirstTime(true);\n          setIsLoading(false);\n          return;\n        }\n        if (token && userData) {\n          // Validate token with backend\n          const response = await fetch(`${API_BASE_URL}/api/user/profile`, {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          if (response.ok) {\n            const userProfile = await response.json();\n            setUser(userProfile);\n\n            // Try to restore master key\n            const storedKey = await _storage.SecureStorageService.getMasterKey();\n            if (storedKey) {\n              setMasterKeyState(storedKey);\n            }\n          } else {\n            // Token invalid, clear stored data\n            await _storage.SecureStorageService.clearAllData();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const register = async (email, password, biometricEnabled) => {\n      try {\n        setIsLoading(true);\n\n        // Generate salt for this user\n        const salt = _encryption.EncryptionService.generateSalt();\n\n        // Hash master password for server storage\n        const masterPasswordHash = await _encryption.EncryptionService.hashMasterPassword(password, salt);\n\n        // Derive encryption key for client-side encryption\n        const encryptionKey = await _encryption.EncryptionService.deriveKey(password, salt);\n        const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            master_password_hash: masterPasswordHash,\n            biometric_enabled: biometricEnabled\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.detail || 'Registration failed');\n        }\n        const data = await response.json();\n\n        // Store user data and tokens\n        await _storage.SecureStorageService.storeAccessToken(data.access_token);\n        await _storage.SecureStorageService.storeUserData(data.user);\n        await _storage.SecureStorageService.storeUserSalt(salt);\n        await _storage.SecureStorageService.storeMasterKey(encryptionKey);\n        await _storage.SecureStorageService.setBiometricEnabled(biometricEnabled);\n\n        // If biometric enabled, store recovery key\n        if (biometricEnabled) {\n          await _storage.SecureStorageService.storeBiometricKey(encryptionKey);\n        }\n        setUser(data.user);\n        setMasterKeyState(encryptionKey);\n        setIsFirstTime(false);\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const login = async (email, password) => {\n      try {\n        setIsLoading(true);\n\n        // Get stored salt\n        const salt = await _storage.SecureStorageService.getUserSalt();\n        if (!salt) {\n          throw new Error('User salt not found. Please register again.');\n        }\n\n        // Hash password for server verification\n        const masterPasswordHash = await _encryption.EncryptionService.hashMasterPassword(password, salt);\n\n        // Derive encryption key\n        const encryptionKey = await _encryption.EncryptionService.deriveKey(password, salt);\n        const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            master_password_hash: masterPasswordHash\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.detail || 'Login failed');\n        }\n        const data = await response.json();\n\n        // Store user data and tokens\n        await _storage.SecureStorageService.storeAccessToken(data.access_token);\n        await _storage.SecureStorageService.storeUserData(data.user);\n        await _storage.SecureStorageService.storeMasterKey(encryptionKey);\n        setUser(data.user);\n        setMasterKeyState(encryptionKey);\n      } catch (error) {\n        console.error('Login error:', error);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const logout = async () => {\n      try {\n        await _storage.SecureStorageService.clearAllData();\n        setUser(null);\n        setMasterKeyState(null);\n      } catch (error) {\n        console.error('Logout error:', error);\n      }\n    };\n    const setMasterKey = key => {\n      setMasterKeyState(key);\n    };\n    const setBiometricRecovery = async enabled => {\n      try {\n        if (enabled && masterKey) {\n          await _storage.SecureStorageService.storeBiometricKey(masterKey);\n        }\n        await _storage.SecureStorageService.setBiometricEnabled(enabled);\n        if (user) {\n          setUser(Object.assign({}, user, {\n            biometric_enabled: enabled\n          }));\n        }\n      } catch (error) {\n        console.error('Biometric setup error:', error);\n        throw error;\n      }\n    };\n    const value = {\n      user,\n      isLoading,\n      isFirstTime,\n      masterKey,\n      login,\n      register,\n      logout,\n      setMasterKey,\n      setBiometricRecovery\n    };\n    return /*#__PURE__*/(0, _jsxDevRuntime.jsxDEV)(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 10\n    }, this);\n  };\n  exports.AuthProvider = AuthProvider;\n  _s(AuthProvider, \"mGwwgojCgQ3U20j04pMnc9audNY=\");\n  _c = AuthProvider;\n  const useAuth = () => {\n    _s2();\n    const context = (0, _react.useContext)(AuthContext);\n    if (context === undefined) {\n      throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n  };\n  exports.useAuth = useAuth;\n  _s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  var _c;\n  $RefreshReg$(_c, \"AuthProvider\");\n});","lineCount":223,"map":[[7,2,1,0],[7,6,1,0,"_react"],[7,12,1,0],[7,15,1,0,"_interopRequireWildcard"],[7,38,1,0],[7,39,1,0,"require"],[7,46,1,0],[7,47,1,0,"_dependencyMap"],[7,61,1,0],[8,2,2,0],[8,6,2,0,"_storage"],[8,14,2,0],[8,17,2,0,"require"],[8,24,2,0],[8,25,2,0,"_dependencyMap"],[8,39,2,0],[9,2,3,0],[9,6,3,0,"_encryption"],[9,17,3,0],[9,20,3,0,"require"],[9,27,3,0],[9,28,3,0,"_dependencyMap"],[9,42,3,0],[10,2,3,56],[10,6,3,56,"_jsxDevRuntime"],[10,20,3,56],[10,23,3,56,"require"],[10,30,3,56],[10,31,3,56,"_dependencyMap"],[10,45,3,56],[11,2,3,56],[11,6,3,56,"_jsxFileName"],[11,18,3,56],[12,4,3,56,"_s"],[12,6,3,56],[12,9,3,56,"$RefreshSig$"],[12,21,3,56],[13,4,3,56,"_s2"],[13,7,3,56],[13,10,3,56,"$RefreshSig$"],[13,22,3,56],[14,2,3,56],[14,11,3,56,"_interopRequireWildcard"],[14,35,3,56,"e"],[14,36,3,56],[14,38,3,56,"t"],[14,39,3,56],[14,68,3,56,"WeakMap"],[14,75,3,56],[14,81,3,56,"r"],[14,82,3,56],[14,89,3,56,"WeakMap"],[14,96,3,56],[14,100,3,56,"n"],[14,101,3,56],[14,108,3,56,"WeakMap"],[14,115,3,56],[14,127,3,56,"_interopRequireWildcard"],[14,150,3,56],[14,162,3,56,"_interopRequireWildcard"],[14,163,3,56,"e"],[14,164,3,56],[14,166,3,56,"t"],[14,167,3,56],[14,176,3,56,"t"],[14,177,3,56],[14,181,3,56,"e"],[14,182,3,56],[14,186,3,56,"e"],[14,187,3,56],[14,188,3,56,"__esModule"],[14,198,3,56],[14,207,3,56,"e"],[14,208,3,56],[14,214,3,56,"o"],[14,215,3,56],[14,217,3,56,"i"],[14,218,3,56],[14,220,3,56,"f"],[14,221,3,56],[14,226,3,56,"__proto__"],[14,235,3,56],[14,243,3,56,"default"],[14,250,3,56],[14,252,3,56,"e"],[14,253,3,56],[14,270,3,56,"e"],[14,271,3,56],[14,294,3,56,"e"],[14,295,3,56],[14,320,3,56,"e"],[14,321,3,56],[14,330,3,56,"f"],[14,331,3,56],[14,337,3,56,"o"],[14,338,3,56],[14,341,3,56,"t"],[14,342,3,56],[14,345,3,56,"n"],[14,346,3,56],[14,349,3,56,"r"],[14,350,3,56],[14,358,3,56,"o"],[14,359,3,56],[14,360,3,56,"has"],[14,363,3,56],[14,364,3,56,"e"],[14,365,3,56],[14,375,3,56,"o"],[14,376,3,56],[14,377,3,56,"get"],[14,380,3,56],[14,381,3,56,"e"],[14,382,3,56],[14,385,3,56,"o"],[14,386,3,56],[14,387,3,56,"set"],[14,390,3,56],[14,391,3,56,"e"],[14,392,3,56],[14,394,3,56,"f"],[14,395,3,56],[14,411,3,56,"t"],[14,412,3,56],[14,416,3,56,"e"],[14,417,3,56],[14,433,3,56,"t"],[14,434,3,56],[14,441,3,56,"hasOwnProperty"],[14,455,3,56],[14,456,3,56,"call"],[14,460,3,56],[14,461,3,56,"e"],[14,462,3,56],[14,464,3,56,"t"],[14,465,3,56],[14,472,3,56,"i"],[14,473,3,56],[14,477,3,56,"o"],[14,478,3,56],[14,481,3,56,"Object"],[14,487,3,56],[14,488,3,56,"defineProperty"],[14,502,3,56],[14,507,3,56,"Object"],[14,513,3,56],[14,514,3,56,"getOwnPropertyDescriptor"],[14,538,3,56],[14,539,3,56,"e"],[14,540,3,56],[14,542,3,56,"t"],[14,543,3,56],[14,550,3,56,"i"],[14,551,3,56],[14,552,3,56,"get"],[14,555,3,56],[14,559,3,56,"i"],[14,560,3,56],[14,561,3,56,"set"],[14,564,3,56],[14,568,3,56,"o"],[14,569,3,56],[14,570,3,56,"f"],[14,571,3,56],[14,573,3,56,"t"],[14,574,3,56],[14,576,3,56,"i"],[14,577,3,56],[14,581,3,56,"f"],[14,582,3,56],[14,583,3,56,"t"],[14,584,3,56],[14,588,3,56,"e"],[14,589,3,56],[14,590,3,56,"t"],[14,591,3,56],[14,602,3,56,"f"],[14,603,3,56],[14,608,3,56,"e"],[14,609,3,56],[14,611,3,56,"t"],[14,612,3,56],[15,2,26,0],[15,8,26,6,"AuthContext"],[15,19,26,17],[15,35,26,20],[15,39,26,20,"createContext"],[15,59,26,33],[15,61,26,63,"undefined"],[15,70,26,72],[15,71,26,73],[16,2,32,0],[16,8,32,6,"API_BASE_URL"],[16,20,32,18],[16,23,32,21,"_env2"],[16,28,32,21],[16,29,32,21,"env"],[16,32,32,21],[16,33,32,21,"EXPO_PUBLIC_BACKEND_URL"],[16,56,32,21],[16,60,32,60],[16,62,32,62],[17,2,34,7],[17,8,34,13,"AuthProvider"],[17,20,34,54],[17,23,34,57,"AuthProvider"],[17,24,34,58],[18,4,34,60,"children"],[19,2,34,69],[19,3,34,70],[19,8,34,75],[20,4,34,75,"_s"],[20,6,34,75],[21,4,35,2],[21,10,35,8],[21,11,35,9,"user"],[21,15,35,13],[21,17,35,15,"setUser"],[21,24,35,22],[21,25,35,23],[21,28,35,26],[21,32,35,26,"useState"],[21,47,35,34],[21,49,35,48],[21,53,35,52],[21,54,35,53],[22,4,36,2],[22,10,36,8],[22,11,36,9,"isLoading"],[22,20,36,18],[22,22,36,20,"setIsLoading"],[22,34,36,32],[22,35,36,33],[22,38,36,36],[22,42,36,36,"useState"],[22,57,36,44],[22,59,36,45],[22,63,36,49],[22,64,36,50],[23,4,37,2],[23,10,37,8],[23,11,37,9,"isFirstTime"],[23,22,37,20],[23,24,37,22,"setIsFirstTime"],[23,38,37,36],[23,39,37,37],[23,42,37,40],[23,46,37,40,"useState"],[23,61,37,48],[23,63,37,49],[23,68,37,54],[23,69,37,55],[24,4,38,2],[24,10,38,8],[24,11,38,9,"masterKey"],[24,20,38,18],[24,22,38,20,"setMasterKeyState"],[24,39,38,37],[24,40,38,38],[24,43,38,41],[24,47,38,41,"useState"],[24,62,38,49],[24,64,38,65],[24,68,38,69],[24,69,38,70],[25,4,40,2],[25,8,40,2,"useEffect"],[25,24,40,11],[25,26,40,12],[25,32,40,18],[26,6,41,4,"initializeAuth"],[26,20,41,18],[26,21,41,19],[26,22,41,20],[27,4,42,2],[27,5,42,3],[27,7,42,5],[27,9,42,7],[27,10,42,8],[28,4,44,2],[28,10,44,8,"initializeAuth"],[28,24,44,22],[28,27,44,25],[28,33,44,25,"initializeAuth"],[28,34,44,25],[28,39,44,37],[29,6,45,4],[29,10,45,8],[30,8,46,6],[31,8,47,6],[31,14,47,12,"userData"],[31,22,47,20],[31,25,47,23],[31,31,47,29,"SecureStorageService"],[31,60,47,49],[31,61,47,50,"getUserData"],[31,72,47,61],[31,73,47,62],[31,74,47,63],[32,8,48,6],[32,14,48,12,"token"],[32,19,48,17],[32,22,48,20],[32,28,48,26,"SecureStorageService"],[32,57,48,46],[32,58,48,47,"getAccessToken"],[32,72,48,61],[32,73,48,62],[32,74,48,63],[33,8,50,6],[33,12,50,10],[33,13,50,11,"userData"],[33,21,50,19],[33,23,50,21],[34,10,51,8,"setIsFirstTime"],[34,24,51,22],[34,25,51,23],[34,29,51,27],[34,30,51,28],[35,10,52,8,"setIsLoading"],[35,22,52,20],[35,23,52,21],[35,28,52,26],[35,29,52,27],[36,10,53,8],[37,8,54,6],[38,8,56,6],[38,12,56,10,"token"],[38,17,56,15],[38,21,56,19,"userData"],[38,29,56,27],[38,31,56,29],[39,10,57,8],[40,10,58,8],[40,16,58,14,"response"],[40,24,58,22],[40,27,58,25],[40,33,58,31,"fetch"],[40,38,58,36],[40,39,58,37],[40,42,58,40,"API_BASE_URL"],[40,54,58,52],[40,73,58,71],[40,75,58,73],[41,12,59,10,"headers"],[41,19,59,17],[41,21,59,19],[42,14,60,12],[42,29,60,27],[42,31,60,29],[42,41,60,39,"token"],[42,46,60,44],[42,48,60,46],[43,14,61,12],[43,28,61,26],[43,30,61,28],[44,12,62,10],[45,10,63,8],[45,11,63,9],[45,12,63,10],[46,10,65,8],[46,14,65,12,"response"],[46,22,65,20],[46,23,65,21,"ok"],[46,25,65,23],[46,27,65,25],[47,12,66,10],[47,18,66,16,"userProfile"],[47,29,66,27],[47,32,66,30],[47,38,66,36,"response"],[47,46,66,44],[47,47,66,45,"json"],[47,51,66,49],[47,52,66,50],[47,53,66,51],[48,12,67,10,"setUser"],[48,19,67,17],[48,20,67,18,"userProfile"],[48,31,67,29],[48,32,67,30],[50,12,69,10],[51,12,70,10],[51,18,70,16,"storedKey"],[51,27,70,25],[51,30,70,28],[51,36,70,34,"SecureStorageService"],[51,65,70,54],[51,66,70,55,"getMasterKey"],[51,78,70,67],[51,79,70,68],[51,80,70,69],[52,12,71,10],[52,16,71,14,"storedKey"],[52,25,71,23],[52,27,71,25],[53,14,72,12,"setMasterKeyState"],[53,31,72,29],[53,32,72,30,"storedKey"],[53,41,72,39],[53,42,72,40],[54,12,73,10],[55,10,74,8],[55,11,74,9],[55,17,74,15],[56,12,75,10],[57,12,76,10],[57,18,76,16,"SecureStorageService"],[57,47,76,36],[57,48,76,37,"clearAllData"],[57,60,76,49],[57,61,76,50],[57,62,76,51],[58,10,77,8],[59,8,78,6],[60,6,79,4],[60,7,79,5],[60,8,79,6],[60,15,79,13,"error"],[60,20,79,18],[60,22,79,20],[61,8,80,6,"console"],[61,15,80,13],[61,16,80,14,"error"],[61,21,80,19],[61,22,80,20],[61,50,80,48],[61,52,80,50,"error"],[61,57,80,55],[61,58,80,56],[62,6,81,4],[62,7,81,5],[62,16,81,14],[63,8,82,6,"setIsLoading"],[63,20,82,18],[63,21,82,19],[63,26,82,24],[63,27,82,25],[64,6,83,4],[65,4,84,2],[65,5,84,3],[66,4,86,2],[66,10,86,8,"register"],[66,18,86,16],[66,21,86,19],[66,27,86,19,"register"],[66,28,87,4,"email"],[66,33,87,17],[66,35,88,4,"password"],[66,43,88,20],[66,45,89,4,"biometricEnabled"],[66,61,89,29],[66,66,90,22],[67,6,91,4],[67,10,91,8],[68,8,92,6,"setIsLoading"],[68,20,92,18],[68,21,92,19],[68,25,92,23],[68,26,92,24],[70,8,94,6],[71,8,95,6],[71,14,95,12,"salt"],[71,18,95,16],[71,21,95,19,"EncryptionService"],[71,50,95,36],[71,51,95,37,"generateSalt"],[71,63,95,49],[71,64,95,50],[71,65,95,51],[73,8,97,6],[74,8,98,6],[74,14,98,12,"masterPasswordHash"],[74,32,98,30],[74,35,98,33],[74,41,98,39,"EncryptionService"],[74,70,98,56],[74,71,98,57,"hashMasterPassword"],[74,89,98,75],[74,90,98,76,"password"],[74,98,98,84],[74,100,98,86,"salt"],[74,104,98,90],[74,105,98,91],[76,8,100,6],[77,8,101,6],[77,14,101,12,"encryptionKey"],[77,27,101,25],[77,30,101,28],[77,36,101,34,"EncryptionService"],[77,65,101,51],[77,66,101,52,"deriveKey"],[77,75,101,61],[77,76,101,62,"password"],[77,84,101,70],[77,86,101,72,"salt"],[77,90,101,76],[77,91,101,77],[78,8,103,6],[78,14,103,12,"response"],[78,22,103,20],[78,25,103,23],[78,31,103,29,"fetch"],[78,36,103,34],[78,37,103,35],[78,40,103,38,"API_BASE_URL"],[78,52,103,50],[78,72,103,70],[78,74,103,72],[79,10,104,8,"method"],[79,16,104,14],[79,18,104,16],[79,24,104,22],[80,10,105,8,"headers"],[80,17,105,15],[80,19,105,17],[81,12,106,10],[81,26,106,24],[81,28,106,26],[82,10,107,8],[82,11,107,9],[83,10,108,8,"body"],[83,14,108,12],[83,16,108,14,"JSON"],[83,20,108,18],[83,21,108,19,"stringify"],[83,30,108,28],[83,31,108,29],[84,12,109,10,"email"],[84,17,109,15],[85,12,110,10,"master_password_hash"],[85,32,110,30],[85,34,110,32,"masterPasswordHash"],[85,52,110,50],[86,12,111,10,"biometric_enabled"],[86,29,111,27],[86,31,111,29,"biometricEnabled"],[87,10,112,8],[87,11,112,9],[88,8,113,6],[88,9,113,7],[88,10,113,8],[89,8,115,6],[89,12,115,10],[89,13,115,11,"response"],[89,21,115,19],[89,22,115,20,"ok"],[89,24,115,22],[89,26,115,24],[90,10,116,8],[90,16,116,14,"error"],[90,21,116,19],[90,24,116,22],[90,30,116,28,"response"],[90,38,116,36],[90,39,116,37,"json"],[90,43,116,41],[90,44,116,42],[90,45,116,43],[91,10,117,8],[91,16,117,14],[91,20,117,18,"Error"],[91,25,117,23],[91,26,117,24,"error"],[91,31,117,29],[91,32,117,30,"detail"],[91,38,117,36],[91,42,117,40],[91,63,117,61],[91,64,117,62],[92,8,118,6],[93,8,120,6],[93,14,120,12,"data"],[93,18,120,16],[93,21,120,19],[93,27,120,25,"response"],[93,35,120,33],[93,36,120,34,"json"],[93,40,120,38],[93,41,120,39],[93,42,120,40],[95,8,122,6],[96,8,123,6],[96,14,123,12,"SecureStorageService"],[96,43,123,32],[96,44,123,33,"storeAccessToken"],[96,60,123,49],[96,61,123,50,"data"],[96,65,123,54],[96,66,123,55,"access_token"],[96,78,123,67],[96,79,123,68],[97,8,124,6],[97,14,124,12,"SecureStorageService"],[97,43,124,32],[97,44,124,33,"storeUserData"],[97,57,124,46],[97,58,124,47,"data"],[97,62,124,51],[97,63,124,52,"user"],[97,67,124,56],[97,68,124,57],[98,8,125,6],[98,14,125,12,"SecureStorageService"],[98,43,125,32],[98,44,125,33,"storeUserSalt"],[98,57,125,46],[98,58,125,47,"salt"],[98,62,125,51],[98,63,125,52],[99,8,126,6],[99,14,126,12,"SecureStorageService"],[99,43,126,32],[99,44,126,33,"storeMasterKey"],[99,58,126,47],[99,59,126,48,"encryptionKey"],[99,72,126,61],[99,73,126,62],[100,8,127,6],[100,14,127,12,"SecureStorageService"],[100,43,127,32],[100,44,127,33,"setBiometricEnabled"],[100,63,127,52],[100,64,127,53,"biometricEnabled"],[100,80,127,69],[100,81,127,70],[102,8,129,6],[103,8,130,6],[103,12,130,10,"biometricEnabled"],[103,28,130,26],[103,30,130,28],[104,10,131,8],[104,16,131,14,"SecureStorageService"],[104,45,131,34],[104,46,131,35,"storeBiometricKey"],[104,63,131,52],[104,64,131,53,"encryptionKey"],[104,77,131,66],[104,78,131,67],[105,8,132,6],[106,8,134,6,"setUser"],[106,15,134,13],[106,16,134,14,"data"],[106,20,134,18],[106,21,134,19,"user"],[106,25,134,23],[106,26,134,24],[107,8,135,6,"setMasterKeyState"],[107,25,135,23],[107,26,135,24,"encryptionKey"],[107,39,135,37],[107,40,135,38],[108,8,136,6,"setIsFirstTime"],[108,22,136,20],[108,23,136,21],[108,28,136,26],[108,29,136,27],[109,6,137,4],[109,7,137,5],[109,8,137,6],[109,15,137,13,"error"],[109,20,137,18],[109,22,137,20],[110,8,138,6,"console"],[110,15,138,13],[110,16,138,14,"error"],[110,21,138,19],[110,22,138,20],[110,43,138,41],[110,45,138,43,"error"],[110,50,138,48],[110,51,138,49],[111,8,139,6],[111,14,139,12,"error"],[111,19,139,17],[112,6,140,4],[112,7,140,5],[112,16,140,14],[113,8,141,6,"setIsLoading"],[113,20,141,18],[113,21,141,19],[113,26,141,24],[113,27,141,25],[114,6,142,4],[115,4,143,2],[115,5,143,3],[116,4,145,2],[116,10,145,8,"login"],[116,15,145,13],[116,18,145,16],[116,24,145,16,"login"],[116,25,145,23,"email"],[116,30,145,36],[116,32,145,38,"password"],[116,40,145,54],[116,45,145,74],[117,6,146,4],[117,10,146,8],[118,8,147,6,"setIsLoading"],[118,20,147,18],[118,21,147,19],[118,25,147,23],[118,26,147,24],[120,8,149,6],[121,8,150,6],[121,14,150,12,"salt"],[121,18,150,16],[121,21,150,19],[121,27,150,25,"SecureStorageService"],[121,56,150,45],[121,57,150,46,"getUserSalt"],[121,68,150,57],[121,69,150,58],[121,70,150,59],[122,8,151,6],[122,12,151,10],[122,13,151,11,"salt"],[122,17,151,15],[122,19,151,17],[123,10,152,8],[123,16,152,14],[123,20,152,18,"Error"],[123,25,152,23],[123,26,152,24],[123,71,152,69],[123,72,152,70],[124,8,153,6],[126,8,155,6],[127,8,156,6],[127,14,156,12,"masterPasswordHash"],[127,32,156,30],[127,35,156,33],[127,41,156,39,"EncryptionService"],[127,70,156,56],[127,71,156,57,"hashMasterPassword"],[127,89,156,75],[127,90,156,76,"password"],[127,98,156,84],[127,100,156,86,"salt"],[127,104,156,90],[127,105,156,91],[129,8,158,6],[130,8,159,6],[130,14,159,12,"encryptionKey"],[130,27,159,25],[130,30,159,28],[130,36,159,34,"EncryptionService"],[130,65,159,51],[130,66,159,52,"deriveKey"],[130,75,159,61],[130,76,159,62,"password"],[130,84,159,70],[130,86,159,72,"salt"],[130,90,159,76],[130,91,159,77],[131,8,161,6],[131,14,161,12,"response"],[131,22,161,20],[131,25,161,23],[131,31,161,29,"fetch"],[131,36,161,34],[131,37,161,35],[131,40,161,38,"API_BASE_URL"],[131,52,161,50],[131,69,161,67],[131,71,161,69],[132,10,162,8,"method"],[132,16,162,14],[132,18,162,16],[132,24,162,22],[133,10,163,8,"headers"],[133,17,163,15],[133,19,163,17],[134,12,164,10],[134,26,164,24],[134,28,164,26],[135,10,165,8],[135,11,165,9],[136,10,166,8,"body"],[136,14,166,12],[136,16,166,14,"JSON"],[136,20,166,18],[136,21,166,19,"stringify"],[136,30,166,28],[136,31,166,29],[137,12,167,10,"email"],[137,17,167,15],[138,12,168,10,"master_password_hash"],[138,32,168,30],[138,34,168,32,"masterPasswordHash"],[139,10,169,8],[139,11,169,9],[140,8,170,6],[140,9,170,7],[140,10,170,8],[141,8,172,6],[141,12,172,10],[141,13,172,11,"response"],[141,21,172,19],[141,22,172,20,"ok"],[141,24,172,22],[141,26,172,24],[142,10,173,8],[142,16,173,14,"error"],[142,21,173,19],[142,24,173,22],[142,30,173,28,"response"],[142,38,173,36],[142,39,173,37,"json"],[142,43,173,41],[142,44,173,42],[142,45,173,43],[143,10,174,8],[143,16,174,14],[143,20,174,18,"Error"],[143,25,174,23],[143,26,174,24,"error"],[143,31,174,29],[143,32,174,30,"detail"],[143,38,174,36],[143,42,174,40],[143,56,174,54],[143,57,174,55],[144,8,175,6],[145,8,177,6],[145,14,177,12,"data"],[145,18,177,16],[145,21,177,19],[145,27,177,25,"response"],[145,35,177,33],[145,36,177,34,"json"],[145,40,177,38],[145,41,177,39],[145,42,177,40],[147,8,179,6],[148,8,180,6],[148,14,180,12,"SecureStorageService"],[148,43,180,32],[148,44,180,33,"storeAccessToken"],[148,60,180,49],[148,61,180,50,"data"],[148,65,180,54],[148,66,180,55,"access_token"],[148,78,180,67],[148,79,180,68],[149,8,181,6],[149,14,181,12,"SecureStorageService"],[149,43,181,32],[149,44,181,33,"storeUserData"],[149,57,181,46],[149,58,181,47,"data"],[149,62,181,51],[149,63,181,52,"user"],[149,67,181,56],[149,68,181,57],[150,8,182,6],[150,14,182,12,"SecureStorageService"],[150,43,182,32],[150,44,182,33,"storeMasterKey"],[150,58,182,47],[150,59,182,48,"encryptionKey"],[150,72,182,61],[150,73,182,62],[151,8,184,6,"setUser"],[151,15,184,13],[151,16,184,14,"data"],[151,20,184,18],[151,21,184,19,"user"],[151,25,184,23],[151,26,184,24],[152,8,185,6,"setMasterKeyState"],[152,25,185,23],[152,26,185,24,"encryptionKey"],[152,39,185,37],[152,40,185,38],[153,6,186,4],[153,7,186,5],[153,8,186,6],[153,15,186,13,"error"],[153,20,186,18],[153,22,186,20],[154,8,187,6,"console"],[154,15,187,13],[154,16,187,14,"error"],[154,21,187,19],[154,22,187,20],[154,36,187,34],[154,38,187,36,"error"],[154,43,187,41],[154,44,187,42],[155,8,188,6],[155,14,188,12,"error"],[155,19,188,17],[156,6,189,4],[156,7,189,5],[156,16,189,14],[157,8,190,6,"setIsLoading"],[157,20,190,18],[157,21,190,19],[157,26,190,24],[157,27,190,25],[158,6,191,4],[159,4,192,2],[159,5,192,3],[160,4,194,2],[160,10,194,8,"logout"],[160,16,194,14],[160,19,194,17],[160,25,194,17,"logout"],[160,26,194,17],[160,31,194,44],[161,6,195,4],[161,10,195,8],[162,8,196,6],[162,14,196,12,"SecureStorageService"],[162,43,196,32],[162,44,196,33,"clearAllData"],[162,56,196,45],[162,57,196,46],[162,58,196,47],[163,8,197,6,"setUser"],[163,15,197,13],[163,16,197,14],[163,20,197,18],[163,21,197,19],[164,8,198,6,"setMasterKeyState"],[164,25,198,23],[164,26,198,24],[164,30,198,28],[164,31,198,29],[165,6,199,4],[165,7,199,5],[165,8,199,6],[165,15,199,13,"error"],[165,20,199,18],[165,22,199,20],[166,8,200,6,"console"],[166,15,200,13],[166,16,200,14,"error"],[166,21,200,19],[166,22,200,20],[166,37,200,35],[166,39,200,37,"error"],[166,44,200,42],[166,45,200,43],[167,6,201,4],[168,4,202,2],[168,5,202,3],[169,4,204,2],[169,10,204,8,"setMasterKey"],[169,22,204,20],[169,25,204,24,"key"],[169,28,204,35],[169,32,204,40],[170,6,205,4,"setMasterKeyState"],[170,23,205,21],[170,24,205,22,"key"],[170,27,205,25],[170,28,205,26],[171,4,206,2],[171,5,206,3],[172,4,208,2],[172,10,208,8,"setBiometricRecovery"],[172,30,208,28],[172,33,208,31],[172,39,208,38,"enabled"],[172,46,208,54],[172,50,208,74],[173,6,209,4],[173,10,209,8],[174,8,210,6],[174,12,210,10,"enabled"],[174,19,210,17],[174,23,210,21,"masterKey"],[174,32,210,30],[174,34,210,32],[175,10,211,8],[175,16,211,14,"SecureStorageService"],[175,45,211,34],[175,46,211,35,"storeBiometricKey"],[175,63,211,52],[175,64,211,53,"masterKey"],[175,73,211,62],[175,74,211,63],[176,8,212,6],[177,8,213,6],[177,14,213,12,"SecureStorageService"],[177,43,213,32],[177,44,213,33,"setBiometricEnabled"],[177,63,213,52],[177,64,213,53,"enabled"],[177,71,213,60],[177,72,213,61],[178,8,215,6],[178,12,215,10,"user"],[178,16,215,14],[178,18,215,16],[179,10,216,8,"setUser"],[179,17,216,15],[179,18,216,15,"Object"],[179,24,216,15],[179,25,216,15,"assign"],[179,31,216,15],[179,36,216,21,"user"],[179,40,216,25],[180,12,216,27,"biometric_enabled"],[180,29,216,44],[180,31,216,46,"enabled"],[181,10,216,53],[181,12,216,55],[181,13,216,56],[182,8,217,6],[183,6,218,4],[183,7,218,5],[183,8,218,6],[183,15,218,13,"error"],[183,20,218,18],[183,22,218,20],[184,8,219,6,"console"],[184,15,219,13],[184,16,219,14,"error"],[184,21,219,19],[184,22,219,20],[184,46,219,44],[184,48,219,46,"error"],[184,53,219,51],[184,54,219,52],[185,8,220,6],[185,14,220,12,"error"],[185,19,220,17],[186,6,221,4],[187,4,222,2],[187,5,222,3],[188,4,224,2],[188,10,224,8,"value"],[188,15,224,30],[188,18,224,33],[189,6,225,4,"user"],[189,10,225,8],[190,6,226,4,"isLoading"],[190,15,226,13],[191,6,227,4,"isFirstTime"],[191,17,227,15],[192,6,228,4,"masterKey"],[192,15,228,13],[193,6,229,4,"login"],[193,11,229,9],[194,6,230,4,"register"],[194,14,230,12],[195,6,231,4,"logout"],[195,12,231,10],[196,6,232,4,"setMasterKey"],[196,18,232,16],[197,6,233,4,"setBiometricRecovery"],[198,4,234,2],[198,5,234,3],[199,4,236,2],[199,24,236,9],[199,28,236,9,"_jsxDevRuntime"],[199,42,236,9],[199,43,236,9,"jsxDEV"],[199,49,236,9],[199,51,236,10,"AuthContext"],[199,62,236,21],[199,63,236,22,"Provider"],[199,71,236,30],[200,6,236,31,"value"],[200,11,236,36],[200,13,236,38,"value"],[200,18,236,44],[201,6,236,44,"children"],[201,14,236,44],[201,16,236,46,"children"],[202,4,236,54],[203,6,236,54,"fileName"],[203,14,236,54],[203,16,236,54,"_jsxFileName"],[203,28,236,54],[204,6,236,54,"lineNumber"],[204,16,236,54],[205,6,236,54,"columnNumber"],[205,18,236,54],[206,4,236,54],[206,11,236,77],[206,12,236,78],[207,2,237,0],[207,3,237,1],[208,2,237,2,"exports"],[208,9,237,2],[208,10,237,2,"AuthProvider"],[208,22,237,2],[208,25,237,2,"AuthProvider"],[208,37,237,2],[209,2,237,2,"_s"],[209,4,237,2],[209,5,34,13,"AuthProvider"],[209,17,34,54],[210,2,34,54,"_c"],[210,4,34,54],[210,7,34,13,"AuthProvider"],[210,19,34,54],[211,2,239,7],[211,8,239,13,"useAuth"],[211,15,239,20],[211,18,239,23,"useAuth"],[211,19,239,23],[211,24,239,46],[212,4,239,46,"_s2"],[212,7,239,46],[213,4,240,2],[213,10,240,8,"context"],[213,17,240,15],[213,20,240,18],[213,24,240,18,"useContext"],[213,41,240,28],[213,43,240,29,"AuthContext"],[213,54,240,40],[213,55,240,41],[214,4,241,2],[214,8,241,6,"context"],[214,15,241,13],[214,20,241,18,"undefined"],[214,29,241,27],[214,31,241,29],[215,6,242,4],[215,12,242,10],[215,16,242,14,"Error"],[215,21,242,19],[215,22,242,20],[215,67,242,65],[215,68,242,66],[216,4,243,2],[217,4,244,2],[217,11,244,9,"context"],[217,18,244,16],[218,2,245,0],[218,3,245,1],[219,2,245,2,"exports"],[219,9,245,2],[219,10,245,2,"useAuth"],[219,17,245,2],[219,20,245,2,"useAuth"],[219,27,245,2],[220,2,245,2,"_s2"],[220,5,245,2],[220,6,239,13,"useAuth"],[220,13,239,20],[221,2,239,20],[221,6,239,20,"_c"],[221,8,239,20],[222,2,239,20,"$RefreshReg$"],[222,14,239,20],[222,15,239,20,"_c"],[222,17,239,20],[223,0,239,20],[223,3]],"functionMap":{"names":["<global>","AuthProvider","useEffect$argument_0","initializeAuth","register","login","logout","setMasterKey","setBiometricRecovery","useAuth"],"mappings":"AAA;yDCiC;YCM;GDE;yBEE;GFwC;mBGE;GHyD;gBIE;GJ+C;iBKE;GLQ;uBME;GNE;+BOE;GPc;CDe;uBSE;CTM"}},"type":"js/module"}]}