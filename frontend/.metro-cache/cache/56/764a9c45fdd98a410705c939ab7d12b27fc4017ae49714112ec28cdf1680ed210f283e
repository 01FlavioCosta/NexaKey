{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"crypto-js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"TLjsXnAWOlf/gpObabse3HZX8VY=","exportNames":["*"]}},{"name":"bcryptjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":30,"index":64}}],"key":"RrVAj5NITFKrtYKjtF9q+h3YF4s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.EncryptionService = void 0;\n  var _cryptoJs = _interopRequireDefault(require(_dependencyMap[1], \"crypto-js\"));\n  var _bcryptjs = _interopRequireDefault(require(_dependencyMap[2], \"bcryptjs\"));\n  class EncryptionService {\n    // Generate a key from master password using PBKDF2 (web-compatible alternative to Argon2)\n    static async deriveKey(masterPassword, salt) {\n      try {\n        // Use PBKDF2 with high iteration count for key derivation\n        const key = _cryptoJs.default.PBKDF2(masterPassword, salt, {\n          keySize: 256 / 32,\n          iterations: 100000\n        });\n        return key.toString();\n      } catch (error) {\n        console.error('Key derivation failed:', error);\n        throw new Error('Failed to derive encryption key');\n      }\n    }\n\n    // Generate a random salt\n    static generateSalt() {\n      return _cryptoJs.default.lib.WordArray.random(16).toString();\n    }\n\n    // Encrypt data with AES-256\n    static encrypt(data, key) {\n      try {\n        const encrypted = _cryptoJs.default.AES.encrypt(data, key).toString();\n        return encrypted;\n      } catch (error) {\n        console.error('Encryption failed:', error);\n        throw new Error('Failed to encrypt data');\n      }\n    }\n\n    // Decrypt data with AES-256\n    static decrypt(encryptedData, key) {\n      try {\n        const bytes = _cryptoJs.default.AES.decrypt(encryptedData, key);\n        const decrypted = bytes.toString(_cryptoJs.default.enc.Utf8);\n        if (!decrypted) {\n          throw new Error('Invalid decryption key');\n        }\n        return decrypted;\n      } catch (error) {\n        console.error('Decryption failed:', error);\n        throw new Error('Failed to decrypt data');\n      }\n    }\n\n    // Hash master password for server storage using bcrypt\n    static async hashMasterPassword(password, salt) {\n      try {\n        // Use bcrypt with salt rounds for password hashing\n        const saltRounds = 12;\n        const hash = await _bcryptjs.default.hash(password + salt, saltRounds);\n        return hash;\n      } catch (error) {\n        console.error('Password hashing failed:', error);\n        throw new Error('Failed to hash password');\n      }\n    }\n\n    // Generate strong password\n    static generatePassword(length = 16, includeUppercase = true, includeLowercase = true, includeNumbers = true, includeSymbols = true) {\n      let charset = '';\n      if (includeUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      if (includeLowercase) charset += 'abcdefghijklmnopqrstuvwxyz';\n      if (includeNumbers) charset += '0123456789';\n      if (includeSymbols) charset += '!@#$%^&*()_+-=[]{}|;:,.<>?';\n      if (!charset) {\n        throw new Error('At least one character type must be selected');\n      }\n      let password = '';\n      for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * charset.length);\n        password += charset[randomIndex];\n      }\n      return password;\n    }\n\n    // Calculate password strength\n    static calculatePasswordStrength(password) {\n      let score = 0;\n      const suggestions = [];\n\n      // Length check\n      if (password.length >= 12) score += 2;else if (password.length >= 8) score += 1;else suggestions.push('Use at least 8 characters');\n\n      // Character diversity\n      if (/[a-z]/.test(password)) score += 1;else suggestions.push('Include lowercase letters');\n      if (/[A-Z]/.test(password)) score += 1;else suggestions.push('Include uppercase letters');\n      if (/[0-9]/.test(password)) score += 1;else suggestions.push('Include numbers');\n      if (/[^a-zA-Z0-9]/.test(password)) score += 1;else suggestions.push('Include symbols');\n\n      // Patterns check\n      if (!/(.)\\1{2,}/.test(password)) score += 1;else suggestions.push('Avoid repeated characters');\n      let label = 'Very Weak';\n      if (score >= 6) label = 'Very Strong';else if (score >= 5) label = 'Strong';else if (score >= 4) label = 'Good';else if (score >= 3) label = 'Fair';else if (score >= 2) label = 'Weak';\n      return {\n        score,\n        label,\n        suggestions\n      };\n    }\n  }\n  exports.EncryptionService = EncryptionService;\n});","lineCount":113,"map":[[7,2,1,0],[7,6,1,0,"_cryptoJs"],[7,15,1,0],[7,18,1,0,"_interopRequireDefault"],[7,40,1,0],[7,41,1,0,"require"],[7,48,1,0],[7,49,1,0,"_dependencyMap"],[7,63,1,0],[8,2,2,0],[8,6,2,0,"_bcryptjs"],[8,15,2,0],[8,18,2,0,"_interopRequireDefault"],[8,40,2,0],[8,41,2,0,"require"],[8,48,2,0],[8,49,2,0,"_dependencyMap"],[8,63,2,0],[9,2,4,7],[9,8,4,13,"EncryptionService"],[9,25,4,30],[9,26,4,31],[10,4,5,2],[11,4,6,2],[11,17,6,15,"deriveKey"],[11,26,6,24,"deriveKey"],[11,27,6,25,"masterPassword"],[11,41,6,47],[11,43,6,49,"salt"],[11,47,6,61],[11,49,6,80],[12,6,7,4],[12,10,7,8],[13,8,8,6],[14,8,9,6],[14,14,9,12,"key"],[14,17,9,15],[14,20,9,18,"CryptoJS"],[14,37,9,26],[14,38,9,27,"PBKDF2"],[14,44,9,33],[14,45,9,34,"masterPassword"],[14,59,9,48],[14,61,9,50,"salt"],[14,65,9,54],[14,67,9,56],[15,10,10,8,"keySize"],[15,17,10,15],[15,19,10,17],[15,22,10,20],[15,25,10,21],[15,27,10,23],[16,10,11,8,"iterations"],[16,20,11,18],[16,22,11,20],[17,8,12,6],[17,9,12,7],[17,10,12,8],[18,8,13,6],[18,15,13,13,"key"],[18,18,13,16],[18,19,13,17,"toString"],[18,27,13,25],[18,28,13,26],[18,29,13,27],[19,6,14,4],[19,7,14,5],[19,8,14,6],[19,15,14,13,"error"],[19,20,14,18],[19,22,14,20],[20,8,15,6,"console"],[20,15,15,13],[20,16,15,14,"error"],[20,21,15,19],[20,22,15,20],[20,46,15,44],[20,48,15,46,"error"],[20,53,15,51],[20,54,15,52],[21,8,16,6],[21,14,16,12],[21,18,16,16,"Error"],[21,23,16,21],[21,24,16,22],[21,57,16,55],[21,58,16,56],[22,6,17,4],[23,4,18,2],[25,4,20,2],[26,4,21,2],[26,11,21,9,"generateSalt"],[26,23,21,21,"generateSalt"],[26,24,21,21],[26,26,21,32],[27,6,22,4],[27,13,22,11,"CryptoJS"],[27,30,22,19],[27,31,22,20,"lib"],[27,34,22,23],[27,35,22,24,"WordArray"],[27,44,22,33],[27,45,22,34,"random"],[27,51,22,40],[27,52,22,41],[27,54,22,43],[27,55,22,44],[27,56,22,45,"toString"],[27,64,22,53],[27,65,22,54],[27,66,22,55],[28,4,23,2],[30,4,25,2],[31,4,26,2],[31,11,26,9,"encrypt"],[31,18,26,16,"encrypt"],[31,19,26,17,"data"],[31,23,26,29],[31,25,26,31,"key"],[31,28,26,42],[31,30,26,52],[32,6,27,4],[32,10,27,8],[33,8,28,6],[33,14,28,12,"encrypted"],[33,23,28,21],[33,26,28,24,"CryptoJS"],[33,43,28,32],[33,44,28,33,"AES"],[33,47,28,36],[33,48,28,37,"encrypt"],[33,55,28,44],[33,56,28,45,"data"],[33,60,28,49],[33,62,28,51,"key"],[33,65,28,54],[33,66,28,55],[33,67,28,56,"toString"],[33,75,28,64],[33,76,28,65],[33,77,28,66],[34,8,29,6],[34,15,29,13,"encrypted"],[34,24,29,22],[35,6,30,4],[35,7,30,5],[35,8,30,6],[35,15,30,13,"error"],[35,20,30,18],[35,22,30,20],[36,8,31,6,"console"],[36,15,31,13],[36,16,31,14,"error"],[36,21,31,19],[36,22,31,20],[36,42,31,40],[36,44,31,42,"error"],[36,49,31,47],[36,50,31,48],[37,8,32,6],[37,14,32,12],[37,18,32,16,"Error"],[37,23,32,21],[37,24,32,22],[37,48,32,46],[37,49,32,47],[38,6,33,4],[39,4,34,2],[41,4,36,2],[42,4,37,2],[42,11,37,9,"decrypt"],[42,18,37,16,"decrypt"],[42,19,37,17,"encryptedData"],[42,32,37,38],[42,34,37,40,"key"],[42,37,37,51],[42,39,37,61],[43,6,38,4],[43,10,38,8],[44,8,39,6],[44,14,39,12,"bytes"],[44,19,39,17],[44,22,39,20,"CryptoJS"],[44,39,39,28],[44,40,39,29,"AES"],[44,43,39,32],[44,44,39,33,"decrypt"],[44,51,39,40],[44,52,39,41,"encryptedData"],[44,65,39,54],[44,67,39,56,"key"],[44,70,39,59],[44,71,39,60],[45,8,40,6],[45,14,40,12,"decrypted"],[45,23,40,21],[45,26,40,24,"bytes"],[45,31,40,29],[45,32,40,30,"toString"],[45,40,40,38],[45,41,40,39,"CryptoJS"],[45,58,40,47],[45,59,40,48,"enc"],[45,62,40,51],[45,63,40,52,"Utf8"],[45,67,40,56],[45,68,40,57],[46,8,41,6],[46,12,41,10],[46,13,41,11,"decrypted"],[46,22,41,20],[46,24,41,22],[47,10,42,8],[47,16,42,14],[47,20,42,18,"Error"],[47,25,42,23],[47,26,42,24],[47,50,42,48],[47,51,42,49],[48,8,43,6],[49,8,44,6],[49,15,44,13,"decrypted"],[49,24,44,22],[50,6,45,4],[50,7,45,5],[50,8,45,6],[50,15,45,13,"error"],[50,20,45,18],[50,22,45,20],[51,8,46,6,"console"],[51,15,46,13],[51,16,46,14,"error"],[51,21,46,19],[51,22,46,20],[51,42,46,40],[51,44,46,42,"error"],[51,49,46,47],[51,50,46,48],[52,8,47,6],[52,14,47,12],[52,18,47,16,"Error"],[52,23,47,21],[52,24,47,22],[52,48,47,46],[52,49,47,47],[53,6,48,4],[54,4,49,2],[56,4,51,2],[57,4,52,2],[57,17,52,15,"hashMasterPassword"],[57,35,52,33,"hashMasterPassword"],[57,36,52,34,"password"],[57,44,52,50],[57,46,52,52,"salt"],[57,50,52,64],[57,52,52,83],[58,6,53,4],[58,10,53,8],[59,8,54,6],[60,8,55,6],[60,14,55,12,"saltRounds"],[60,24,55,22],[60,27,55,25],[60,29,55,27],[61,8,56,6],[61,14,56,12,"hash"],[61,18,56,16],[61,21,56,19],[61,27,56,25,"bcrypt"],[61,44,56,31],[61,45,56,32,"hash"],[61,49,56,36],[61,50,56,37,"password"],[61,58,56,45],[61,61,56,48,"salt"],[61,65,56,52],[61,67,56,54,"saltRounds"],[61,77,56,64],[61,78,56,65],[62,8,57,6],[62,15,57,13,"hash"],[62,19,57,17],[63,6,58,4],[63,7,58,5],[63,8,58,6],[63,15,58,13,"error"],[63,20,58,18],[63,22,58,20],[64,8,59,6,"console"],[64,15,59,13],[64,16,59,14,"error"],[64,21,59,19],[64,22,59,20],[64,48,59,46],[64,50,59,48,"error"],[64,55,59,53],[64,56,59,54],[65,8,60,6],[65,14,60,12],[65,18,60,16,"Error"],[65,23,60,21],[65,24,60,22],[65,49,60,47],[65,50,60,48],[66,6,61,4],[67,4,62,2],[69,4,64,2],[70,4,65,2],[70,11,65,9,"generatePassword"],[70,27,65,25,"generatePassword"],[70,28,66,4,"length"],[70,34,66,18],[70,37,66,21],[70,39,66,23],[70,41,67,4,"includeUppercase"],[70,57,67,29],[70,60,67,32],[70,64,67,36],[70,66,68,4,"includeLowercase"],[70,82,68,29],[70,85,68,32],[70,89,68,36],[70,91,69,4,"includeNumbers"],[70,105,69,27],[70,108,69,30],[70,112,69,34],[70,114,70,4,"includeSymbols"],[70,128,70,27],[70,131,70,30],[70,135,70,34],[70,137,71,12],[71,6,72,4],[71,10,72,8,"charset"],[71,17,72,15],[71,20,72,18],[71,22,72,20],[72,6,73,4],[72,10,73,8,"includeUppercase"],[72,26,73,24],[72,28,73,26,"charset"],[72,35,73,33],[72,39,73,37],[72,67,73,65],[73,6,74,4],[73,10,74,8,"includeLowercase"],[73,26,74,24],[73,28,74,26,"charset"],[73,35,74,33],[73,39,74,37],[73,67,74,65],[74,6,75,4],[74,10,75,8,"includeNumbers"],[74,24,75,22],[74,26,75,24,"charset"],[74,33,75,31],[74,37,75,35],[74,49,75,47],[75,6,76,4],[75,10,76,8,"includeSymbols"],[75,24,76,22],[75,26,76,24,"charset"],[75,33,76,31],[75,37,76,35],[75,65,76,63],[76,6,78,4],[76,10,78,8],[76,11,78,9,"charset"],[76,18,78,16],[76,20,78,18],[77,8,79,6],[77,14,79,12],[77,18,79,16,"Error"],[77,23,79,21],[77,24,79,22],[77,70,79,68],[77,71,79,69],[78,6,80,4],[79,6,82,4],[79,10,82,8,"password"],[79,18,82,16],[79,21,82,19],[79,23,82,21],[80,6,83,4],[80,11,83,9],[80,15,83,13,"i"],[80,16,83,14],[80,19,83,17],[80,20,83,18],[80,22,83,20,"i"],[80,23,83,21],[80,26,83,24,"length"],[80,32,83,30],[80,34,83,32,"i"],[80,35,83,33],[80,37,83,35],[80,39,83,37],[81,8,84,6],[81,14,84,12,"randomIndex"],[81,25,84,23],[81,28,84,26,"Math"],[81,32,84,30],[81,33,84,31,"floor"],[81,38,84,36],[81,39,84,37,"Math"],[81,43,84,41],[81,44,84,42,"random"],[81,50,84,48],[81,51,84,49],[81,52,84,50],[81,55,84,53,"charset"],[81,62,84,60],[81,63,84,61,"length"],[81,69,84,67],[81,70,84,68],[82,8,85,6,"password"],[82,16,85,14],[82,20,85,18,"charset"],[82,27,85,25],[82,28,85,26,"randomIndex"],[82,39,85,37],[82,40,85,38],[83,6,86,4],[84,6,88,4],[84,13,88,11,"password"],[84,21,88,19],[85,4,89,2],[87,4,91,2],[88,4,92,2],[88,11,92,9,"calculatePasswordStrength"],[88,36,92,34,"calculatePasswordStrength"],[88,37,92,35,"password"],[88,45,92,51],[88,47,96,4],[89,6,97,4],[89,10,97,8,"score"],[89,15,97,13],[89,18,97,16],[89,19,97,17],[90,6,98,4],[90,12,98,10,"suggestions"],[90,23,98,31],[90,26,98,34],[90,28,98,36],[92,6,100,4],[93,6,101,4],[93,10,101,8,"password"],[93,18,101,16],[93,19,101,17,"length"],[93,25,101,23],[93,29,101,27],[93,31,101,29],[93,33,101,31,"score"],[93,38,101,36],[93,42,101,40],[93,43,101,41],[93,44,101,42],[93,49,102,9],[93,53,102,13,"password"],[93,61,102,21],[93,62,102,22,"length"],[93,68,102,28],[93,72,102,32],[93,73,102,33],[93,75,102,35,"score"],[93,80,102,40],[93,84,102,44],[93,85,102,45],[93,86,102,46],[93,91,103,9,"suggestions"],[93,102,103,20],[93,103,103,21,"push"],[93,107,103,25],[93,108,103,26],[93,135,103,53],[93,136,103,54],[95,6,105,4],[96,6,106,4],[96,10,106,8],[96,17,106,15],[96,18,106,16,"test"],[96,22,106,20],[96,23,106,21,"password"],[96,31,106,29],[96,32,106,30],[96,34,106,32,"score"],[96,39,106,37],[96,43,106,41],[96,44,106,42],[96,45,106,43],[96,50,107,9,"suggestions"],[96,61,107,20],[96,62,107,21,"push"],[96,66,107,25],[96,67,107,26],[96,94,107,53],[96,95,107,54],[97,6,109,4],[97,10,109,8],[97,17,109,15],[97,18,109,16,"test"],[97,22,109,20],[97,23,109,21,"password"],[97,31,109,29],[97,32,109,30],[97,34,109,32,"score"],[97,39,109,37],[97,43,109,41],[97,44,109,42],[97,45,109,43],[97,50,110,9,"suggestions"],[97,61,110,20],[97,62,110,21,"push"],[97,66,110,25],[97,67,110,26],[97,94,110,53],[97,95,110,54],[98,6,112,4],[98,10,112,8],[98,17,112,15],[98,18,112,16,"test"],[98,22,112,20],[98,23,112,21,"password"],[98,31,112,29],[98,32,112,30],[98,34,112,32,"score"],[98,39,112,37],[98,43,112,41],[98,44,112,42],[98,45,112,43],[98,50,113,9,"suggestions"],[98,61,113,20],[98,62,113,21,"push"],[98,66,113,25],[98,67,113,26],[98,84,113,43],[98,85,113,44],[99,6,115,4],[99,10,115,8],[99,24,115,22],[99,25,115,23,"test"],[99,29,115,27],[99,30,115,28,"password"],[99,38,115,36],[99,39,115,37],[99,41,115,39,"score"],[99,46,115,44],[99,50,115,48],[99,51,115,49],[99,52,115,50],[99,57,116,9,"suggestions"],[99,68,116,20],[99,69,116,21,"push"],[99,73,116,25],[99,74,116,26],[99,91,116,43],[99,92,116,44],[101,6,118,4],[102,6,119,4],[102,10,119,8],[102,11,119,9],[102,22,119,20],[102,23,119,21,"test"],[102,27,119,25],[102,28,119,26,"password"],[102,36,119,34],[102,37,119,35],[102,39,119,37,"score"],[102,44,119,42],[102,48,119,46],[102,49,119,47],[102,50,119,48],[102,55,120,9,"suggestions"],[102,66,120,20],[102,67,120,21,"push"],[102,71,120,25],[102,72,120,26],[102,99,120,53],[102,100,120,54],[103,6,122,4],[103,10,122,8,"label"],[103,15,122,13],[103,18,122,16],[103,29,122,27],[104,6,123,4],[104,10,123,8,"score"],[104,15,123,13],[104,19,123,17],[104,20,123,18],[104,22,123,20,"label"],[104,27,123,25],[104,30,123,28],[104,43,123,41],[104,44,123,42],[104,49,124,9],[104,53,124,13,"score"],[104,58,124,18],[104,62,124,22],[104,63,124,23],[104,65,124,25,"label"],[104,70,124,30],[104,73,124,33],[104,81,124,41],[104,82,124,42],[104,87,125,9],[104,91,125,13,"score"],[104,96,125,18],[104,100,125,22],[104,101,125,23],[104,103,125,25,"label"],[104,108,125,30],[104,111,125,33],[104,117,125,39],[104,118,125,40],[104,123,126,9],[104,127,126,13,"score"],[104,132,126,18],[104,136,126,22],[104,137,126,23],[104,139,126,25,"label"],[104,144,126,30],[104,147,126,33],[104,153,126,39],[104,154,126,40],[104,159,127,9],[104,163,127,13,"score"],[104,168,127,18],[104,172,127,22],[104,173,127,23],[104,175,127,25,"label"],[104,180,127,30],[104,183,127,33],[104,189,127,39],[105,6,129,4],[105,13,129,11],[106,8,129,13,"score"],[106,13,129,18],[107,8,129,20,"label"],[107,13,129,25],[108,8,129,27,"suggestions"],[109,6,129,39],[109,7,129,40],[110,4,130,2],[111,2,131,0],[112,2,131,1,"exports"],[112,9,131,1],[112,10,131,1,"EncryptionService"],[112,27,131,1],[112,30,131,1,"EncryptionService"],[112,47,131,1],[113,0,131,1],[113,3]],"functionMap":{"names":["<global>","EncryptionService","EncryptionService.deriveKey","EncryptionService.generateSalt","EncryptionService.encrypt","EncryptionService.decrypt","EncryptionService.hashMasterPassword","EncryptionService.generatePassword","EncryptionService.calculatePasswordStrength"],"mappings":"AAA;OCG;ECE;GDY;EEG;GFE;EGG;GHQ;EIG;GJY;EKG;GLU;EMG;GNwB;EOG;GPsC"}},"type":"js/module"}]}