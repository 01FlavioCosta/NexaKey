{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"crypto-js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"TLjsXnAWOlf/gpObabse3HZX8VY=","exportNames":["*"]}},{"name":"argon2-browser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":38,"index":72}}],"key":"PKbGBdfXANW76lnvwKdeB1ydXQc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.EncryptionService = void 0;\n  var _cryptoJs = _interopRequireDefault(require(_dependencyMap[1], \"crypto-js\"));\n  var _argon2Browser = require(_dependencyMap[2], \"argon2-browser\");\n  class EncryptionService {\n    // Generate a key from master password using Argon2\n    static async deriveKey(masterPassword, salt) {\n      try {\n        const result = await (0, _argon2Browser.hash)({\n          pass: masterPassword,\n          salt: salt,\n          time: 3,\n          mem: 4096,\n          hashLen: 32,\n          parallelism: 1,\n          type: 0 // Argon2d\n        });\n        return result.encoded;\n      } catch (error) {\n        console.error('Key derivation failed:', error);\n        throw new Error('Failed to derive encryption key');\n      }\n    }\n\n    // Generate a random salt\n    static generateSalt() {\n      return _cryptoJs.default.lib.WordArray.random(16).toString();\n    }\n\n    // Encrypt data with AES-256\n    static encrypt(data, key) {\n      try {\n        const encrypted = _cryptoJs.default.AES.encrypt(data, key).toString();\n        return encrypted;\n      } catch (error) {\n        console.error('Encryption failed:', error);\n        throw new Error('Failed to encrypt data');\n      }\n    }\n\n    // Decrypt data with AES-256\n    static decrypt(encryptedData, key) {\n      try {\n        const bytes = _cryptoJs.default.AES.decrypt(encryptedData, key);\n        const decrypted = bytes.toString(_cryptoJs.default.enc.Utf8);\n        if (!decrypted) {\n          throw new Error('Invalid decryption key');\n        }\n        return decrypted;\n      } catch (error) {\n        console.error('Decryption failed:', error);\n        throw new Error('Failed to decrypt data');\n      }\n    }\n\n    // Hash master password for server storage\n    static async hashMasterPassword(password, salt) {\n      try {\n        const result = await (0, _argon2Browser.hash)({\n          pass: password,\n          salt: salt,\n          time: 3,\n          mem: 4096,\n          hashLen: 32,\n          parallelism: 1,\n          type: 2 // Argon2id\n        });\n        return result.encoded;\n      } catch (error) {\n        console.error('Password hashing failed:', error);\n        throw new Error('Failed to hash password');\n      }\n    }\n\n    // Generate strong password\n    static generatePassword(length = 16, includeUppercase = true, includeLowercase = true, includeNumbers = true, includeSymbols = true) {\n      let charset = '';\n      if (includeUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      if (includeLowercase) charset += 'abcdefghijklmnopqrstuvwxyz';\n      if (includeNumbers) charset += '0123456789';\n      if (includeSymbols) charset += '!@#$%^&*()_+-=[]{}|;:,.<>?';\n      if (!charset) {\n        throw new Error('At least one character type must be selected');\n      }\n      let password = '';\n      for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * charset.length);\n        password += charset[randomIndex];\n      }\n      return password;\n    }\n\n    // Calculate password strength\n    static calculatePasswordStrength(password) {\n      let score = 0;\n      const suggestions = [];\n\n      // Length check\n      if (password.length >= 12) score += 2;else if (password.length >= 8) score += 1;else suggestions.push('Use at least 8 characters');\n\n      // Character diversity\n      if (/[a-z]/.test(password)) score += 1;else suggestions.push('Include lowercase letters');\n      if (/[A-Z]/.test(password)) score += 1;else suggestions.push('Include uppercase letters');\n      if (/[0-9]/.test(password)) score += 1;else suggestions.push('Include numbers');\n      if (/[^a-zA-Z0-9]/.test(password)) score += 1;else suggestions.push('Include symbols');\n\n      // Patterns check\n      if (!/(.)\\1{2,}/.test(password)) score += 1;else suggestions.push('Avoid repeated characters');\n      let label = 'Very Weak';\n      if (score >= 6) label = 'Very Strong';else if (score >= 5) label = 'Strong';else if (score >= 4) label = 'Good';else if (score >= 3) label = 'Fair';else if (score >= 2) label = 'Weak';\n      return {\n        score,\n        label,\n        suggestions\n      };\n    }\n  }\n  exports.EncryptionService = EncryptionService;\n});","lineCount":123,"map":[[7,2,1,0],[7,6,1,0,"_cryptoJs"],[7,15,1,0],[7,18,1,0,"_interopRequireDefault"],[7,40,1,0],[7,41,1,0,"require"],[7,48,1,0],[7,49,1,0,"_dependencyMap"],[7,63,1,0],[8,2,2,0],[8,6,2,0,"_argon2Browser"],[8,20,2,0],[8,23,2,0,"require"],[8,30,2,0],[8,31,2,0,"_dependencyMap"],[8,45,2,0],[9,2,4,7],[9,8,4,13,"EncryptionService"],[9,25,4,30],[9,26,4,31],[10,4,5,2],[11,4,6,2],[11,17,6,15,"deriveKey"],[11,26,6,24,"deriveKey"],[11,27,6,25,"masterPassword"],[11,41,6,47],[11,43,6,49,"salt"],[11,47,6,61],[11,49,6,80],[12,6,7,4],[12,10,7,8],[13,8,8,6],[13,14,8,12,"result"],[13,20,8,18],[13,23,8,21],[13,29,8,27],[13,33,8,27,"hash"],[13,52,8,31],[13,54,8,32],[14,10,9,8,"pass"],[14,14,9,12],[14,16,9,14,"masterPassword"],[14,30,9,28],[15,10,10,8,"salt"],[15,14,10,12],[15,16,10,14,"salt"],[15,20,10,18],[16,10,11,8,"time"],[16,14,11,12],[16,16,11,14],[16,17,11,15],[17,10,12,8,"mem"],[17,13,12,11],[17,15,12,13],[17,19,12,17],[18,10,13,8,"hashLen"],[18,17,13,15],[18,19,13,17],[18,21,13,19],[19,10,14,8,"parallelism"],[19,21,14,19],[19,23,14,21],[19,24,14,22],[20,10,15,8,"type"],[20,14,15,12],[20,16,15,14],[20,17,15,15],[20,18,15,17],[21,8,16,6],[21,9,16,7],[21,10,16,8],[22,8,17,6],[22,15,17,13,"result"],[22,21,17,19],[22,22,17,20,"encoded"],[22,29,17,27],[23,6,18,4],[23,7,18,5],[23,8,18,6],[23,15,18,13,"error"],[23,20,18,18],[23,22,18,20],[24,8,19,6,"console"],[24,15,19,13],[24,16,19,14,"error"],[24,21,19,19],[24,22,19,20],[24,46,19,44],[24,48,19,46,"error"],[24,53,19,51],[24,54,19,52],[25,8,20,6],[25,14,20,12],[25,18,20,16,"Error"],[25,23,20,21],[25,24,20,22],[25,57,20,55],[25,58,20,56],[26,6,21,4],[27,4,22,2],[29,4,24,2],[30,4,25,2],[30,11,25,9,"generateSalt"],[30,23,25,21,"generateSalt"],[30,24,25,21],[30,26,25,32],[31,6,26,4],[31,13,26,11,"CryptoJS"],[31,30,26,19],[31,31,26,20,"lib"],[31,34,26,23],[31,35,26,24,"WordArray"],[31,44,26,33],[31,45,26,34,"random"],[31,51,26,40],[31,52,26,41],[31,54,26,43],[31,55,26,44],[31,56,26,45,"toString"],[31,64,26,53],[31,65,26,54],[31,66,26,55],[32,4,27,2],[34,4,29,2],[35,4,30,2],[35,11,30,9,"encrypt"],[35,18,30,16,"encrypt"],[35,19,30,17,"data"],[35,23,30,29],[35,25,30,31,"key"],[35,28,30,42],[35,30,30,52],[36,6,31,4],[36,10,31,8],[37,8,32,6],[37,14,32,12,"encrypted"],[37,23,32,21],[37,26,32,24,"CryptoJS"],[37,43,32,32],[37,44,32,33,"AES"],[37,47,32,36],[37,48,32,37,"encrypt"],[37,55,32,44],[37,56,32,45,"data"],[37,60,32,49],[37,62,32,51,"key"],[37,65,32,54],[37,66,32,55],[37,67,32,56,"toString"],[37,75,32,64],[37,76,32,65],[37,77,32,66],[38,8,33,6],[38,15,33,13,"encrypted"],[38,24,33,22],[39,6,34,4],[39,7,34,5],[39,8,34,6],[39,15,34,13,"error"],[39,20,34,18],[39,22,34,20],[40,8,35,6,"console"],[40,15,35,13],[40,16,35,14,"error"],[40,21,35,19],[40,22,35,20],[40,42,35,40],[40,44,35,42,"error"],[40,49,35,47],[40,50,35,48],[41,8,36,6],[41,14,36,12],[41,18,36,16,"Error"],[41,23,36,21],[41,24,36,22],[41,48,36,46],[41,49,36,47],[42,6,37,4],[43,4,38,2],[45,4,40,2],[46,4,41,2],[46,11,41,9,"decrypt"],[46,18,41,16,"decrypt"],[46,19,41,17,"encryptedData"],[46,32,41,38],[46,34,41,40,"key"],[46,37,41,51],[46,39,41,61],[47,6,42,4],[47,10,42,8],[48,8,43,6],[48,14,43,12,"bytes"],[48,19,43,17],[48,22,43,20,"CryptoJS"],[48,39,43,28],[48,40,43,29,"AES"],[48,43,43,32],[48,44,43,33,"decrypt"],[48,51,43,40],[48,52,43,41,"encryptedData"],[48,65,43,54],[48,67,43,56,"key"],[48,70,43,59],[48,71,43,60],[49,8,44,6],[49,14,44,12,"decrypted"],[49,23,44,21],[49,26,44,24,"bytes"],[49,31,44,29],[49,32,44,30,"toString"],[49,40,44,38],[49,41,44,39,"CryptoJS"],[49,58,44,47],[49,59,44,48,"enc"],[49,62,44,51],[49,63,44,52,"Utf8"],[49,67,44,56],[49,68,44,57],[50,8,45,6],[50,12,45,10],[50,13,45,11,"decrypted"],[50,22,45,20],[50,24,45,22],[51,10,46,8],[51,16,46,14],[51,20,46,18,"Error"],[51,25,46,23],[51,26,46,24],[51,50,46,48],[51,51,46,49],[52,8,47,6],[53,8,48,6],[53,15,48,13,"decrypted"],[53,24,48,22],[54,6,49,4],[54,7,49,5],[54,8,49,6],[54,15,49,13,"error"],[54,20,49,18],[54,22,49,20],[55,8,50,6,"console"],[55,15,50,13],[55,16,50,14,"error"],[55,21,50,19],[55,22,50,20],[55,42,50,40],[55,44,50,42,"error"],[55,49,50,47],[55,50,50,48],[56,8,51,6],[56,14,51,12],[56,18,51,16,"Error"],[56,23,51,21],[56,24,51,22],[56,48,51,46],[56,49,51,47],[57,6,52,4],[58,4,53,2],[60,4,55,2],[61,4,56,2],[61,17,56,15,"hashMasterPassword"],[61,35,56,33,"hashMasterPassword"],[61,36,56,34,"password"],[61,44,56,50],[61,46,56,52,"salt"],[61,50,56,64],[61,52,56,83],[62,6,57,4],[62,10,57,8],[63,8,58,6],[63,14,58,12,"result"],[63,20,58,18],[63,23,58,21],[63,29,58,27],[63,33,58,27,"hash"],[63,52,58,31],[63,54,58,32],[64,10,59,8,"pass"],[64,14,59,12],[64,16,59,14,"password"],[64,24,59,22],[65,10,60,8,"salt"],[65,14,60,12],[65,16,60,14,"salt"],[65,20,60,18],[66,10,61,8,"time"],[66,14,61,12],[66,16,61,14],[66,17,61,15],[67,10,62,8,"mem"],[67,13,62,11],[67,15,62,13],[67,19,62,17],[68,10,63,8,"hashLen"],[68,17,63,15],[68,19,63,17],[68,21,63,19],[69,10,64,8,"parallelism"],[69,21,64,19],[69,23,64,21],[69,24,64,22],[70,10,65,8,"type"],[70,14,65,12],[70,16,65,14],[70,17,65,15],[70,18,65,17],[71,8,66,6],[71,9,66,7],[71,10,66,8],[72,8,67,6],[72,15,67,13,"result"],[72,21,67,19],[72,22,67,20,"encoded"],[72,29,67,27],[73,6,68,4],[73,7,68,5],[73,8,68,6],[73,15,68,13,"error"],[73,20,68,18],[73,22,68,20],[74,8,69,6,"console"],[74,15,69,13],[74,16,69,14,"error"],[74,21,69,19],[74,22,69,20],[74,48,69,46],[74,50,69,48,"error"],[74,55,69,53],[74,56,69,54],[75,8,70,6],[75,14,70,12],[75,18,70,16,"Error"],[75,23,70,21],[75,24,70,22],[75,49,70,47],[75,50,70,48],[76,6,71,4],[77,4,72,2],[79,4,74,2],[80,4,75,2],[80,11,75,9,"generatePassword"],[80,27,75,25,"generatePassword"],[80,28,76,4,"length"],[80,34,76,18],[80,37,76,21],[80,39,76,23],[80,41,77,4,"includeUppercase"],[80,57,77,29],[80,60,77,32],[80,64,77,36],[80,66,78,4,"includeLowercase"],[80,82,78,29],[80,85,78,32],[80,89,78,36],[80,91,79,4,"includeNumbers"],[80,105,79,27],[80,108,79,30],[80,112,79,34],[80,114,80,4,"includeSymbols"],[80,128,80,27],[80,131,80,30],[80,135,80,34],[80,137,81,12],[81,6,82,4],[81,10,82,8,"charset"],[81,17,82,15],[81,20,82,18],[81,22,82,20],[82,6,83,4],[82,10,83,8,"includeUppercase"],[82,26,83,24],[82,28,83,26,"charset"],[82,35,83,33],[82,39,83,37],[82,67,83,65],[83,6,84,4],[83,10,84,8,"includeLowercase"],[83,26,84,24],[83,28,84,26,"charset"],[83,35,84,33],[83,39,84,37],[83,67,84,65],[84,6,85,4],[84,10,85,8,"includeNumbers"],[84,24,85,22],[84,26,85,24,"charset"],[84,33,85,31],[84,37,85,35],[84,49,85,47],[85,6,86,4],[85,10,86,8,"includeSymbols"],[85,24,86,22],[85,26,86,24,"charset"],[85,33,86,31],[85,37,86,35],[85,65,86,63],[86,6,88,4],[86,10,88,8],[86,11,88,9,"charset"],[86,18,88,16],[86,20,88,18],[87,8,89,6],[87,14,89,12],[87,18,89,16,"Error"],[87,23,89,21],[87,24,89,22],[87,70,89,68],[87,71,89,69],[88,6,90,4],[89,6,92,4],[89,10,92,8,"password"],[89,18,92,16],[89,21,92,19],[89,23,92,21],[90,6,93,4],[90,11,93,9],[90,15,93,13,"i"],[90,16,93,14],[90,19,93,17],[90,20,93,18],[90,22,93,20,"i"],[90,23,93,21],[90,26,93,24,"length"],[90,32,93,30],[90,34,93,32,"i"],[90,35,93,33],[90,37,93,35],[90,39,93,37],[91,8,94,6],[91,14,94,12,"randomIndex"],[91,25,94,23],[91,28,94,26,"Math"],[91,32,94,30],[91,33,94,31,"floor"],[91,38,94,36],[91,39,94,37,"Math"],[91,43,94,41],[91,44,94,42,"random"],[91,50,94,48],[91,51,94,49],[91,52,94,50],[91,55,94,53,"charset"],[91,62,94,60],[91,63,94,61,"length"],[91,69,94,67],[91,70,94,68],[92,8,95,6,"password"],[92,16,95,14],[92,20,95,18,"charset"],[92,27,95,25],[92,28,95,26,"randomIndex"],[92,39,95,37],[92,40,95,38],[93,6,96,4],[94,6,98,4],[94,13,98,11,"password"],[94,21,98,19],[95,4,99,2],[97,4,101,2],[98,4,102,2],[98,11,102,9,"calculatePasswordStrength"],[98,36,102,34,"calculatePasswordStrength"],[98,37,102,35,"password"],[98,45,102,51],[98,47,106,4],[99,6,107,4],[99,10,107,8,"score"],[99,15,107,13],[99,18,107,16],[99,19,107,17],[100,6,108,4],[100,12,108,10,"suggestions"],[100,23,108,31],[100,26,108,34],[100,28,108,36],[102,6,110,4],[103,6,111,4],[103,10,111,8,"password"],[103,18,111,16],[103,19,111,17,"length"],[103,25,111,23],[103,29,111,27],[103,31,111,29],[103,33,111,31,"score"],[103,38,111,36],[103,42,111,40],[103,43,111,41],[103,44,111,42],[103,49,112,9],[103,53,112,13,"password"],[103,61,112,21],[103,62,112,22,"length"],[103,68,112,28],[103,72,112,32],[103,73,112,33],[103,75,112,35,"score"],[103,80,112,40],[103,84,112,44],[103,85,112,45],[103,86,112,46],[103,91,113,9,"suggestions"],[103,102,113,20],[103,103,113,21,"push"],[103,107,113,25],[103,108,113,26],[103,135,113,53],[103,136,113,54],[105,6,115,4],[106,6,116,4],[106,10,116,8],[106,17,116,15],[106,18,116,16,"test"],[106,22,116,20],[106,23,116,21,"password"],[106,31,116,29],[106,32,116,30],[106,34,116,32,"score"],[106,39,116,37],[106,43,116,41],[106,44,116,42],[106,45,116,43],[106,50,117,9,"suggestions"],[106,61,117,20],[106,62,117,21,"push"],[106,66,117,25],[106,67,117,26],[106,94,117,53],[106,95,117,54],[107,6,119,4],[107,10,119,8],[107,17,119,15],[107,18,119,16,"test"],[107,22,119,20],[107,23,119,21,"password"],[107,31,119,29],[107,32,119,30],[107,34,119,32,"score"],[107,39,119,37],[107,43,119,41],[107,44,119,42],[107,45,119,43],[107,50,120,9,"suggestions"],[107,61,120,20],[107,62,120,21,"push"],[107,66,120,25],[107,67,120,26],[107,94,120,53],[107,95,120,54],[108,6,122,4],[108,10,122,8],[108,17,122,15],[108,18,122,16,"test"],[108,22,122,20],[108,23,122,21,"password"],[108,31,122,29],[108,32,122,30],[108,34,122,32,"score"],[108,39,122,37],[108,43,122,41],[108,44,122,42],[108,45,122,43],[108,50,123,9,"suggestions"],[108,61,123,20],[108,62,123,21,"push"],[108,66,123,25],[108,67,123,26],[108,84,123,43],[108,85,123,44],[109,6,125,4],[109,10,125,8],[109,24,125,22],[109,25,125,23,"test"],[109,29,125,27],[109,30,125,28,"password"],[109,38,125,36],[109,39,125,37],[109,41,125,39,"score"],[109,46,125,44],[109,50,125,48],[109,51,125,49],[109,52,125,50],[109,57,126,9,"suggestions"],[109,68,126,20],[109,69,126,21,"push"],[109,73,126,25],[109,74,126,26],[109,91,126,43],[109,92,126,44],[111,6,128,4],[112,6,129,4],[112,10,129,8],[112,11,129,9],[112,22,129,20],[112,23,129,21,"test"],[112,27,129,25],[112,28,129,26,"password"],[112,36,129,34],[112,37,129,35],[112,39,129,37,"score"],[112,44,129,42],[112,48,129,46],[112,49,129,47],[112,50,129,48],[112,55,130,9,"suggestions"],[112,66,130,20],[112,67,130,21,"push"],[112,71,130,25],[112,72,130,26],[112,99,130,53],[112,100,130,54],[113,6,132,4],[113,10,132,8,"label"],[113,15,132,13],[113,18,132,16],[113,29,132,27],[114,6,133,4],[114,10,133,8,"score"],[114,15,133,13],[114,19,133,17],[114,20,133,18],[114,22,133,20,"label"],[114,27,133,25],[114,30,133,28],[114,43,133,41],[114,44,133,42],[114,49,134,9],[114,53,134,13,"score"],[114,58,134,18],[114,62,134,22],[114,63,134,23],[114,65,134,25,"label"],[114,70,134,30],[114,73,134,33],[114,81,134,41],[114,82,134,42],[114,87,135,9],[114,91,135,13,"score"],[114,96,135,18],[114,100,135,22],[114,101,135,23],[114,103,135,25,"label"],[114,108,135,30],[114,111,135,33],[114,117,135,39],[114,118,135,40],[114,123,136,9],[114,127,136,13,"score"],[114,132,136,18],[114,136,136,22],[114,137,136,23],[114,139,136,25,"label"],[114,144,136,30],[114,147,136,33],[114,153,136,39],[114,154,136,40],[114,159,137,9],[114,163,137,13,"score"],[114,168,137,18],[114,172,137,22],[114,173,137,23],[114,175,137,25,"label"],[114,180,137,30],[114,183,137,33],[114,189,137,39],[115,6,139,4],[115,13,139,11],[116,8,139,13,"score"],[116,13,139,18],[117,8,139,20,"label"],[117,13,139,25],[118,8,139,27,"suggestions"],[119,6,139,39],[119,7,139,40],[120,4,140,2],[121,2,141,0],[122,2,141,1,"exports"],[122,9,141,1],[122,10,141,1,"EncryptionService"],[122,27,141,1],[122,30,141,1,"EncryptionService"],[122,47,141,1],[123,0,141,1],[123,3]],"functionMap":{"names":["<global>","EncryptionService","EncryptionService.deriveKey","EncryptionService.generateSalt","EncryptionService.encrypt","EncryptionService.decrypt","EncryptionService.hashMasterPassword","EncryptionService.generatePassword","EncryptionService.calculatePasswordStrength"],"mappings":"AAA;OCG;ECE;GDgB;EEG;GFE;EGG;GHQ;EIG;GJY;EKG;GLgB;EMG;GNwB;EOG;GPsC"}},"type":"js/module"}]}