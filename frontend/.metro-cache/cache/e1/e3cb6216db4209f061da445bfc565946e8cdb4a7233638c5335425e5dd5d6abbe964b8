{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../utils/storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":56,"index":146}}],"key":"rswhtWQFlk40P6/ZSXiz3NZSC0I=","exportNames":["*"],"imports":1}},{"name":"../utils/encryption","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":147},"end":{"line":3,"column":56,"index":203}}],"key":"Wlvn+1B4yqF3uisuH0wrMQSpnGk=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/contexts/AuthContext.tsx\";\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"AuthProvider\", {\n    enumerable: true,\n    get: function () {\n      return AuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"useAuth\", {\n    enumerable: true,\n    get: function () {\n      return useAuth;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _utilsStorage = require(_dependencyMap[1], \"../utils/storage\");\n  var _utilsEncryption = require(_dependencyMap[2], \"../utils/encryption\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const AuthContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const API_BASE_URL = process.env.EXPO_PUBLIC_BACKEND_URL || '';\n  const AuthProvider = ({\n    children\n  }) => {\n    const [user, setUser] = (0, _react.useState)(null);\n    const [isLoading, setIsLoading] = (0, _react.useState)(true);\n    const [isFirstTime, setIsFirstTime] = (0, _react.useState)(false);\n    const [masterKey, setMasterKeyState] = (0, _react.useState)(null);\n    (0, _react.useEffect)(() => {\n      initializeAuth();\n    }, []);\n    const initializeAuth = async () => {\n      try {\n        console.log('Initializing authentication...');\n\n        // Check if user has been through onboarding\n        const userData = await _utilsStorage.SecureStorageService.getUserData();\n        const token = await _utilsStorage.SecureStorageService.getAccessToken();\n        const salt = await _utilsStorage.SecureStorageService.getUserSalt();\n        console.log('Auth data check:', {\n          hasUserData: !!userData,\n          hasToken: !!token,\n          hasSalt: !!salt\n        });\n        if (!userData || !salt) {\n          console.log('No user data or salt found, showing onboarding');\n          setIsFirstTime(true);\n          setIsLoading(false);\n          return;\n        }\n        if (token && userData) {\n          try {\n            // Validate token with backend\n            const response = await fetch(`${API_BASE_URL}/api/user/profile`, {\n              headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json'\n              }\n            });\n            if (response.ok) {\n              const userProfile = await response.json();\n              setUser(userProfile);\n              console.log('User profile validated successfully');\n\n              // Try to restore master key\n              const storedKey = await _utilsStorage.SecureStorageService.getMasterKey();\n              if (storedKey) {\n                setMasterKeyState(storedKey);\n                console.log('Master key restored successfully');\n              } else {\n                console.log('No master key found in storage');\n              }\n            } else {\n              console.log('Token validation failed:', response.status);\n              // Token invalid, clear stored data\n              await _utilsStorage.SecureStorageService.clearAllData();\n              setIsFirstTime(true);\n            }\n          } catch (error) {\n            console.error('Error validating token:', error);\n            // Network or other error, clear data to be safe\n            await _utilsStorage.SecureStorageService.clearAllData();\n            setIsFirstTime(true);\n          }\n        } else {\n          console.log('Missing token or user data');\n          setIsFirstTime(true);\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        // Clear everything on initialization error\n        try {\n          await _utilsStorage.SecureStorageService.clearAllData();\n        } catch (clearError) {\n          console.error('Error clearing data:', clearError);\n        }\n        setIsFirstTime(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const register = async (email, password, biometricEnabled) => {\n      try {\n        setIsLoading(true);\n\n        // Generate salt for this user\n        const salt = _utilsEncryption.EncryptionService.generateSalt();\n\n        // Hash master password for server storage\n        const masterPasswordHash = await _utilsEncryption.EncryptionService.hashMasterPassword(password, salt);\n\n        // Derive encryption key for client-side encryption\n        const encryptionKey = await _utilsEncryption.EncryptionService.deriveKey(password, salt);\n        console.log('Registering user with email:', email);\n        const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            master_password_hash: masterPasswordHash,\n            biometric_enabled: biometricEnabled\n          })\n        });\n        const responseText = await response.text();\n        console.log('Registration response:', response.status, responseText);\n        if (!response.ok) {\n          let errorMessage = 'Falha no registro';\n          try {\n            const error = JSON.parse(responseText);\n            errorMessage = error.detail || errorMessage;\n          } catch (parseError) {\n            console.error('Error parsing response:', parseError);\n            errorMessage = `Erro ${response.status}: ${responseText}`;\n          }\n          throw new Error(errorMessage);\n        }\n        const data = JSON.parse(responseText);\n\n        // Store user data and tokens\n        await _utilsStorage.SecureStorageService.storeAccessToken(data.access_token);\n        await _utilsStorage.SecureStorageService.storeUserData(data.user);\n        await _utilsStorage.SecureStorageService.storeUserSalt(salt);\n        await _utilsStorage.SecureStorageService.storeMasterKey(encryptionKey);\n        await _utilsStorage.SecureStorageService.setBiometricEnabled(biometricEnabled);\n\n        // If biometric enabled, store recovery key\n        if (biometricEnabled) {\n          await _utilsStorage.SecureStorageService.storeBiometricKey(encryptionKey);\n        }\n        setUser(data.user);\n        setMasterKeyState(encryptionKey);\n        setIsFirstTime(false);\n        console.log('Registration successful for:', email);\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const login = async (email, password) => {\n      try {\n        setIsLoading(true);\n        console.log('Starting login process for:', email);\n\n        // Get stored salt - this is critical for consistency\n        let salt = await _utilsStorage.SecureStorageService.getUserSalt();\n        if (!salt) {\n          console.log('No salt found, generating new one');\n          // If no salt is stored, we need to handle this case\n          // For now, let's try with a fallback approach\n          Alert.alert('Dados Não Encontrados', 'Não foi possível encontrar os dados de login. Você precisará se registrar novamente.', [{\n            text: 'OK'\n          }]);\n          setIsFirstTime(true);\n          return;\n        }\n        console.log('Using stored salt for login');\n\n        // Hash password for server verification - ensure consistency\n        const masterPasswordHash = await _utilsEncryption.EncryptionService.hashMasterPassword(password, salt);\n\n        // Derive encryption key - must be identical to registration\n        const encryptionKey = await _utilsEncryption.EncryptionService.deriveKey(password, salt);\n        console.log('Attempting login with hashed password');\n        const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            master_password_hash: masterPasswordHash\n          })\n        });\n        const responseText = await response.text();\n        console.log('Login response:', response.status, responseText);\n        if (!response.ok) {\n          let errorMessage = 'Credenciais inválidas';\n          try {\n            const error = JSON.parse(responseText);\n            errorMessage = error.detail || errorMessage;\n          } catch (parseError) {\n            console.error('Error parsing login response:', parseError);\n          }\n          if (response.status === 401) {\n            // Clear potentially corrupted data\n            console.log('Login failed - clearing stored data');\n            await _utilsStorage.SecureStorageService.clearAllData();\n            setIsFirstTime(true);\n            errorMessage = 'Credenciais inválidas. Dados locais foram limpos. Tente se registrar novamente.';\n          }\n          throw new Error(errorMessage);\n        }\n        const data = JSON.parse(responseText);\n        console.log('Login successful');\n\n        // Store user data and tokens\n        await _utilsStorage.SecureStorageService.storeAccessToken(data.access_token);\n        await _utilsStorage.SecureStorageService.storeUserData(data.user);\n        await _utilsStorage.SecureStorageService.storeMasterKey(encryptionKey);\n        setUser(data.user);\n        setMasterKeyState(encryptionKey);\n        console.log('Login completed successfully');\n      } catch (error) {\n        console.error('Login error:', error);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const logout = async () => {\n      try {\n        await _utilsStorage.SecureStorageService.clearAllData();\n        setUser(null);\n        setMasterKeyState(null);\n      } catch (error) {\n        console.error('Logout error:', error);\n      }\n    };\n    const setMasterKey = key => {\n      setMasterKeyState(key);\n    };\n    const setBiometricRecovery = async enabled => {\n      try {\n        if (enabled && masterKey) {\n          await _utilsStorage.SecureStorageService.storeBiometricKey(masterKey);\n        }\n        await _utilsStorage.SecureStorageService.setBiometricEnabled(enabled);\n        if (user) {\n          setUser({\n            ...user,\n            biometric_enabled: enabled\n          });\n        }\n      } catch (error) {\n        console.error('Biometric setup error:', error);\n        throw error;\n      }\n    };\n    const value = {\n      user,\n      isLoading,\n      isFirstTime,\n      masterKey,\n      login,\n      register,\n      logout,\n      setMasterKey,\n      setBiometricRecovery\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 10\n    }, this);\n  };\n  const useAuth = () => {\n    const context = (0, _react.useContext)(AuthContext);\n    if (context === undefined) {\n      throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n  };\n});","lineCount":294,"map":[[8,2,34,0,"Object"],[8,8,34,0],[8,9,34,0,"defineProperty"],[8,23,34,0],[8,24,34,0,"exports"],[8,31,34,0],[9,4,34,0,"enumerable"],[9,14,34,0],[10,4,34,0,"get"],[10,7,34,0],[10,18,34,0,"get"],[10,19,34,0],[11,6,34,0],[11,13,34,0,"AuthProvider"],[11,25,34,0],[12,4,34,0],[13,2,34,0],[14,2,318,0,"Object"],[14,8,318,0],[14,9,318,0,"defineProperty"],[14,23,318,0],[14,24,318,0,"exports"],[14,31,318,0],[15,4,318,0,"enumerable"],[15,14,318,0],[16,4,318,0,"get"],[16,7,318,0],[16,18,318,0,"get"],[16,19,318,0],[17,6,318,0],[17,13,318,0,"useAuth"],[17,20,318,0],[18,4,318,0],[19,2,318,0],[20,2,1,0],[20,6,1,0,"_react"],[20,12,1,0],[20,15,1,0,"require"],[20,22,1,0],[20,23,1,0,"_dependencyMap"],[20,37,1,0],[21,2,2,0],[21,6,2,0,"_utilsStorage"],[21,19,2,0],[21,22,2,0,"require"],[21,29,2,0],[21,30,2,0,"_dependencyMap"],[21,44,2,0],[22,2,3,0],[22,6,3,0,"_utilsEncryption"],[22,22,3,0],[22,25,3,0,"require"],[22,32,3,0],[22,33,3,0,"_dependencyMap"],[22,47,3,0],[23,2,3,56],[23,6,3,56,"_reactJsxDevRuntime"],[23,25,3,56],[23,28,3,56,"require"],[23,35,3,56],[23,36,3,56,"_dependencyMap"],[23,50,3,56],[24,2,26,0],[24,8,26,6,"AuthContext"],[24,19,26,17],[24,35,26,20],[24,39,26,20,"createContext"],[24,45,26,33],[24,46,26,33,"createContext"],[24,59,26,33],[24,61,26,63,"undefined"],[24,70,26,72],[24,71,26,73],[25,2,32,0],[25,8,32,6,"API_BASE_URL"],[25,20,32,18],[25,23,32,21,"process"],[25,30,32,28],[25,31,32,29,"env"],[25,34,32,32],[25,35,32,33,"EXPO_PUBLIC_BACKEND_URL"],[25,58,32,56],[25,62,32,60],[25,64,32,62],[26,2,34,7],[26,8,34,13,"AuthProvider"],[26,20,34,54],[26,23,34,57,"AuthProvider"],[26,24,34,58],[27,4,34,60,"children"],[28,2,34,69],[28,3,34,70],[28,8,34,75],[29,4,35,2],[29,10,35,8],[29,11,35,9,"user"],[29,15,35,13],[29,17,35,15,"setUser"],[29,24,35,22],[29,25,35,23],[29,28,35,26],[29,32,35,26,"useState"],[29,38,35,34],[29,39,35,34,"useState"],[29,47,35,34],[29,49,35,48],[29,53,35,52],[29,54,35,53],[30,4,36,2],[30,10,36,8],[30,11,36,9,"isLoading"],[30,20,36,18],[30,22,36,20,"setIsLoading"],[30,34,36,32],[30,35,36,33],[30,38,36,36],[30,42,36,36,"useState"],[30,48,36,44],[30,49,36,44,"useState"],[30,57,36,44],[30,59,36,45],[30,63,36,49],[30,64,36,50],[31,4,37,2],[31,10,37,8],[31,11,37,9,"isFirstTime"],[31,22,37,20],[31,24,37,22,"setIsFirstTime"],[31,38,37,36],[31,39,37,37],[31,42,37,40],[31,46,37,40,"useState"],[31,52,37,48],[31,53,37,48,"useState"],[31,61,37,48],[31,63,37,49],[31,68,37,54],[31,69,37,55],[32,4,38,2],[32,10,38,8],[32,11,38,9,"masterKey"],[32,20,38,18],[32,22,38,20,"setMasterKeyState"],[32,39,38,37],[32,40,38,38],[32,43,38,41],[32,47,38,41,"useState"],[32,53,38,49],[32,54,38,49,"useState"],[32,62,38,49],[32,64,38,65],[32,68,38,69],[32,69,38,70],[33,4,40,2],[33,8,40,2,"useEffect"],[33,14,40,11],[33,15,40,11,"useEffect"],[33,24,40,11],[33,26,40,12],[33,32,40,18],[34,6,41,4,"initializeAuth"],[34,20,41,18],[34,21,41,19],[34,22,41,20],[35,4,42,2],[35,5,42,3],[35,7,42,5],[35,9,42,7],[35,10,42,8],[36,4,44,2],[36,10,44,8,"initializeAuth"],[36,24,44,22],[36,27,44,25],[36,33,44,25,"initializeAuth"],[36,34,44,25],[36,39,44,37],[37,6,45,4],[37,10,45,8],[38,8,46,6,"console"],[38,15,46,13],[38,16,46,14,"log"],[38,19,46,17],[38,20,46,18],[38,52,46,50],[38,53,46,51],[40,8,48,6],[41,8,49,6],[41,14,49,12,"userData"],[41,22,49,20],[41,25,49,23],[41,31,49,29,"SecureStorageService"],[41,44,49,49],[41,45,49,49,"SecureStorageService"],[41,65,49,49],[41,66,49,50,"getUserData"],[41,77,49,61],[41,78,49,62],[41,79,49,63],[42,8,50,6],[42,14,50,12,"token"],[42,19,50,17],[42,22,50,20],[42,28,50,26,"SecureStorageService"],[42,41,50,46],[42,42,50,46,"SecureStorageService"],[42,62,50,46],[42,63,50,47,"getAccessToken"],[42,77,50,61],[42,78,50,62],[42,79,50,63],[43,8,51,6],[43,14,51,12,"salt"],[43,18,51,16],[43,21,51,19],[43,27,51,25,"SecureStorageService"],[43,40,51,45],[43,41,51,45,"SecureStorageService"],[43,61,51,45],[43,62,51,46,"getUserSalt"],[43,73,51,57],[43,74,51,58],[43,75,51,59],[44,8,53,6,"console"],[44,15,53,13],[44,16,53,14,"log"],[44,19,53,17],[44,20,53,18],[44,38,53,36],[44,40,53,38],[45,10,53,40,"hasUserData"],[45,21,53,51],[45,23,53,53],[45,24,53,54],[45,25,53,55,"userData"],[45,33,53,63],[46,10,53,65,"hasToken"],[46,18,53,73],[46,20,53,75],[46,21,53,76],[46,22,53,77,"token"],[46,27,53,82],[47,10,53,84,"hasSalt"],[47,17,53,91],[47,19,53,93],[47,20,53,94],[47,21,53,95,"salt"],[48,8,53,100],[48,9,53,101],[48,10,53,102],[49,8,55,6],[49,12,55,10],[49,13,55,11,"userData"],[49,21,55,19],[49,25,55,23],[49,26,55,24,"salt"],[49,30,55,28],[49,32,55,30],[50,10,56,8,"console"],[50,17,56,15],[50,18,56,16,"log"],[50,21,56,19],[50,22,56,20],[50,70,56,68],[50,71,56,69],[51,10,57,8,"setIsFirstTime"],[51,24,57,22],[51,25,57,23],[51,29,57,27],[51,30,57,28],[52,10,58,8,"setIsLoading"],[52,22,58,20],[52,23,58,21],[52,28,58,26],[52,29,58,27],[53,10,59,8],[54,8,60,6],[55,8,62,6],[55,12,62,10,"token"],[55,17,62,15],[55,21,62,19,"userData"],[55,29,62,27],[55,31,62,29],[56,10,63,8],[56,14,63,12],[57,12,64,10],[58,12,65,10],[58,18,65,16,"response"],[58,26,65,24],[58,29,65,27],[58,35,65,33,"fetch"],[58,40,65,38],[58,41,65,39],[58,44,65,42,"API_BASE_URL"],[58,56,65,54],[58,75,65,73],[58,77,65,75],[59,14,66,12,"headers"],[59,21,66,19],[59,23,66,21],[60,16,67,14],[60,31,67,29],[60,33,67,31],[60,43,67,41,"token"],[60,48,67,46],[60,50,67,48],[61,16,68,14],[61,30,68,28],[61,32,68,30],[62,14,69,12],[63,12,70,10],[63,13,70,11],[63,14,70,12],[64,12,72,10],[64,16,72,14,"response"],[64,24,72,22],[64,25,72,23,"ok"],[64,27,72,25],[64,29,72,27],[65,14,73,12],[65,20,73,18,"userProfile"],[65,31,73,29],[65,34,73,32],[65,40,73,38,"response"],[65,48,73,46],[65,49,73,47,"json"],[65,53,73,51],[65,54,73,52],[65,55,73,53],[66,14,74,12,"setUser"],[66,21,74,19],[66,22,74,20,"userProfile"],[66,33,74,31],[66,34,74,32],[67,14,75,12,"console"],[67,21,75,19],[67,22,75,20,"log"],[67,25,75,23],[67,26,75,24],[67,63,75,61],[67,64,75,62],[69,14,77,12],[70,14,78,12],[70,20,78,18,"storedKey"],[70,29,78,27],[70,32,78,30],[70,38,78,36,"SecureStorageService"],[70,51,78,56],[70,52,78,56,"SecureStorageService"],[70,72,78,56],[70,73,78,57,"getMasterKey"],[70,85,78,69],[70,86,78,70],[70,87,78,71],[71,14,79,12],[71,18,79,16,"storedKey"],[71,27,79,25],[71,29,79,27],[72,16,80,14,"setMasterKeyState"],[72,33,80,31],[72,34,80,32,"storedKey"],[72,43,80,41],[72,44,80,42],[73,16,81,14,"console"],[73,23,81,21],[73,24,81,22,"log"],[73,27,81,25],[73,28,81,26],[73,62,81,60],[73,63,81,61],[74,14,82,12],[74,15,82,13],[74,21,82,19],[75,16,83,14,"console"],[75,23,83,21],[75,24,83,22,"log"],[75,27,83,25],[75,28,83,26],[75,60,83,58],[75,61,83,59],[76,14,84,12],[77,12,85,10],[77,13,85,11],[77,19,85,17],[78,14,86,12,"console"],[78,21,86,19],[78,22,86,20,"log"],[78,25,86,23],[78,26,86,24],[78,52,86,50],[78,54,86,52,"response"],[78,62,86,60],[78,63,86,61,"status"],[78,69,86,67],[78,70,86,68],[79,14,87,12],[80,14,88,12],[80,20,88,18,"SecureStorageService"],[80,33,88,38],[80,34,88,38,"SecureStorageService"],[80,54,88,38],[80,55,88,39,"clearAllData"],[80,67,88,51],[80,68,88,52],[80,69,88,53],[81,14,89,12,"setIsFirstTime"],[81,28,89,26],[81,29,89,27],[81,33,89,31],[81,34,89,32],[82,12,90,10],[83,10,91,8],[83,11,91,9],[83,12,91,10],[83,19,91,17,"error"],[83,24,91,22],[83,26,91,24],[84,12,92,10,"console"],[84,19,92,17],[84,20,92,18,"error"],[84,25,92,23],[84,26,92,24],[84,51,92,49],[84,53,92,51,"error"],[84,58,92,56],[84,59,92,57],[85,12,93,10],[86,12,94,10],[86,18,94,16,"SecureStorageService"],[86,31,94,36],[86,32,94,36,"SecureStorageService"],[86,52,94,36],[86,53,94,37,"clearAllData"],[86,65,94,49],[86,66,94,50],[86,67,94,51],[87,12,95,10,"setIsFirstTime"],[87,26,95,24],[87,27,95,25],[87,31,95,29],[87,32,95,30],[88,10,96,8],[89,8,97,6],[89,9,97,7],[89,15,97,13],[90,10,98,8,"console"],[90,17,98,15],[90,18,98,16,"log"],[90,21,98,19],[90,22,98,20],[90,50,98,48],[90,51,98,49],[91,10,99,8,"setIsFirstTime"],[91,24,99,22],[91,25,99,23],[91,29,99,27],[91,30,99,28],[92,8,100,6],[93,6,101,4],[93,7,101,5],[93,8,101,6],[93,15,101,13,"error"],[93,20,101,18],[93,22,101,20],[94,8,102,6,"console"],[94,15,102,13],[94,16,102,14,"error"],[94,21,102,19],[94,22,102,20],[94,50,102,48],[94,52,102,50,"error"],[94,57,102,55],[94,58,102,56],[95,8,103,6],[96,8,104,6],[96,12,104,10],[97,10,105,8],[97,16,105,14,"SecureStorageService"],[97,29,105,34],[97,30,105,34,"SecureStorageService"],[97,50,105,34],[97,51,105,35,"clearAllData"],[97,63,105,47],[97,64,105,48],[97,65,105,49],[98,8,106,6],[98,9,106,7],[98,10,106,8],[98,17,106,15,"clearError"],[98,27,106,25],[98,29,106,27],[99,10,107,8,"console"],[99,17,107,15],[99,18,107,16,"error"],[99,23,107,21],[99,24,107,22],[99,46,107,44],[99,48,107,46,"clearError"],[99,58,107,56],[99,59,107,57],[100,8,108,6],[101,8,109,6,"setIsFirstTime"],[101,22,109,20],[101,23,109,21],[101,27,109,25],[101,28,109,26],[102,6,110,4],[102,7,110,5],[102,16,110,14],[103,8,111,6,"setIsLoading"],[103,20,111,18],[103,21,111,19],[103,26,111,24],[103,27,111,25],[104,6,112,4],[105,4,113,2],[105,5,113,3],[106,4,115,2],[106,10,115,8,"register"],[106,18,115,16],[106,21,115,19],[106,27,115,19,"register"],[106,28,116,4,"email"],[106,33,116,17],[106,35,117,4,"password"],[106,43,117,20],[106,45,118,4,"biometricEnabled"],[106,61,118,29],[106,66,119,22],[107,6,120,4],[107,10,120,8],[108,8,121,6,"setIsLoading"],[108,20,121,18],[108,21,121,19],[108,25,121,23],[108,26,121,24],[110,8,123,6],[111,8,124,6],[111,14,124,12,"salt"],[111,18,124,16],[111,21,124,19,"EncryptionService"],[111,37,124,36],[111,38,124,36,"EncryptionService"],[111,55,124,36],[111,56,124,37,"generateSalt"],[111,68,124,49],[111,69,124,50],[111,70,124,51],[113,8,126,6],[114,8,127,6],[114,14,127,12,"masterPasswordHash"],[114,32,127,30],[114,35,127,33],[114,41,127,39,"EncryptionService"],[114,57,127,56],[114,58,127,56,"EncryptionService"],[114,75,127,56],[114,76,127,57,"hashMasterPassword"],[114,94,127,75],[114,95,127,76,"password"],[114,103,127,84],[114,105,127,86,"salt"],[114,109,127,90],[114,110,127,91],[116,8,129,6],[117,8,130,6],[117,14,130,12,"encryptionKey"],[117,27,130,25],[117,30,130,28],[117,36,130,34,"EncryptionService"],[117,52,130,51],[117,53,130,51,"EncryptionService"],[117,70,130,51],[117,71,130,52,"deriveKey"],[117,80,130,61],[117,81,130,62,"password"],[117,89,130,70],[117,91,130,72,"salt"],[117,95,130,76],[117,96,130,77],[118,8,132,6,"console"],[118,15,132,13],[118,16,132,14,"log"],[118,19,132,17],[118,20,132,18],[118,50,132,48],[118,52,132,50,"email"],[118,57,132,55],[118,58,132,56],[119,8,134,6],[119,14,134,12,"response"],[119,22,134,20],[119,25,134,23],[119,31,134,29,"fetch"],[119,36,134,34],[119,37,134,35],[119,40,134,38,"API_BASE_URL"],[119,52,134,50],[119,72,134,70],[119,74,134,72],[120,10,135,8,"method"],[120,16,135,14],[120,18,135,16],[120,24,135,22],[121,10,136,8,"headers"],[121,17,136,15],[121,19,136,17],[122,12,137,10],[122,26,137,24],[122,28,137,26],[123,10,138,8],[123,11,138,9],[124,10,139,8,"body"],[124,14,139,12],[124,16,139,14,"JSON"],[124,20,139,18],[124,21,139,19,"stringify"],[124,30,139,28],[124,31,139,29],[125,12,140,10,"email"],[125,17,140,15],[126,12,141,10,"master_password_hash"],[126,32,141,30],[126,34,141,32,"masterPasswordHash"],[126,52,141,50],[127,12,142,10,"biometric_enabled"],[127,29,142,27],[127,31,142,29,"biometricEnabled"],[128,10,143,8],[128,11,143,9],[129,8,144,6],[129,9,144,7],[129,10,144,8],[130,8,146,6],[130,14,146,12,"responseText"],[130,26,146,24],[130,29,146,27],[130,35,146,33,"response"],[130,43,146,41],[130,44,146,42,"text"],[130,48,146,46],[130,49,146,47],[130,50,146,48],[131,8,147,6,"console"],[131,15,147,13],[131,16,147,14,"log"],[131,19,147,17],[131,20,147,18],[131,44,147,42],[131,46,147,44,"response"],[131,54,147,52],[131,55,147,53,"status"],[131,61,147,59],[131,63,147,61,"responseText"],[131,75,147,73],[131,76,147,74],[132,8,149,6],[132,12,149,10],[132,13,149,11,"response"],[132,21,149,19],[132,22,149,20,"ok"],[132,24,149,22],[132,26,149,24],[133,10,150,8],[133,14,150,12,"errorMessage"],[133,26,150,24],[133,29,150,27],[133,48,150,46],[134,10,151,8],[134,14,151,12],[135,12,152,10],[135,18,152,16,"error"],[135,23,152,21],[135,26,152,24,"JSON"],[135,30,152,28],[135,31,152,29,"parse"],[135,36,152,34],[135,37,152,35,"responseText"],[135,49,152,47],[135,50,152,48],[136,12,153,10,"errorMessage"],[136,24,153,22],[136,27,153,25,"error"],[136,32,153,30],[136,33,153,31,"detail"],[136,39,153,37],[136,43,153,41,"errorMessage"],[136,55,153,53],[137,10,154,8],[137,11,154,9],[137,12,154,10],[137,19,154,17,"parseError"],[137,29,154,27],[137,31,154,29],[138,12,155,10,"console"],[138,19,155,17],[138,20,155,18,"error"],[138,25,155,23],[138,26,155,24],[138,51,155,49],[138,53,155,51,"parseError"],[138,63,155,61],[138,64,155,62],[139,12,156,10,"errorMessage"],[139,24,156,22],[139,27,156,25],[139,35,156,33,"response"],[139,43,156,41],[139,44,156,42,"status"],[139,50,156,48],[139,55,156,53,"responseText"],[139,67,156,65],[139,69,156,67],[140,10,157,8],[141,10,158,8],[141,16,158,14],[141,20,158,18,"Error"],[141,25,158,23],[141,26,158,24,"errorMessage"],[141,38,158,36],[141,39,158,37],[142,8,159,6],[143,8,161,6],[143,14,161,12,"data"],[143,18,161,16],[143,21,161,19,"JSON"],[143,25,161,23],[143,26,161,24,"parse"],[143,31,161,29],[143,32,161,30,"responseText"],[143,44,161,42],[143,45,161,43],[145,8,163,6],[146,8,164,6],[146,14,164,12,"SecureStorageService"],[146,27,164,32],[146,28,164,32,"SecureStorageService"],[146,48,164,32],[146,49,164,33,"storeAccessToken"],[146,65,164,49],[146,66,164,50,"data"],[146,70,164,54],[146,71,164,55,"access_token"],[146,83,164,67],[146,84,164,68],[147,8,165,6],[147,14,165,12,"SecureStorageService"],[147,27,165,32],[147,28,165,32,"SecureStorageService"],[147,48,165,32],[147,49,165,33,"storeUserData"],[147,62,165,46],[147,63,165,47,"data"],[147,67,165,51],[147,68,165,52,"user"],[147,72,165,56],[147,73,165,57],[148,8,166,6],[148,14,166,12,"SecureStorageService"],[148,27,166,32],[148,28,166,32,"SecureStorageService"],[148,48,166,32],[148,49,166,33,"storeUserSalt"],[148,62,166,46],[148,63,166,47,"salt"],[148,67,166,51],[148,68,166,52],[149,8,167,6],[149,14,167,12,"SecureStorageService"],[149,27,167,32],[149,28,167,32,"SecureStorageService"],[149,48,167,32],[149,49,167,33,"storeMasterKey"],[149,63,167,47],[149,64,167,48,"encryptionKey"],[149,77,167,61],[149,78,167,62],[150,8,168,6],[150,14,168,12,"SecureStorageService"],[150,27,168,32],[150,28,168,32,"SecureStorageService"],[150,48,168,32],[150,49,168,33,"setBiometricEnabled"],[150,68,168,52],[150,69,168,53,"biometricEnabled"],[150,85,168,69],[150,86,168,70],[152,8,170,6],[153,8,171,6],[153,12,171,10,"biometricEnabled"],[153,28,171,26],[153,30,171,28],[154,10,172,8],[154,16,172,14,"SecureStorageService"],[154,29,172,34],[154,30,172,34,"SecureStorageService"],[154,50,172,34],[154,51,172,35,"storeBiometricKey"],[154,68,172,52],[154,69,172,53,"encryptionKey"],[154,82,172,66],[154,83,172,67],[155,8,173,6],[156,8,175,6,"setUser"],[156,15,175,13],[156,16,175,14,"data"],[156,20,175,18],[156,21,175,19,"user"],[156,25,175,23],[156,26,175,24],[157,8,176,6,"setMasterKeyState"],[157,25,176,23],[157,26,176,24,"encryptionKey"],[157,39,176,37],[157,40,176,38],[158,8,177,6,"setIsFirstTime"],[158,22,177,20],[158,23,177,21],[158,28,177,26],[158,29,177,27],[159,8,179,6,"console"],[159,15,179,13],[159,16,179,14,"log"],[159,19,179,17],[159,20,179,18],[159,50,179,48],[159,52,179,50,"email"],[159,57,179,55],[159,58,179,56],[160,6,180,4],[160,7,180,5],[160,8,180,6],[160,15,180,13,"error"],[160,20,180,18],[160,22,180,20],[161,8,181,6,"console"],[161,15,181,13],[161,16,181,14,"error"],[161,21,181,19],[161,22,181,20],[161,43,181,41],[161,45,181,43,"error"],[161,50,181,48],[161,51,181,49],[162,8,182,6],[162,14,182,12,"error"],[162,19,182,17],[163,6,183,4],[163,7,183,5],[163,16,183,14],[164,8,184,6,"setIsLoading"],[164,20,184,18],[164,21,184,19],[164,26,184,24],[164,27,184,25],[165,6,185,4],[166,4,186,2],[166,5,186,3],[167,4,188,2],[167,10,188,8,"login"],[167,15,188,13],[167,18,188,16],[167,24,188,16,"login"],[167,25,188,23,"email"],[167,30,188,36],[167,32,188,38,"password"],[167,40,188,54],[167,45,188,74],[168,6,189,4],[168,10,189,8],[169,8,190,6,"setIsLoading"],[169,20,190,18],[169,21,190,19],[169,25,190,23],[169,26,190,24],[170,8,191,6,"console"],[170,15,191,13],[170,16,191,14,"log"],[170,19,191,17],[170,20,191,18],[170,49,191,47],[170,51,191,49,"email"],[170,56,191,54],[170,57,191,55],[172,8,193,6],[173,8,194,6],[173,12,194,10,"salt"],[173,16,194,14],[173,19,194,17],[173,25,194,23,"SecureStorageService"],[173,38,194,43],[173,39,194,43,"SecureStorageService"],[173,59,194,43],[173,60,194,44,"getUserSalt"],[173,71,194,55],[173,72,194,56],[173,73,194,57],[174,8,196,6],[174,12,196,10],[174,13,196,11,"salt"],[174,17,196,15],[174,19,196,17],[175,10,197,8,"console"],[175,17,197,15],[175,18,197,16,"log"],[175,21,197,19],[175,22,197,20],[175,57,197,55],[175,58,197,56],[176,10,198,8],[177,10,199,8],[178,10,200,8,"Alert"],[178,15,200,13],[178,16,200,14,"alert"],[178,21,200,19],[178,22,201,10],[178,45,201,33],[178,47,202,10],[178,133,202,96],[178,135,203,10],[178,136,203,11],[179,12,203,13,"text"],[179,16,203,17],[179,18,203,19],[180,10,203,24],[180,11,203,25],[180,12,204,8],[180,13,204,9],[181,10,205,8,"setIsFirstTime"],[181,24,205,22],[181,25,205,23],[181,29,205,27],[181,30,205,28],[182,10,206,8],[183,8,207,6],[184,8,209,6,"console"],[184,15,209,13],[184,16,209,14,"log"],[184,19,209,17],[184,20,209,18],[184,49,209,47],[184,50,209,48],[186,8,211,6],[187,8,212,6],[187,14,212,12,"masterPasswordHash"],[187,32,212,30],[187,35,212,33],[187,41,212,39,"EncryptionService"],[187,57,212,56],[187,58,212,56,"EncryptionService"],[187,75,212,56],[187,76,212,57,"hashMasterPassword"],[187,94,212,75],[187,95,212,76,"password"],[187,103,212,84],[187,105,212,86,"salt"],[187,109,212,90],[187,110,212,91],[189,8,214,6],[190,8,215,6],[190,14,215,12,"encryptionKey"],[190,27,215,25],[190,30,215,28],[190,36,215,34,"EncryptionService"],[190,52,215,51],[190,53,215,51,"EncryptionService"],[190,70,215,51],[190,71,215,52,"deriveKey"],[190,80,215,61],[190,81,215,62,"password"],[190,89,215,70],[190,91,215,72,"salt"],[190,95,215,76],[190,96,215,77],[191,8,217,6,"console"],[191,15,217,13],[191,16,217,14,"log"],[191,19,217,17],[191,20,217,18],[191,59,217,57],[191,60,217,58],[192,8,219,6],[192,14,219,12,"response"],[192,22,219,20],[192,25,219,23],[192,31,219,29,"fetch"],[192,36,219,34],[192,37,219,35],[192,40,219,38,"API_BASE_URL"],[192,52,219,50],[192,69,219,67],[192,71,219,69],[193,10,220,8,"method"],[193,16,220,14],[193,18,220,16],[193,24,220,22],[194,10,221,8,"headers"],[194,17,221,15],[194,19,221,17],[195,12,222,10],[195,26,222,24],[195,28,222,26],[196,10,223,8],[196,11,223,9],[197,10,224,8,"body"],[197,14,224,12],[197,16,224,14,"JSON"],[197,20,224,18],[197,21,224,19,"stringify"],[197,30,224,28],[197,31,224,29],[198,12,225,10,"email"],[198,17,225,15],[199,12,226,10,"master_password_hash"],[199,32,226,30],[199,34,226,32,"masterPasswordHash"],[200,10,227,8],[200,11,227,9],[201,8,228,6],[201,9,228,7],[201,10,228,8],[202,8,230,6],[202,14,230,12,"responseText"],[202,26,230,24],[202,29,230,27],[202,35,230,33,"response"],[202,43,230,41],[202,44,230,42,"text"],[202,48,230,46],[202,49,230,47],[202,50,230,48],[203,8,231,6,"console"],[203,15,231,13],[203,16,231,14,"log"],[203,19,231,17],[203,20,231,18],[203,37,231,35],[203,39,231,37,"response"],[203,47,231,45],[203,48,231,46,"status"],[203,54,231,52],[203,56,231,54,"responseText"],[203,68,231,66],[203,69,231,67],[204,8,233,6],[204,12,233,10],[204,13,233,11,"response"],[204,21,233,19],[204,22,233,20,"ok"],[204,24,233,22],[204,26,233,24],[205,10,234,8],[205,14,234,12,"errorMessage"],[205,26,234,24],[205,29,234,27],[205,52,234,50],[206,10,235,8],[206,14,235,12],[207,12,236,10],[207,18,236,16,"error"],[207,23,236,21],[207,26,236,24,"JSON"],[207,30,236,28],[207,31,236,29,"parse"],[207,36,236,34],[207,37,236,35,"responseText"],[207,49,236,47],[207,50,236,48],[208,12,237,10,"errorMessage"],[208,24,237,22],[208,27,237,25,"error"],[208,32,237,30],[208,33,237,31,"detail"],[208,39,237,37],[208,43,237,41,"errorMessage"],[208,55,237,53],[209,10,238,8],[209,11,238,9],[209,12,238,10],[209,19,238,17,"parseError"],[209,29,238,27],[209,31,238,29],[210,12,239,10,"console"],[210,19,239,17],[210,20,239,18,"error"],[210,25,239,23],[210,26,239,24],[210,57,239,55],[210,59,239,57,"parseError"],[210,69,239,67],[210,70,239,68],[211,10,240,8],[212,10,242,8],[212,14,242,12,"response"],[212,22,242,20],[212,23,242,21,"status"],[212,29,242,27],[212,34,242,32],[212,37,242,35],[212,39,242,37],[213,12,243,10],[214,12,244,10,"console"],[214,19,244,17],[214,20,244,18,"log"],[214,23,244,21],[214,24,244,22],[214,61,244,59],[214,62,244,60],[215,12,245,10],[215,18,245,16,"SecureStorageService"],[215,31,245,36],[215,32,245,36,"SecureStorageService"],[215,52,245,36],[215,53,245,37,"clearAllData"],[215,65,245,49],[215,66,245,50],[215,67,245,51],[216,12,246,10,"setIsFirstTime"],[216,26,246,24],[216,27,246,25],[216,31,246,29],[216,32,246,30],[217,12,247,10,"errorMessage"],[217,24,247,22],[217,27,247,25],[217,108,247,106],[218,10,248,8],[219,10,250,8],[219,16,250,14],[219,20,250,18,"Error"],[219,25,250,23],[219,26,250,24,"errorMessage"],[219,38,250,36],[219,39,250,37],[220,8,251,6],[221,8,253,6],[221,14,253,12,"data"],[221,18,253,16],[221,21,253,19,"JSON"],[221,25,253,23],[221,26,253,24,"parse"],[221,31,253,29],[221,32,253,30,"responseText"],[221,44,253,42],[221,45,253,43],[222,8,254,6,"console"],[222,15,254,13],[222,16,254,14,"log"],[222,19,254,17],[222,20,254,18],[222,38,254,36],[222,39,254,37],[224,8,256,6],[225,8,257,6],[225,14,257,12,"SecureStorageService"],[225,27,257,32],[225,28,257,32,"SecureStorageService"],[225,48,257,32],[225,49,257,33,"storeAccessToken"],[225,65,257,49],[225,66,257,50,"data"],[225,70,257,54],[225,71,257,55,"access_token"],[225,83,257,67],[225,84,257,68],[226,8,258,6],[226,14,258,12,"SecureStorageService"],[226,27,258,32],[226,28,258,32,"SecureStorageService"],[226,48,258,32],[226,49,258,33,"storeUserData"],[226,62,258,46],[226,63,258,47,"data"],[226,67,258,51],[226,68,258,52,"user"],[226,72,258,56],[226,73,258,57],[227,8,259,6],[227,14,259,12,"SecureStorageService"],[227,27,259,32],[227,28,259,32,"SecureStorageService"],[227,48,259,32],[227,49,259,33,"storeMasterKey"],[227,63,259,47],[227,64,259,48,"encryptionKey"],[227,77,259,61],[227,78,259,62],[228,8,261,6,"setUser"],[228,15,261,13],[228,16,261,14,"data"],[228,20,261,18],[228,21,261,19,"user"],[228,25,261,23],[228,26,261,24],[229,8,262,6,"setMasterKeyState"],[229,25,262,23],[229,26,262,24,"encryptionKey"],[229,39,262,37],[229,40,262,38],[230,8,264,6,"console"],[230,15,264,13],[230,16,264,14,"log"],[230,19,264,17],[230,20,264,18],[230,50,264,48],[230,51,264,49],[231,6,265,4],[231,7,265,5],[231,8,265,6],[231,15,265,13,"error"],[231,20,265,18],[231,22,265,20],[232,8,266,6,"console"],[232,15,266,13],[232,16,266,14,"error"],[232,21,266,19],[232,22,266,20],[232,36,266,34],[232,38,266,36,"error"],[232,43,266,41],[232,44,266,42],[233,8,267,6],[233,14,267,12,"error"],[233,19,267,17],[234,6,268,4],[234,7,268,5],[234,16,268,14],[235,8,269,6,"setIsLoading"],[235,20,269,18],[235,21,269,19],[235,26,269,24],[235,27,269,25],[236,6,270,4],[237,4,271,2],[237,5,271,3],[238,4,273,2],[238,10,273,8,"logout"],[238,16,273,14],[238,19,273,17],[238,25,273,17,"logout"],[238,26,273,17],[238,31,273,44],[239,6,274,4],[239,10,274,8],[240,8,275,6],[240,14,275,12,"SecureStorageService"],[240,27,275,32],[240,28,275,32,"SecureStorageService"],[240,48,275,32],[240,49,275,33,"clearAllData"],[240,61,275,45],[240,62,275,46],[240,63,275,47],[241,8,276,6,"setUser"],[241,15,276,13],[241,16,276,14],[241,20,276,18],[241,21,276,19],[242,8,277,6,"setMasterKeyState"],[242,25,277,23],[242,26,277,24],[242,30,277,28],[242,31,277,29],[243,6,278,4],[243,7,278,5],[243,8,278,6],[243,15,278,13,"error"],[243,20,278,18],[243,22,278,20],[244,8,279,6,"console"],[244,15,279,13],[244,16,279,14,"error"],[244,21,279,19],[244,22,279,20],[244,37,279,35],[244,39,279,37,"error"],[244,44,279,42],[244,45,279,43],[245,6,280,4],[246,4,281,2],[246,5,281,3],[247,4,283,2],[247,10,283,8,"setMasterKey"],[247,22,283,20],[247,25,283,24,"key"],[247,28,283,35],[247,32,283,40],[248,6,284,4,"setMasterKeyState"],[248,23,284,21],[248,24,284,22,"key"],[248,27,284,25],[248,28,284,26],[249,4,285,2],[249,5,285,3],[250,4,287,2],[250,10,287,8,"setBiometricRecovery"],[250,30,287,28],[250,33,287,31],[250,39,287,38,"enabled"],[250,46,287,54],[250,50,287,74],[251,6,288,4],[251,10,288,8],[252,8,289,6],[252,12,289,10,"enabled"],[252,19,289,17],[252,23,289,21,"masterKey"],[252,32,289,30],[252,34,289,32],[253,10,290,8],[253,16,290,14,"SecureStorageService"],[253,29,290,34],[253,30,290,34,"SecureStorageService"],[253,50,290,34],[253,51,290,35,"storeBiometricKey"],[253,68,290,52],[253,69,290,53,"masterKey"],[253,78,290,62],[253,79,290,63],[254,8,291,6],[255,8,292,6],[255,14,292,12,"SecureStorageService"],[255,27,292,32],[255,28,292,32,"SecureStorageService"],[255,48,292,32],[255,49,292,33,"setBiometricEnabled"],[255,68,292,52],[255,69,292,53,"enabled"],[255,76,292,60],[255,77,292,61],[256,8,294,6],[256,12,294,10,"user"],[256,16,294,14],[256,18,294,16],[257,10,295,8,"setUser"],[257,17,295,15],[257,18,295,16],[258,12,295,18],[258,15,295,21,"user"],[258,19,295,25],[259,12,295,27,"biometric_enabled"],[259,29,295,44],[259,31,295,46,"enabled"],[260,10,295,54],[260,11,295,55],[260,12,295,56],[261,8,296,6],[262,6,297,4],[262,7,297,5],[262,8,297,6],[262,15,297,13,"error"],[262,20,297,18],[262,22,297,20],[263,8,298,6,"console"],[263,15,298,13],[263,16,298,14,"error"],[263,21,298,19],[263,22,298,20],[263,46,298,44],[263,48,298,46,"error"],[263,53,298,51],[263,54,298,52],[264,8,299,6],[264,14,299,12,"error"],[264,19,299,17],[265,6,300,4],[266,4,301,2],[266,5,301,3],[267,4,303,2],[267,10,303,8,"value"],[267,15,303,30],[267,18,303,33],[268,6,304,4,"user"],[268,10,304,8],[269,6,305,4,"isLoading"],[269,15,305,13],[270,6,306,4,"isFirstTime"],[270,17,306,15],[271,6,307,4,"masterKey"],[271,15,307,13],[272,6,308,4,"login"],[272,11,308,9],[273,6,309,4,"register"],[273,14,309,12],[274,6,310,4,"logout"],[274,12,310,10],[275,6,311,4,"setMasterKey"],[275,18,311,16],[276,6,312,4,"setBiometricRecovery"],[277,4,313,2],[277,5,313,3],[278,4,315,2],[278,24,315,9],[278,28,315,9,"_reactJsxDevRuntime"],[278,47,315,9],[278,48,315,9,"jsxDEV"],[278,54,315,9],[278,56,315,10,"AuthContext"],[278,67,315,21],[278,68,315,22,"Provider"],[278,76,315,30],[279,6,315,31,"value"],[279,11,315,36],[279,13,315,38,"value"],[279,18,315,44],[280,6,315,44,"children"],[280,14,315,44],[280,16,315,46,"children"],[281,4,315,54],[282,6,315,54,"fileName"],[282,14,315,54],[282,16,315,54,"_jsxFileName"],[282,28,315,54],[283,6,315,54,"lineNumber"],[283,16,315,54],[284,6,315,54,"columnNumber"],[284,18,315,54],[285,4,315,54],[285,11,315,77],[285,12,315,78],[286,2,316,0],[286,3,316,1],[287,2,318,7],[287,8,318,13,"useAuth"],[287,15,318,20],[287,18,318,23,"useAuth"],[287,19,318,23],[287,24,318,46],[288,4,319,2],[288,10,319,8,"context"],[288,17,319,15],[288,20,319,18],[288,24,319,18,"useContext"],[288,30,319,28],[288,31,319,28,"useContext"],[288,41,319,28],[288,43,319,29,"AuthContext"],[288,54,319,40],[288,55,319,41],[289,4,320,2],[289,8,320,6,"context"],[289,15,320,13],[289,20,320,18,"undefined"],[289,29,320,27],[289,31,320,29],[290,6,321,4],[290,12,321,10],[290,16,321,14,"Error"],[290,21,321,19],[290,22,321,20],[290,67,321,65],[290,68,321,66],[291,4,322,2],[292,4,323,2],[292,11,323,9,"context"],[292,18,323,16],[293,2,324,0],[293,3,324,1],[294,0,324,2],[294,3]],"functionMap":{"names":["<global>","AuthProvider","useEffect$argument_0","initializeAuth","register","login","logout","setMasterKey","setBiometricRecovery","useAuth"],"mappings":"AAA;yDCiC;YCM;GDE;yBEE;GFqE;mBGE;GHuE;gBIE;GJmF;iBKE;GLQ;uBME;GNE;+BOE;GPc;CDe;uBSE;CTM"},"hasCjsExports":false},"type":"js/module"}]}