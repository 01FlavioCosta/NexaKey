{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../utils/storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":56,"index":146}}],"key":"rswhtWQFlk40P6/ZSXiz3NZSC0I=","exportNames":["*"],"imports":1}},{"name":"../utils/encryption","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":147},"end":{"line":3,"column":56,"index":203}}],"key":"Wlvn+1B4yqF3uisuH0wrMQSpnGk=","exportNames":["*"],"imports":1}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _jsxFileName = \"/app/frontend/contexts/AuthContext.tsx\";\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"AuthProvider\", {\n    enumerable: true,\n    get: function () {\n      return AuthProvider;\n    }\n  });\n  Object.defineProperty(exports, \"useAuth\", {\n    enumerable: true,\n    get: function () {\n      return useAuth;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _utilsStorage = require(_dependencyMap[1], \"../utils/storage\");\n  var _utilsEncryption = require(_dependencyMap[2], \"../utils/encryption\");\n  var _reactJsxDevRuntime = require(_dependencyMap[3], \"react/jsx-dev-runtime\");\n  const AuthContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const API_BASE_URL = process.env.EXPO_PUBLIC_BACKEND_URL || '';\n  const AuthProvider = ({\n    children\n  }) => {\n    const [user, setUser] = (0, _react.useState)(null);\n    const [isLoading, setIsLoading] = (0, _react.useState)(true);\n    const [isFirstTime, setIsFirstTime] = (0, _react.useState)(false);\n    const [masterKey, setMasterKeyState] = (0, _react.useState)(null);\n    (0, _react.useEffect)(() => {\n      initializeAuth();\n    }, []);\n    const initializeAuth = async () => {\n      try {\n        console.log('üîç Initializing auth...');\n\n        // Always check for existing user data first\n        const userData = await _utilsStorage.SecureStorageService.getUserData();\n        const token = await _utilsStorage.SecureStorageService.getAccessToken();\n        console.log('üì± Storage check:', {\n          hasUserData: !!userData,\n          hasToken: !!token,\n          userEmail: userData?.email\n        });\n\n        // If we have both user data and token, try to validate\n        if (userData && token) {\n          console.log('üîë Found existing auth data, validating...');\n          try {\n            const response = await fetch(`${API_BASE_URL}/api/user/profile`, {\n              headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json'\n              }\n            });\n            if (response.ok) {\n              const userProfile = await response.json();\n              console.log('‚úÖ Token valid, restoring user session');\n              setUser(userProfile);\n\n              // Try to restore master key\n              const storedKey = await _utilsStorage.SecureStorageService.getMasterKey();\n              if (storedKey) {\n                setMasterKeyState(storedKey);\n                console.log('üîê Master key restored');\n              }\n\n              // User is logged in, skip onboarding\n              setIsFirstTime(false);\n              setIsLoading(false);\n              return;\n            } else {\n              console.log('‚ùå Token invalid, clearing data');\n              await _utilsStorage.SecureStorageService.clearAllData();\n            }\n          } catch (error) {\n            console.error('üö® Token validation failed:', error);\n            await _utilsStorage.SecureStorageService.clearAllData();\n          }\n        }\n\n        // Check if this is truly first time (no user data at all)\n        if (!userData) {\n          console.log('üëã First time user, showing onboarding');\n          setIsFirstTime(true);\n        } else {\n          console.log('üîí Existing user, showing login');\n          setIsFirstTime(false);\n        }\n      } catch (error) {\n        console.error('üí• Auth initialization error:', error);\n        // On error, show onboarding to be safe\n        setIsFirstTime(true);\n      } finally {\n        setIsLoading(false);\n        console.log('‚úÖ Auth initialization complete');\n      }\n    };\n    const register = async (email, password, biometricEnabled) => {\n      try {\n        setIsLoading(true);\n\n        // Generate salt for this user\n        const salt = _utilsEncryption.EncryptionService.generateSalt();\n\n        // Hash master password for server storage\n        const masterPasswordHash = await _utilsEncryption.EncryptionService.hashMasterPassword(password, salt);\n\n        // Derive encryption key for client-side encryption\n        const encryptionKey = await _utilsEncryption.EncryptionService.deriveKey(password, salt);\n        console.log('Registering user with email:', email);\n        const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            master_password_hash: masterPasswordHash,\n            biometric_enabled: biometricEnabled\n          })\n        });\n        const responseText = await response.text();\n        console.log('Registration response:', response.status, responseText);\n        if (!response.ok) {\n          let errorMessage = 'Falha no registro';\n          try {\n            const error = JSON.parse(responseText);\n            errorMessage = error.detail || errorMessage;\n          } catch (parseError) {\n            console.error('Error parsing response:', parseError);\n            errorMessage = `Erro ${response.status}: ${responseText}`;\n          }\n          throw new Error(errorMessage);\n        }\n        const data = JSON.parse(responseText);\n\n        // Store user data and tokens\n        await _utilsStorage.SecureStorageService.storeAccessToken(data.access_token);\n        await _utilsStorage.SecureStorageService.storeUserData(data.user);\n        await _utilsStorage.SecureStorageService.storeUserSalt(salt);\n        await _utilsStorage.SecureStorageService.storeMasterKey(encryptionKey);\n        await _utilsStorage.SecureStorageService.setBiometricEnabled(biometricEnabled);\n\n        // If biometric enabled, store recovery key\n        if (biometricEnabled) {\n          await _utilsStorage.SecureStorageService.storeBiometricKey(encryptionKey);\n        }\n        setUser(data.user);\n        setMasterKeyState(encryptionKey);\n        setIsFirstTime(false);\n        console.log('Registration successful for:', email);\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const login = async (email, password) => {\n      try {\n        setIsLoading(true);\n        console.log('Starting login process for:', email);\n\n        // Get stored salt - this is critical for consistency\n        let salt = await _utilsStorage.SecureStorageService.getUserSalt();\n        if (!salt) {\n          console.log('No salt found, generating new one');\n          // If no salt is stored, we need to handle this case\n          // For now, let's try with a fallback approach\n          Alert.alert('Dados N√£o Encontrados', 'N√£o foi poss√≠vel encontrar os dados de login. Voc√™ precisar√° se registrar novamente.', [{\n            text: 'OK'\n          }]);\n          setIsFirstTime(true);\n          return;\n        }\n        console.log('Using stored salt for login');\n\n        // Hash password for server verification - ensure consistency\n        const masterPasswordHash = await _utilsEncryption.EncryptionService.hashMasterPassword(password, salt);\n\n        // Derive encryption key - must be identical to registration\n        const encryptionKey = await _utilsEncryption.EncryptionService.deriveKey(password, salt);\n        console.log('Attempting login with hashed password');\n        const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            master_password_hash: masterPasswordHash\n          })\n        });\n        const responseText = await response.text();\n        console.log('Login response:', response.status, responseText);\n        if (!response.ok) {\n          let errorMessage = 'Credenciais inv√°lidas';\n          try {\n            const error = JSON.parse(responseText);\n            errorMessage = error.detail || errorMessage;\n          } catch (parseError) {\n            console.error('Error parsing login response:', parseError);\n          }\n          if (response.status === 401) {\n            // Clear potentially corrupted data\n            console.log('Login failed - clearing stored data');\n            await _utilsStorage.SecureStorageService.clearAllData();\n            setIsFirstTime(true);\n            errorMessage = 'Credenciais inv√°lidas. Dados locais foram limpos. Tente se registrar novamente.';\n          }\n          throw new Error(errorMessage);\n        }\n        const data = JSON.parse(responseText);\n        console.log('Login successful');\n\n        // Store user data and tokens\n        await _utilsStorage.SecureStorageService.storeAccessToken(data.access_token);\n        await _utilsStorage.SecureStorageService.storeUserData(data.user);\n        await _utilsStorage.SecureStorageService.storeMasterKey(encryptionKey);\n        setUser(data.user);\n        setMasterKeyState(encryptionKey);\n        console.log('Login completed successfully');\n      } catch (error) {\n        console.error('Login error:', error);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const logout = async () => {\n      try {\n        await _utilsStorage.SecureStorageService.clearAllData();\n        setUser(null);\n        setMasterKeyState(null);\n      } catch (error) {\n        console.error('Logout error:', error);\n      }\n    };\n    const setMasterKey = key => {\n      setMasterKeyState(key);\n    };\n    const setBiometricRecovery = async enabled => {\n      try {\n        if (enabled && masterKey) {\n          await _utilsStorage.SecureStorageService.storeBiometricKey(masterKey);\n        }\n        await _utilsStorage.SecureStorageService.setBiometricEnabled(enabled);\n        if (user) {\n          setUser({\n            ...user,\n            biometric_enabled: enabled\n          });\n        }\n      } catch (error) {\n        console.error('Biometric setup error:', error);\n        throw error;\n      }\n    };\n    const value = {\n      user,\n      isLoading,\n      isFirstTime,\n      masterKey,\n      login,\n      register,\n      logout,\n      setMasterKey,\n      setBiometricRecovery\n    };\n    return /*#__PURE__*/(0, _reactJsxDevRuntime.jsxDEV)(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 10\n    }, this);\n  };\n  const useAuth = () => {\n    const context = (0, _react.useContext)(AuthContext);\n    if (context === undefined) {\n      throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n  };\n});","lineCount":290,"map":[[8,2,34,0,"Object"],[8,8,34,0],[8,9,34,0,"defineProperty"],[8,23,34,0],[8,24,34,0,"exports"],[8,31,34,0],[9,4,34,0,"enumerable"],[9,14,34,0],[10,4,34,0,"get"],[10,7,34,0],[10,18,34,0,"get"],[10,19,34,0],[11,6,34,0],[11,13,34,0,"AuthProvider"],[11,25,34,0],[12,4,34,0],[13,2,34,0],[14,2,319,0,"Object"],[14,8,319,0],[14,9,319,0,"defineProperty"],[14,23,319,0],[14,24,319,0,"exports"],[14,31,319,0],[15,4,319,0,"enumerable"],[15,14,319,0],[16,4,319,0,"get"],[16,7,319,0],[16,18,319,0,"get"],[16,19,319,0],[17,6,319,0],[17,13,319,0,"useAuth"],[17,20,319,0],[18,4,319,0],[19,2,319,0],[20,2,1,0],[20,6,1,0,"_react"],[20,12,1,0],[20,15,1,0,"require"],[20,22,1,0],[20,23,1,0,"_dependencyMap"],[20,37,1,0],[21,2,2,0],[21,6,2,0,"_utilsStorage"],[21,19,2,0],[21,22,2,0,"require"],[21,29,2,0],[21,30,2,0,"_dependencyMap"],[21,44,2,0],[22,2,3,0],[22,6,3,0,"_utilsEncryption"],[22,22,3,0],[22,25,3,0,"require"],[22,32,3,0],[22,33,3,0,"_dependencyMap"],[22,47,3,0],[23,2,3,56],[23,6,3,56,"_reactJsxDevRuntime"],[23,25,3,56],[23,28,3,56,"require"],[23,35,3,56],[23,36,3,56,"_dependencyMap"],[23,50,3,56],[24,2,26,0],[24,8,26,6,"AuthContext"],[24,19,26,17],[24,35,26,20],[24,39,26,20,"createContext"],[24,45,26,33],[24,46,26,33,"createContext"],[24,59,26,33],[24,61,26,63,"undefined"],[24,70,26,72],[24,71,26,73],[25,2,32,0],[25,8,32,6,"API_BASE_URL"],[25,20,32,18],[25,23,32,21,"process"],[25,30,32,28],[25,31,32,29,"env"],[25,34,32,32],[25,35,32,33,"EXPO_PUBLIC_BACKEND_URL"],[25,58,32,56],[25,62,32,60],[25,64,32,62],[26,2,34,7],[26,8,34,13,"AuthProvider"],[26,20,34,54],[26,23,34,57,"AuthProvider"],[26,24,34,58],[27,4,34,60,"children"],[28,2,34,69],[28,3,34,70],[28,8,34,75],[29,4,35,2],[29,10,35,8],[29,11,35,9,"user"],[29,15,35,13],[29,17,35,15,"setUser"],[29,24,35,22],[29,25,35,23],[29,28,35,26],[29,32,35,26,"useState"],[29,38,35,34],[29,39,35,34,"useState"],[29,47,35,34],[29,49,35,48],[29,53,35,52],[29,54,35,53],[30,4,36,2],[30,10,36,8],[30,11,36,9,"isLoading"],[30,20,36,18],[30,22,36,20,"setIsLoading"],[30,34,36,32],[30,35,36,33],[30,38,36,36],[30,42,36,36,"useState"],[30,48,36,44],[30,49,36,44,"useState"],[30,57,36,44],[30,59,36,45],[30,63,36,49],[30,64,36,50],[31,4,37,2],[31,10,37,8],[31,11,37,9,"isFirstTime"],[31,22,37,20],[31,24,37,22,"setIsFirstTime"],[31,38,37,36],[31,39,37,37],[31,42,37,40],[31,46,37,40,"useState"],[31,52,37,48],[31,53,37,48,"useState"],[31,61,37,48],[31,63,37,49],[31,68,37,54],[31,69,37,55],[32,4,38,2],[32,10,38,8],[32,11,38,9,"masterKey"],[32,20,38,18],[32,22,38,20,"setMasterKeyState"],[32,39,38,37],[32,40,38,38],[32,43,38,41],[32,47,38,41,"useState"],[32,53,38,49],[32,54,38,49,"useState"],[32,62,38,49],[32,64,38,65],[32,68,38,69],[32,69,38,70],[33,4,40,2],[33,8,40,2,"useEffect"],[33,14,40,11],[33,15,40,11,"useEffect"],[33,24,40,11],[33,26,40,12],[33,32,40,18],[34,6,41,4,"initializeAuth"],[34,20,41,18],[34,21,41,19],[34,22,41,20],[35,4,42,2],[35,5,42,3],[35,7,42,5],[35,9,42,7],[35,10,42,8],[36,4,44,2],[36,10,44,8,"initializeAuth"],[36,24,44,22],[36,27,44,25],[36,33,44,25,"initializeAuth"],[36,34,44,25],[36,39,44,37],[37,6,45,4],[37,10,45,8],[38,8,46,6,"console"],[38,15,46,13],[38,16,46,14,"log"],[38,19,46,17],[38,20,46,18],[38,45,46,43],[38,46,46,44],[40,8,48,6],[41,8,49,6],[41,14,49,12,"userData"],[41,22,49,20],[41,25,49,23],[41,31,49,29,"SecureStorageService"],[41,44,49,49],[41,45,49,49,"SecureStorageService"],[41,65,49,49],[41,66,49,50,"getUserData"],[41,77,49,61],[41,78,49,62],[41,79,49,63],[42,8,50,6],[42,14,50,12,"token"],[42,19,50,17],[42,22,50,20],[42,28,50,26,"SecureStorageService"],[42,41,50,46],[42,42,50,46,"SecureStorageService"],[42,62,50,46],[42,63,50,47,"getAccessToken"],[42,77,50,61],[42,78,50,62],[42,79,50,63],[43,8,52,6,"console"],[43,15,52,13],[43,16,52,14,"log"],[43,19,52,17],[43,20,52,18],[43,39,52,37],[43,41,52,39],[44,10,53,8,"hasUserData"],[44,21,53,19],[44,23,53,21],[44,24,53,22],[44,25,53,23,"userData"],[44,33,53,31],[45,10,54,8,"hasToken"],[45,18,54,16],[45,20,54,18],[45,21,54,19],[45,22,54,20,"token"],[45,27,54,25],[46,10,55,8,"userEmail"],[46,19,55,17],[46,21,55,19,"userData"],[46,29,55,27],[46,31,55,29,"email"],[47,8,56,6],[47,9,56,7],[47,10,56,8],[49,8,58,6],[50,8,59,6],[50,12,59,10,"userData"],[50,20,59,18],[50,24,59,22,"token"],[50,29,59,27],[50,31,59,29],[51,10,60,8,"console"],[51,17,60,15],[51,18,60,16,"log"],[51,21,60,19],[51,22,60,20],[51,66,60,64],[51,67,60,65],[52,10,62,8],[52,14,62,12],[53,12,63,10],[53,18,63,16,"response"],[53,26,63,24],[53,29,63,27],[53,35,63,33,"fetch"],[53,40,63,38],[53,41,63,39],[53,44,63,42,"API_BASE_URL"],[53,56,63,54],[53,75,63,73],[53,77,63,75],[54,14,64,12,"headers"],[54,21,64,19],[54,23,64,21],[55,16,65,14],[55,31,65,29],[55,33,65,31],[55,43,65,41,"token"],[55,48,65,46],[55,50,65,48],[56,16,66,14],[56,30,66,28],[56,32,66,30],[57,14,67,12],[58,12,68,10],[58,13,68,11],[58,14,68,12],[59,12,70,10],[59,16,70,14,"response"],[59,24,70,22],[59,25,70,23,"ok"],[59,27,70,25],[59,29,70,27],[60,14,71,12],[60,20,71,18,"userProfile"],[60,31,71,29],[60,34,71,32],[60,40,71,38,"response"],[60,48,71,46],[60,49,71,47,"json"],[60,53,71,51],[60,54,71,52],[60,55,71,53],[61,14,72,12,"console"],[61,21,72,19],[61,22,72,20,"log"],[61,25,72,23],[61,26,72,24],[61,65,72,63],[61,66,72,64],[62,14,74,12,"setUser"],[62,21,74,19],[62,22,74,20,"userProfile"],[62,33,74,31],[62,34,74,32],[64,14,76,12],[65,14,77,12],[65,20,77,18,"storedKey"],[65,29,77,27],[65,32,77,30],[65,38,77,36,"SecureStorageService"],[65,51,77,56],[65,52,77,56,"SecureStorageService"],[65,72,77,56],[65,73,77,57,"getMasterKey"],[65,85,77,69],[65,86,77,70],[65,87,77,71],[66,14,78,12],[66,18,78,16,"storedKey"],[66,27,78,25],[66,29,78,27],[67,16,79,14,"setMasterKeyState"],[67,33,79,31],[67,34,79,32,"storedKey"],[67,43,79,41],[67,44,79,42],[68,16,80,14,"console"],[68,23,80,21],[68,24,80,22,"log"],[68,27,80,25],[68,28,80,26],[68,52,80,50],[68,53,80,51],[69,14,81,12],[71,14,83,12],[72,14,84,12,"setIsFirstTime"],[72,28,84,26],[72,29,84,27],[72,34,84,32],[72,35,84,33],[73,14,85,12,"setIsLoading"],[73,26,85,24],[73,27,85,25],[73,32,85,30],[73,33,85,31],[74,14,86,12],[75,12,87,10],[75,13,87,11],[75,19,87,17],[76,14,88,12,"console"],[76,21,88,19],[76,22,88,20,"log"],[76,25,88,23],[76,26,88,24],[76,58,88,56],[76,59,88,57],[77,14,89,12],[77,20,89,18,"SecureStorageService"],[77,33,89,38],[77,34,89,38,"SecureStorageService"],[77,54,89,38],[77,55,89,39,"clearAllData"],[77,67,89,51],[77,68,89,52],[77,69,89,53],[78,12,90,10],[79,10,91,8],[79,11,91,9],[79,12,91,10],[79,19,91,17,"error"],[79,24,91,22],[79,26,91,24],[80,12,92,10,"console"],[80,19,92,17],[80,20,92,18,"error"],[80,25,92,23],[80,26,92,24],[80,55,92,53],[80,57,92,55,"error"],[80,62,92,60],[80,63,92,61],[81,12,93,10],[81,18,93,16,"SecureStorageService"],[81,31,93,36],[81,32,93,36,"SecureStorageService"],[81,52,93,36],[81,53,93,37,"clearAllData"],[81,65,93,49],[81,66,93,50],[81,67,93,51],[82,10,94,8],[83,8,95,6],[85,8,97,6],[86,8,98,6],[86,12,98,10],[86,13,98,11,"userData"],[86,21,98,19],[86,23,98,21],[87,10,99,8,"console"],[87,17,99,15],[87,18,99,16,"log"],[87,21,99,19],[87,22,99,20],[87,62,99,60],[87,63,99,61],[88,10,100,8,"setIsFirstTime"],[88,24,100,22],[88,25,100,23],[88,29,100,27],[88,30,100,28],[89,8,101,6],[89,9,101,7],[89,15,101,13],[90,10,102,8,"console"],[90,17,102,15],[90,18,102,16,"log"],[90,21,102,19],[90,22,102,20],[90,55,102,53],[90,56,102,54],[91,10,103,8,"setIsFirstTime"],[91,24,103,22],[91,25,103,23],[91,30,103,28],[91,31,103,29],[92,8,104,6],[93,6,106,4],[93,7,106,5],[93,8,106,6],[93,15,106,13,"error"],[93,20,106,18],[93,22,106,20],[94,8,107,6,"console"],[94,15,107,13],[94,16,107,14,"error"],[94,21,107,19],[94,22,107,20],[94,53,107,51],[94,55,107,53,"error"],[94,60,107,58],[94,61,107,59],[95,8,108,6],[96,8,109,6,"setIsFirstTime"],[96,22,109,20],[96,23,109,21],[96,27,109,25],[96,28,109,26],[97,6,110,4],[97,7,110,5],[97,16,110,14],[98,8,111,6,"setIsLoading"],[98,20,111,18],[98,21,111,19],[98,26,111,24],[98,27,111,25],[99,8,112,6,"console"],[99,15,112,13],[99,16,112,14,"log"],[99,19,112,17],[99,20,112,18],[99,52,112,50],[99,53,112,51],[100,6,113,4],[101,4,114,2],[101,5,114,3],[102,4,116,2],[102,10,116,8,"register"],[102,18,116,16],[102,21,116,19],[102,27,116,19,"register"],[102,28,117,4,"email"],[102,33,117,17],[102,35,118,4,"password"],[102,43,118,20],[102,45,119,4,"biometricEnabled"],[102,61,119,29],[102,66,120,22],[103,6,121,4],[103,10,121,8],[104,8,122,6,"setIsLoading"],[104,20,122,18],[104,21,122,19],[104,25,122,23],[104,26,122,24],[106,8,124,6],[107,8,125,6],[107,14,125,12,"salt"],[107,18,125,16],[107,21,125,19,"EncryptionService"],[107,37,125,36],[107,38,125,36,"EncryptionService"],[107,55,125,36],[107,56,125,37,"generateSalt"],[107,68,125,49],[107,69,125,50],[107,70,125,51],[109,8,127,6],[110,8,128,6],[110,14,128,12,"masterPasswordHash"],[110,32,128,30],[110,35,128,33],[110,41,128,39,"EncryptionService"],[110,57,128,56],[110,58,128,56,"EncryptionService"],[110,75,128,56],[110,76,128,57,"hashMasterPassword"],[110,94,128,75],[110,95,128,76,"password"],[110,103,128,84],[110,105,128,86,"salt"],[110,109,128,90],[110,110,128,91],[112,8,130,6],[113,8,131,6],[113,14,131,12,"encryptionKey"],[113,27,131,25],[113,30,131,28],[113,36,131,34,"EncryptionService"],[113,52,131,51],[113,53,131,51,"EncryptionService"],[113,70,131,51],[113,71,131,52,"deriveKey"],[113,80,131,61],[113,81,131,62,"password"],[113,89,131,70],[113,91,131,72,"salt"],[113,95,131,76],[113,96,131,77],[114,8,133,6,"console"],[114,15,133,13],[114,16,133,14,"log"],[114,19,133,17],[114,20,133,18],[114,50,133,48],[114,52,133,50,"email"],[114,57,133,55],[114,58,133,56],[115,8,135,6],[115,14,135,12,"response"],[115,22,135,20],[115,25,135,23],[115,31,135,29,"fetch"],[115,36,135,34],[115,37,135,35],[115,40,135,38,"API_BASE_URL"],[115,52,135,50],[115,72,135,70],[115,74,135,72],[116,10,136,8,"method"],[116,16,136,14],[116,18,136,16],[116,24,136,22],[117,10,137,8,"headers"],[117,17,137,15],[117,19,137,17],[118,12,138,10],[118,26,138,24],[118,28,138,26],[119,10,139,8],[119,11,139,9],[120,10,140,8,"body"],[120,14,140,12],[120,16,140,14,"JSON"],[120,20,140,18],[120,21,140,19,"stringify"],[120,30,140,28],[120,31,140,29],[121,12,141,10,"email"],[121,17,141,15],[122,12,142,10,"master_password_hash"],[122,32,142,30],[122,34,142,32,"masterPasswordHash"],[122,52,142,50],[123,12,143,10,"biometric_enabled"],[123,29,143,27],[123,31,143,29,"biometricEnabled"],[124,10,144,8],[124,11,144,9],[125,8,145,6],[125,9,145,7],[125,10,145,8],[126,8,147,6],[126,14,147,12,"responseText"],[126,26,147,24],[126,29,147,27],[126,35,147,33,"response"],[126,43,147,41],[126,44,147,42,"text"],[126,48,147,46],[126,49,147,47],[126,50,147,48],[127,8,148,6,"console"],[127,15,148,13],[127,16,148,14,"log"],[127,19,148,17],[127,20,148,18],[127,44,148,42],[127,46,148,44,"response"],[127,54,148,52],[127,55,148,53,"status"],[127,61,148,59],[127,63,148,61,"responseText"],[127,75,148,73],[127,76,148,74],[128,8,150,6],[128,12,150,10],[128,13,150,11,"response"],[128,21,150,19],[128,22,150,20,"ok"],[128,24,150,22],[128,26,150,24],[129,10,151,8],[129,14,151,12,"errorMessage"],[129,26,151,24],[129,29,151,27],[129,48,151,46],[130,10,152,8],[130,14,152,12],[131,12,153,10],[131,18,153,16,"error"],[131,23,153,21],[131,26,153,24,"JSON"],[131,30,153,28],[131,31,153,29,"parse"],[131,36,153,34],[131,37,153,35,"responseText"],[131,49,153,47],[131,50,153,48],[132,12,154,10,"errorMessage"],[132,24,154,22],[132,27,154,25,"error"],[132,32,154,30],[132,33,154,31,"detail"],[132,39,154,37],[132,43,154,41,"errorMessage"],[132,55,154,53],[133,10,155,8],[133,11,155,9],[133,12,155,10],[133,19,155,17,"parseError"],[133,29,155,27],[133,31,155,29],[134,12,156,10,"console"],[134,19,156,17],[134,20,156,18,"error"],[134,25,156,23],[134,26,156,24],[134,51,156,49],[134,53,156,51,"parseError"],[134,63,156,61],[134,64,156,62],[135,12,157,10,"errorMessage"],[135,24,157,22],[135,27,157,25],[135,35,157,33,"response"],[135,43,157,41],[135,44,157,42,"status"],[135,50,157,48],[135,55,157,53,"responseText"],[135,67,157,65],[135,69,157,67],[136,10,158,8],[137,10,159,8],[137,16,159,14],[137,20,159,18,"Error"],[137,25,159,23],[137,26,159,24,"errorMessage"],[137,38,159,36],[137,39,159,37],[138,8,160,6],[139,8,162,6],[139,14,162,12,"data"],[139,18,162,16],[139,21,162,19,"JSON"],[139,25,162,23],[139,26,162,24,"parse"],[139,31,162,29],[139,32,162,30,"responseText"],[139,44,162,42],[139,45,162,43],[141,8,164,6],[142,8,165,6],[142,14,165,12,"SecureStorageService"],[142,27,165,32],[142,28,165,32,"SecureStorageService"],[142,48,165,32],[142,49,165,33,"storeAccessToken"],[142,65,165,49],[142,66,165,50,"data"],[142,70,165,54],[142,71,165,55,"access_token"],[142,83,165,67],[142,84,165,68],[143,8,166,6],[143,14,166,12,"SecureStorageService"],[143,27,166,32],[143,28,166,32,"SecureStorageService"],[143,48,166,32],[143,49,166,33,"storeUserData"],[143,62,166,46],[143,63,166,47,"data"],[143,67,166,51],[143,68,166,52,"user"],[143,72,166,56],[143,73,166,57],[144,8,167,6],[144,14,167,12,"SecureStorageService"],[144,27,167,32],[144,28,167,32,"SecureStorageService"],[144,48,167,32],[144,49,167,33,"storeUserSalt"],[144,62,167,46],[144,63,167,47,"salt"],[144,67,167,51],[144,68,167,52],[145,8,168,6],[145,14,168,12,"SecureStorageService"],[145,27,168,32],[145,28,168,32,"SecureStorageService"],[145,48,168,32],[145,49,168,33,"storeMasterKey"],[145,63,168,47],[145,64,168,48,"encryptionKey"],[145,77,168,61],[145,78,168,62],[146,8,169,6],[146,14,169,12,"SecureStorageService"],[146,27,169,32],[146,28,169,32,"SecureStorageService"],[146,48,169,32],[146,49,169,33,"setBiometricEnabled"],[146,68,169,52],[146,69,169,53,"biometricEnabled"],[146,85,169,69],[146,86,169,70],[148,8,171,6],[149,8,172,6],[149,12,172,10,"biometricEnabled"],[149,28,172,26],[149,30,172,28],[150,10,173,8],[150,16,173,14,"SecureStorageService"],[150,29,173,34],[150,30,173,34,"SecureStorageService"],[150,50,173,34],[150,51,173,35,"storeBiometricKey"],[150,68,173,52],[150,69,173,53,"encryptionKey"],[150,82,173,66],[150,83,173,67],[151,8,174,6],[152,8,176,6,"setUser"],[152,15,176,13],[152,16,176,14,"data"],[152,20,176,18],[152,21,176,19,"user"],[152,25,176,23],[152,26,176,24],[153,8,177,6,"setMasterKeyState"],[153,25,177,23],[153,26,177,24,"encryptionKey"],[153,39,177,37],[153,40,177,38],[154,8,178,6,"setIsFirstTime"],[154,22,178,20],[154,23,178,21],[154,28,178,26],[154,29,178,27],[155,8,180,6,"console"],[155,15,180,13],[155,16,180,14,"log"],[155,19,180,17],[155,20,180,18],[155,50,180,48],[155,52,180,50,"email"],[155,57,180,55],[155,58,180,56],[156,6,181,4],[156,7,181,5],[156,8,181,6],[156,15,181,13,"error"],[156,20,181,18],[156,22,181,20],[157,8,182,6,"console"],[157,15,182,13],[157,16,182,14,"error"],[157,21,182,19],[157,22,182,20],[157,43,182,41],[157,45,182,43,"error"],[157,50,182,48],[157,51,182,49],[158,8,183,6],[158,14,183,12,"error"],[158,19,183,17],[159,6,184,4],[159,7,184,5],[159,16,184,14],[160,8,185,6,"setIsLoading"],[160,20,185,18],[160,21,185,19],[160,26,185,24],[160,27,185,25],[161,6,186,4],[162,4,187,2],[162,5,187,3],[163,4,189,2],[163,10,189,8,"login"],[163,15,189,13],[163,18,189,16],[163,24,189,16,"login"],[163,25,189,23,"email"],[163,30,189,36],[163,32,189,38,"password"],[163,40,189,54],[163,45,189,74],[164,6,190,4],[164,10,190,8],[165,8,191,6,"setIsLoading"],[165,20,191,18],[165,21,191,19],[165,25,191,23],[165,26,191,24],[166,8,192,6,"console"],[166,15,192,13],[166,16,192,14,"log"],[166,19,192,17],[166,20,192,18],[166,49,192,47],[166,51,192,49,"email"],[166,56,192,54],[166,57,192,55],[168,8,194,6],[169,8,195,6],[169,12,195,10,"salt"],[169,16,195,14],[169,19,195,17],[169,25,195,23,"SecureStorageService"],[169,38,195,43],[169,39,195,43,"SecureStorageService"],[169,59,195,43],[169,60,195,44,"getUserSalt"],[169,71,195,55],[169,72,195,56],[169,73,195,57],[170,8,197,6],[170,12,197,10],[170,13,197,11,"salt"],[170,17,197,15],[170,19,197,17],[171,10,198,8,"console"],[171,17,198,15],[171,18,198,16,"log"],[171,21,198,19],[171,22,198,20],[171,57,198,55],[171,58,198,56],[172,10,199,8],[173,10,200,8],[174,10,201,8,"Alert"],[174,15,201,13],[174,16,201,14,"alert"],[174,21,201,19],[174,22,202,10],[174,45,202,33],[174,47,203,10],[174,133,203,96],[174,135,204,10],[174,136,204,11],[175,12,204,13,"text"],[175,16,204,17],[175,18,204,19],[176,10,204,24],[176,11,204,25],[176,12,205,8],[176,13,205,9],[177,10,206,8,"setIsFirstTime"],[177,24,206,22],[177,25,206,23],[177,29,206,27],[177,30,206,28],[178,10,207,8],[179,8,208,6],[180,8,210,6,"console"],[180,15,210,13],[180,16,210,14,"log"],[180,19,210,17],[180,20,210,18],[180,49,210,47],[180,50,210,48],[182,8,212,6],[183,8,213,6],[183,14,213,12,"masterPasswordHash"],[183,32,213,30],[183,35,213,33],[183,41,213,39,"EncryptionService"],[183,57,213,56],[183,58,213,56,"EncryptionService"],[183,75,213,56],[183,76,213,57,"hashMasterPassword"],[183,94,213,75],[183,95,213,76,"password"],[183,103,213,84],[183,105,213,86,"salt"],[183,109,213,90],[183,110,213,91],[185,8,215,6],[186,8,216,6],[186,14,216,12,"encryptionKey"],[186,27,216,25],[186,30,216,28],[186,36,216,34,"EncryptionService"],[186,52,216,51],[186,53,216,51,"EncryptionService"],[186,70,216,51],[186,71,216,52,"deriveKey"],[186,80,216,61],[186,81,216,62,"password"],[186,89,216,70],[186,91,216,72,"salt"],[186,95,216,76],[186,96,216,77],[187,8,218,6,"console"],[187,15,218,13],[187,16,218,14,"log"],[187,19,218,17],[187,20,218,18],[187,59,218,57],[187,60,218,58],[188,8,220,6],[188,14,220,12,"response"],[188,22,220,20],[188,25,220,23],[188,31,220,29,"fetch"],[188,36,220,34],[188,37,220,35],[188,40,220,38,"API_BASE_URL"],[188,52,220,50],[188,69,220,67],[188,71,220,69],[189,10,221,8,"method"],[189,16,221,14],[189,18,221,16],[189,24,221,22],[190,10,222,8,"headers"],[190,17,222,15],[190,19,222,17],[191,12,223,10],[191,26,223,24],[191,28,223,26],[192,10,224,8],[192,11,224,9],[193,10,225,8,"body"],[193,14,225,12],[193,16,225,14,"JSON"],[193,20,225,18],[193,21,225,19,"stringify"],[193,30,225,28],[193,31,225,29],[194,12,226,10,"email"],[194,17,226,15],[195,12,227,10,"master_password_hash"],[195,32,227,30],[195,34,227,32,"masterPasswordHash"],[196,10,228,8],[196,11,228,9],[197,8,229,6],[197,9,229,7],[197,10,229,8],[198,8,231,6],[198,14,231,12,"responseText"],[198,26,231,24],[198,29,231,27],[198,35,231,33,"response"],[198,43,231,41],[198,44,231,42,"text"],[198,48,231,46],[198,49,231,47],[198,50,231,48],[199,8,232,6,"console"],[199,15,232,13],[199,16,232,14,"log"],[199,19,232,17],[199,20,232,18],[199,37,232,35],[199,39,232,37,"response"],[199,47,232,45],[199,48,232,46,"status"],[199,54,232,52],[199,56,232,54,"responseText"],[199,68,232,66],[199,69,232,67],[200,8,234,6],[200,12,234,10],[200,13,234,11,"response"],[200,21,234,19],[200,22,234,20,"ok"],[200,24,234,22],[200,26,234,24],[201,10,235,8],[201,14,235,12,"errorMessage"],[201,26,235,24],[201,29,235,27],[201,52,235,50],[202,10,236,8],[202,14,236,12],[203,12,237,10],[203,18,237,16,"error"],[203,23,237,21],[203,26,237,24,"JSON"],[203,30,237,28],[203,31,237,29,"parse"],[203,36,237,34],[203,37,237,35,"responseText"],[203,49,237,47],[203,50,237,48],[204,12,238,10,"errorMessage"],[204,24,238,22],[204,27,238,25,"error"],[204,32,238,30],[204,33,238,31,"detail"],[204,39,238,37],[204,43,238,41,"errorMessage"],[204,55,238,53],[205,10,239,8],[205,11,239,9],[205,12,239,10],[205,19,239,17,"parseError"],[205,29,239,27],[205,31,239,29],[206,12,240,10,"console"],[206,19,240,17],[206,20,240,18,"error"],[206,25,240,23],[206,26,240,24],[206,57,240,55],[206,59,240,57,"parseError"],[206,69,240,67],[206,70,240,68],[207,10,241,8],[208,10,243,8],[208,14,243,12,"response"],[208,22,243,20],[208,23,243,21,"status"],[208,29,243,27],[208,34,243,32],[208,37,243,35],[208,39,243,37],[209,12,244,10],[210,12,245,10,"console"],[210,19,245,17],[210,20,245,18,"log"],[210,23,245,21],[210,24,245,22],[210,61,245,59],[210,62,245,60],[211,12,246,10],[211,18,246,16,"SecureStorageService"],[211,31,246,36],[211,32,246,36,"SecureStorageService"],[211,52,246,36],[211,53,246,37,"clearAllData"],[211,65,246,49],[211,66,246,50],[211,67,246,51],[212,12,247,10,"setIsFirstTime"],[212,26,247,24],[212,27,247,25],[212,31,247,29],[212,32,247,30],[213,12,248,10,"errorMessage"],[213,24,248,22],[213,27,248,25],[213,108,248,106],[214,10,249,8],[215,10,251,8],[215,16,251,14],[215,20,251,18,"Error"],[215,25,251,23],[215,26,251,24,"errorMessage"],[215,38,251,36],[215,39,251,37],[216,8,252,6],[217,8,254,6],[217,14,254,12,"data"],[217,18,254,16],[217,21,254,19,"JSON"],[217,25,254,23],[217,26,254,24,"parse"],[217,31,254,29],[217,32,254,30,"responseText"],[217,44,254,42],[217,45,254,43],[218,8,255,6,"console"],[218,15,255,13],[218,16,255,14,"log"],[218,19,255,17],[218,20,255,18],[218,38,255,36],[218,39,255,37],[220,8,257,6],[221,8,258,6],[221,14,258,12,"SecureStorageService"],[221,27,258,32],[221,28,258,32,"SecureStorageService"],[221,48,258,32],[221,49,258,33,"storeAccessToken"],[221,65,258,49],[221,66,258,50,"data"],[221,70,258,54],[221,71,258,55,"access_token"],[221,83,258,67],[221,84,258,68],[222,8,259,6],[222,14,259,12,"SecureStorageService"],[222,27,259,32],[222,28,259,32,"SecureStorageService"],[222,48,259,32],[222,49,259,33,"storeUserData"],[222,62,259,46],[222,63,259,47,"data"],[222,67,259,51],[222,68,259,52,"user"],[222,72,259,56],[222,73,259,57],[223,8,260,6],[223,14,260,12,"SecureStorageService"],[223,27,260,32],[223,28,260,32,"SecureStorageService"],[223,48,260,32],[223,49,260,33,"storeMasterKey"],[223,63,260,47],[223,64,260,48,"encryptionKey"],[223,77,260,61],[223,78,260,62],[224,8,262,6,"setUser"],[224,15,262,13],[224,16,262,14,"data"],[224,20,262,18],[224,21,262,19,"user"],[224,25,262,23],[224,26,262,24],[225,8,263,6,"setMasterKeyState"],[225,25,263,23],[225,26,263,24,"encryptionKey"],[225,39,263,37],[225,40,263,38],[226,8,265,6,"console"],[226,15,265,13],[226,16,265,14,"log"],[226,19,265,17],[226,20,265,18],[226,50,265,48],[226,51,265,49],[227,6,266,4],[227,7,266,5],[227,8,266,6],[227,15,266,13,"error"],[227,20,266,18],[227,22,266,20],[228,8,267,6,"console"],[228,15,267,13],[228,16,267,14,"error"],[228,21,267,19],[228,22,267,20],[228,36,267,34],[228,38,267,36,"error"],[228,43,267,41],[228,44,267,42],[229,8,268,6],[229,14,268,12,"error"],[229,19,268,17],[230,6,269,4],[230,7,269,5],[230,16,269,14],[231,8,270,6,"setIsLoading"],[231,20,270,18],[231,21,270,19],[231,26,270,24],[231,27,270,25],[232,6,271,4],[233,4,272,2],[233,5,272,3],[234,4,274,2],[234,10,274,8,"logout"],[234,16,274,14],[234,19,274,17],[234,25,274,17,"logout"],[234,26,274,17],[234,31,274,44],[235,6,275,4],[235,10,275,8],[236,8,276,6],[236,14,276,12,"SecureStorageService"],[236,27,276,32],[236,28,276,32,"SecureStorageService"],[236,48,276,32],[236,49,276,33,"clearAllData"],[236,61,276,45],[236,62,276,46],[236,63,276,47],[237,8,277,6,"setUser"],[237,15,277,13],[237,16,277,14],[237,20,277,18],[237,21,277,19],[238,8,278,6,"setMasterKeyState"],[238,25,278,23],[238,26,278,24],[238,30,278,28],[238,31,278,29],[239,6,279,4],[239,7,279,5],[239,8,279,6],[239,15,279,13,"error"],[239,20,279,18],[239,22,279,20],[240,8,280,6,"console"],[240,15,280,13],[240,16,280,14,"error"],[240,21,280,19],[240,22,280,20],[240,37,280,35],[240,39,280,37,"error"],[240,44,280,42],[240,45,280,43],[241,6,281,4],[242,4,282,2],[242,5,282,3],[243,4,284,2],[243,10,284,8,"setMasterKey"],[243,22,284,20],[243,25,284,24,"key"],[243,28,284,35],[243,32,284,40],[244,6,285,4,"setMasterKeyState"],[244,23,285,21],[244,24,285,22,"key"],[244,27,285,25],[244,28,285,26],[245,4,286,2],[245,5,286,3],[246,4,288,2],[246,10,288,8,"setBiometricRecovery"],[246,30,288,28],[246,33,288,31],[246,39,288,38,"enabled"],[246,46,288,54],[246,50,288,74],[247,6,289,4],[247,10,289,8],[248,8,290,6],[248,12,290,10,"enabled"],[248,19,290,17],[248,23,290,21,"masterKey"],[248,32,290,30],[248,34,290,32],[249,10,291,8],[249,16,291,14,"SecureStorageService"],[249,29,291,34],[249,30,291,34,"SecureStorageService"],[249,50,291,34],[249,51,291,35,"storeBiometricKey"],[249,68,291,52],[249,69,291,53,"masterKey"],[249,78,291,62],[249,79,291,63],[250,8,292,6],[251,8,293,6],[251,14,293,12,"SecureStorageService"],[251,27,293,32],[251,28,293,32,"SecureStorageService"],[251,48,293,32],[251,49,293,33,"setBiometricEnabled"],[251,68,293,52],[251,69,293,53,"enabled"],[251,76,293,60],[251,77,293,61],[252,8,295,6],[252,12,295,10,"user"],[252,16,295,14],[252,18,295,16],[253,10,296,8,"setUser"],[253,17,296,15],[253,18,296,16],[254,12,296,18],[254,15,296,21,"user"],[254,19,296,25],[255,12,296,27,"biometric_enabled"],[255,29,296,44],[255,31,296,46,"enabled"],[256,10,296,54],[256,11,296,55],[256,12,296,56],[257,8,297,6],[258,6,298,4],[258,7,298,5],[258,8,298,6],[258,15,298,13,"error"],[258,20,298,18],[258,22,298,20],[259,8,299,6,"console"],[259,15,299,13],[259,16,299,14,"error"],[259,21,299,19],[259,22,299,20],[259,46,299,44],[259,48,299,46,"error"],[259,53,299,51],[259,54,299,52],[260,8,300,6],[260,14,300,12,"error"],[260,19,300,17],[261,6,301,4],[262,4,302,2],[262,5,302,3],[263,4,304,2],[263,10,304,8,"value"],[263,15,304,30],[263,18,304,33],[264,6,305,4,"user"],[264,10,305,8],[265,6,306,4,"isLoading"],[265,15,306,13],[266,6,307,4,"isFirstTime"],[266,17,307,15],[267,6,308,4,"masterKey"],[267,15,308,13],[268,6,309,4,"login"],[268,11,309,9],[269,6,310,4,"register"],[269,14,310,12],[270,6,311,4,"logout"],[270,12,311,10],[271,6,312,4,"setMasterKey"],[271,18,312,16],[272,6,313,4,"setBiometricRecovery"],[273,4,314,2],[273,5,314,3],[274,4,316,2],[274,24,316,9],[274,28,316,9,"_reactJsxDevRuntime"],[274,47,316,9],[274,48,316,9,"jsxDEV"],[274,54,316,9],[274,56,316,10,"AuthContext"],[274,67,316,21],[274,68,316,22,"Provider"],[274,76,316,30],[275,6,316,31,"value"],[275,11,316,36],[275,13,316,38,"value"],[275,18,316,44],[276,6,316,44,"children"],[276,14,316,44],[276,16,316,46,"children"],[277,4,316,54],[278,6,316,54,"fileName"],[278,14,316,54],[278,16,316,54,"_jsxFileName"],[278,28,316,54],[279,6,316,54,"lineNumber"],[279,16,316,54],[280,6,316,54,"columnNumber"],[280,18,316,54],[281,4,316,54],[281,11,316,77],[281,12,316,78],[282,2,317,0],[282,3,317,1],[283,2,319,7],[283,8,319,13,"useAuth"],[283,15,319,20],[283,18,319,23,"useAuth"],[283,19,319,23],[283,24,319,46],[284,4,320,2],[284,10,320,8,"context"],[284,17,320,15],[284,20,320,18],[284,24,320,18,"useContext"],[284,30,320,28],[284,31,320,28,"useContext"],[284,41,320,28],[284,43,320,29,"AuthContext"],[284,54,320,40],[284,55,320,41],[285,4,321,2],[285,8,321,6,"context"],[285,15,321,13],[285,20,321,18,"undefined"],[285,29,321,27],[285,31,321,29],[286,6,322,4],[286,12,322,10],[286,16,322,14,"Error"],[286,21,322,19],[286,22,322,20],[286,67,322,65],[286,68,322,66],[287,4,323,2],[288,4,324,2],[288,11,324,9,"context"],[288,18,324,16],[289,2,325,0],[289,3,325,1],[290,0,325,2],[290,3]],"functionMap":{"names":["<global>","AuthProvider","useEffect$argument_0","initializeAuth","register","login","logout","setMasterKey","setBiometricRecovery","useAuth"],"mappings":"AAA;yDCiC;YCM;GDE;yBEE;GFsE;mBGE;GHuE;gBIE;GJmF;iBKE;GLQ;uBME;GNE;+BOE;GPc;CDe;uBSE;CTM"},"hasCjsExports":false},"type":"js/module"}]}