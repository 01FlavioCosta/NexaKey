{"dependencies":[{"name":"expo-local-authentication","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"XtWhUDJAsjsPYmsPbazqQX44aUU=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Alert","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"PEUC6jrQVoAGZ2qYkvimljMOyJI=","exportNames":["*"],"imports":1}},{"name":"./storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":104},"end":{"line":3,"column":49,"index":153}}],"key":"3rLtLV8J3gSw9c8Ep8Wpc3w/Yxg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"BiometricsService\", {\n    enumerable: true,\n    get: function () {\n      return BiometricsService;\n    }\n  });\n  var _expoLocalAuthentication = require(_dependencyMap[0], \"expo-local-authentication\");\n  var LocalAuthentication = _interopNamespace(_expoLocalAuthentication);\n  var _reactNativeWebDistExportsAlert = require(_dependencyMap[1], \"react-native-web/dist/exports/Alert\");\n  var Alert = _interopDefault(_reactNativeWebDistExportsAlert);\n  var _storage = require(_dependencyMap[2], \"./storage\");\n  class BiometricsService {\n    // Check if biometric authentication is available\n    static async isAvailable() {\n      try {\n        const hasHardware = await LocalAuthentication.hasHardwareAsync();\n        const isEnrolled = await LocalAuthentication.isEnrolledAsync();\n        return hasHardware && isEnrolled;\n      } catch (error) {\n        console.error('Biometric availability check failed:', error);\n        return false;\n      }\n    }\n\n    // Get supported biometric types\n    static async getSupportedTypes() {\n      try {\n        return await LocalAuthentication.supportedAuthenticationTypesAsync();\n      } catch (error) {\n        console.error('Failed to get supported biometric types:', error);\n        return [];\n      }\n    }\n\n    // Get biometric type name for display\n    static getBiometricTypeName(type) {\n      switch (type) {\n        case LocalAuthentication.AuthenticationType.FINGERPRINT:\n          return 'Impressão Digital';\n        case LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION:\n          return 'Reconhecimento Facial';\n        case LocalAuthentication.AuthenticationType.IRIS:\n          return 'Reconhecimento de Íris';\n        default:\n          return 'Biometria';\n      }\n    }\n\n    // Authenticate with biometrics\n    static async authenticate(promptMessage = 'Confirme sua identidade', fallbackLabel = 'Usar senha mestra') {\n      try {\n        const isAvailable = await this.isAvailable();\n        if (!isAvailable) {\n          Alert.default.alert('Biometria Indisponível', 'Sua biometria não está configurada no dispositivo.');\n          return false;\n        }\n        const result = await LocalAuthentication.authenticateAsync({\n          promptMessage,\n          fallbackLabel,\n          cancelLabel: 'Cancelar',\n          disableDeviceFallback: false\n        });\n        return result.success;\n      } catch (error) {\n        console.error('Biometric authentication failed:', error);\n        return false;\n      }\n    }\n\n    // Setup biometric authentication for the user\n    static async setupBiometricAuth(masterKey) {\n      try {\n        const isAvailable = await this.isAvailable();\n        if (!isAvailable) {\n          Alert.default.alert('Biometria Indisponível', 'Configure a biometria nas configurações do seu dispositivo primeiro.');\n          return false;\n        }\n        const supportedTypes = await this.getSupportedTypes();\n        const typeNames = supportedTypes.map(type => this.getBiometricTypeName(type));\n        const success = await this.authenticate(`Confirme sua ${typeNames.join(' ou ')} para ativar o desbloqueio biométrico`, 'Cancelar');\n        if (success) {\n          // Store the master key for biometric recovery\n          await _storage.SecureStorageService.storeBiometricKey(masterKey);\n          await _storage.SecureStorageService.setBiometricEnabled(true);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Biometric setup failed:', error);\n        return false;\n      }\n    }\n\n    // Login with biometric authentication\n    static async biometricLogin() {\n      try {\n        const isBiometricEnabled = await _storage.SecureStorageService.isBiometricEnabled();\n        if (!isBiometricEnabled) {\n          return null;\n        }\n        const success = await this.authenticate('Use sua biometria para acessar o NexaKey', 'Usar senha mestra');\n        if (success) {\n          // Retrieve the stored master key\n          const masterKey = await _storage.SecureStorageService.getBiometricKey();\n          return masterKey;\n        }\n        return null;\n      } catch (error) {\n        console.error('Biometric login failed:', error);\n        return null;\n      }\n    }\n\n    // Reset master password using biometric authentication\n    static async biometricPasswordReset(email, newPassword) {\n      try {\n        const isBiometricEnabled = await _storage.SecureStorageService.isBiometricEnabled();\n        if (!isBiometricEnabled) {\n          Alert.default.alert('Biometria Não Configurada', 'Você não configurou a biometria para recuperação de senha.');\n          return false;\n        }\n        const success = await this.authenticate('Confirme sua identidade para redefinir a senha mestra', 'Cancelar');\n        if (success) {\n          // Here you would call the backend to reset password\n          // For now, we'll just show a success message\n          Alert.default.alert('Senha Redefinida', 'Sua senha mestra foi redefinida com sucesso!');\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Biometric password reset failed:', error);\n        return false;\n      }\n    }\n\n    // Disable biometric authentication\n    static async disableBiometricAuth() {\n      try {\n        const success = await this.authenticate('Confirme para desativar o desbloqueio biométrico', 'Cancelar');\n        if (success) {\n          await _storage.SecureStorageService.setBiometricEnabled(false);\n          // Note: We keep the biometric key for future re-enabling\n          Alert.default.alert('Sucesso', 'Desbloqueio biométrico desativado');\n        }\n      } catch (error) {\n        console.error('Failed to disable biometric auth:', error);\n      }\n    }\n  }\n});","lineCount":176,"map":[[27,2,5,0,"Object"],[27,8,5,0],[27,9,5,0,"defineProperty"],[27,23,5,0],[27,24,5,0,"exports"],[27,31,5,0],[28,4,5,0,"enumerable"],[28,14,5,0],[29,4,5,0,"get"],[29,7,5,0],[29,18,5,0,"get"],[29,19,5,0],[30,6,5,0],[30,13,5,0,"BiometricsService"],[30,30,5,0],[31,4,5,0],[32,2,5,0],[33,2,1,0],[33,6,1,0,"_expoLocalAuthentication"],[33,30,1,0],[33,33,1,0,"require"],[33,40,1,0],[33,41,1,0,"_dependencyMap"],[33,55,1,0],[34,2,1,0],[34,6,1,0,"LocalAuthentication"],[34,25,1,0],[34,28,1,0,"_interopNamespace"],[34,45,1,0],[34,46,1,0,"_expoLocalAuthentication"],[34,70,1,0],[35,2,1,65],[35,6,1,65,"_reactNativeWebDistExportsAlert"],[35,37,1,65],[35,40,1,65,"require"],[35,47,1,65],[35,48,1,65,"_dependencyMap"],[35,62,1,65],[36,2,1,65],[36,6,1,65,"Alert"],[36,11,1,65],[36,14,1,65,"_interopDefault"],[36,29,1,65],[36,30,1,65,"_reactNativeWebDistExportsAlert"],[36,61,1,65],[37,2,3,0],[37,6,3,0,"_storage"],[37,14,3,0],[37,17,3,0,"require"],[37,24,3,0],[37,25,3,0,"_dependencyMap"],[37,39,3,0],[38,2,5,7],[38,8,5,13,"BiometricsService"],[38,25,5,30],[38,26,5,31],[39,4,6,2],[40,4,7,2],[40,17,7,15,"isAvailable"],[40,28,7,26,"isAvailable"],[40,29,7,26],[40,31,7,47],[41,6,8,4],[41,10,8,8],[42,8,9,6],[42,14,9,12,"hasHardware"],[42,25,9,23],[42,28,9,26],[42,34,9,32,"LocalAuthentication"],[42,53,9,51],[42,54,9,52,"hasHardwareAsync"],[42,70,9,68],[42,71,9,69],[42,72,9,70],[43,8,10,6],[43,14,10,12,"isEnrolled"],[43,24,10,22],[43,27,10,25],[43,33,10,31,"LocalAuthentication"],[43,52,10,50],[43,53,10,51,"isEnrolledAsync"],[43,68,10,66],[43,69,10,67],[43,70,10,68],[44,8,11,6],[44,15,11,13,"hasHardware"],[44,26,11,24],[44,30,11,28,"isEnrolled"],[44,40,11,38],[45,6,12,4],[45,7,12,5],[45,8,12,6],[45,15,12,13,"error"],[45,20,12,18],[45,22,12,20],[46,8,13,6,"console"],[46,15,13,13],[46,16,13,14,"error"],[46,21,13,19],[46,22,13,20],[46,60,13,58],[46,62,13,60,"error"],[46,67,13,65],[46,68,13,66],[47,8,14,6],[47,15,14,13],[47,20,14,18],[48,6,15,4],[49,4,16,2],[51,4,18,2],[52,4,19,2],[52,17,19,15,"getSupportedTypes"],[52,34,19,32,"getSupportedTypes"],[52,35,19,32],[52,37,19,86],[53,6,20,4],[53,10,20,8],[54,8,21,6],[54,15,21,13],[54,21,21,19,"LocalAuthentication"],[54,40,21,38],[54,41,21,39,"supportedAuthenticationTypesAsync"],[54,74,21,72],[54,75,21,73],[54,76,21,74],[55,6,22,4],[55,7,22,5],[55,8,22,6],[55,15,22,13,"error"],[55,20,22,18],[55,22,22,20],[56,8,23,6,"console"],[56,15,23,13],[56,16,23,14,"error"],[56,21,23,19],[56,22,23,20],[56,64,23,62],[56,66,23,64,"error"],[56,71,23,69],[56,72,23,70],[57,8,24,6],[57,15,24,13],[57,17,24,15],[58,6,25,4],[59,4,26,2],[61,4,28,2],[62,4,29,2],[62,11,29,9,"getBiometricTypeName"],[62,31,29,29,"getBiometricTypeName"],[62,32,29,30,"type"],[62,36,29,74],[62,38,29,84],[63,6,30,4],[63,14,30,12,"type"],[63,18,30,16],[64,8,31,6],[64,13,31,11,"LocalAuthentication"],[64,32,31,30],[64,33,31,31,"AuthenticationType"],[64,51,31,49],[64,52,31,50,"FINGERPRINT"],[64,63,31,61],[65,10,32,8],[65,17,32,15],[65,36,32,34],[66,8,33,6],[66,13,33,11,"LocalAuthentication"],[66,32,33,30],[66,33,33,31,"AuthenticationType"],[66,51,33,49],[66,52,33,50,"FACIAL_RECOGNITION"],[66,70,33,68],[67,10,34,8],[67,17,34,15],[67,40,34,38],[68,8,35,6],[68,13,35,11,"LocalAuthentication"],[68,32,35,30],[68,33,35,31,"AuthenticationType"],[68,51,35,49],[68,52,35,50,"IRIS"],[68,56,35,54],[69,10,36,8],[69,17,36,15],[69,41,36,39],[70,8,37,6],[71,10,38,8],[71,17,38,15],[71,28,38,26],[72,6,39,4],[73,4,40,2],[75,4,42,2],[76,4,43,2],[76,17,43,15,"authenticate"],[76,29,43,27,"authenticate"],[76,30,44,4,"promptMessage"],[76,43,44,25],[76,46,44,28],[76,71,44,53],[76,73,45,4,"fallbackLabel"],[76,86,45,25],[76,89,45,28],[76,108,45,47],[76,110,46,22],[77,6,47,4],[77,10,47,8],[78,8,48,6],[78,14,48,12,"isAvailable"],[78,25,48,23],[78,28,48,26],[78,34,48,32],[78,38,48,36],[78,39,48,37,"isAvailable"],[78,50,48,48],[78,51,48,49],[78,52,48,50],[79,8,49,6],[79,12,49,10],[79,13,49,11,"isAvailable"],[79,24,49,22],[79,26,49,24],[80,10,50,8,"Alert"],[80,15,50,13],[80,16,50,13,"default"],[80,23,50,13],[80,24,50,14,"alert"],[80,29,50,19],[80,30,51,10],[80,54,51,34],[80,56,52,10],[80,108,53,8],[80,109,53,9],[81,10,54,8],[81,17,54,15],[81,22,54,20],[82,8,55,6],[83,8,57,6],[83,14,57,12,"result"],[83,20,57,18],[83,23,57,21],[83,29,57,27,"LocalAuthentication"],[83,48,57,46],[83,49,57,47,"authenticateAsync"],[83,66,57,64],[83,67,57,65],[84,10,58,8,"promptMessage"],[84,23,58,21],[85,10,59,8,"fallbackLabel"],[85,23,59,21],[86,10,60,8,"cancelLabel"],[86,21,60,19],[86,23,60,21],[86,33,60,31],[87,10,61,8,"disableDeviceFallback"],[87,31,61,29],[87,33,61,31],[88,8,62,6],[88,9,62,7],[88,10,62,8],[89,8,64,6],[89,15,64,13,"result"],[89,21,64,19],[89,22,64,20,"success"],[89,29,64,27],[90,6,65,4],[90,7,65,5],[90,8,65,6],[90,15,65,13,"error"],[90,20,65,18],[90,22,65,20],[91,8,66,6,"console"],[91,15,66,13],[91,16,66,14,"error"],[91,21,66,19],[91,22,66,20],[91,56,66,54],[91,58,66,56,"error"],[91,63,66,61],[91,64,66,62],[92,8,67,6],[92,15,67,13],[92,20,67,18],[93,6,68,4],[94,4,69,2],[96,4,71,2],[97,4,72,2],[97,17,72,15,"setupBiometricAuth"],[97,35,72,33,"setupBiometricAuth"],[97,36,72,34,"masterKey"],[97,45,72,51],[97,47,72,71],[98,6,73,4],[98,10,73,8],[99,8,74,6],[99,14,74,12,"isAvailable"],[99,25,74,23],[99,28,74,26],[99,34,74,32],[99,38,74,36],[99,39,74,37,"isAvailable"],[99,50,74,48],[99,51,74,49],[99,52,74,50],[100,8,75,6],[100,12,75,10],[100,13,75,11,"isAvailable"],[100,24,75,22],[100,26,75,24],[101,10,76,8,"Alert"],[101,15,76,13],[101,16,76,13,"default"],[101,23,76,13],[101,24,76,14,"alert"],[101,29,76,19],[101,30,77,10],[101,54,77,34],[101,56,78,10],[101,126,79,8],[101,127,79,9],[102,10,80,8],[102,17,80,15],[102,22,80,20],[103,8,81,6],[104,8,83,6],[104,14,83,12,"supportedTypes"],[104,28,83,26],[104,31,83,29],[104,37,83,35],[104,41,83,39],[104,42,83,40,"getSupportedTypes"],[104,59,83,57],[104,60,83,58],[104,61,83,59],[105,8,84,6],[105,14,84,12,"typeNames"],[105,23,84,21],[105,26,84,24,"supportedTypes"],[105,40,84,38],[105,41,84,39,"map"],[105,44,84,42],[105,45,84,43,"type"],[105,49,84,47],[105,53,84,51],[105,57,84,55],[105,58,84,56,"getBiometricTypeName"],[105,78,84,76],[105,79,84,77,"type"],[105,83,84,81],[105,84,84,82],[105,85,84,83],[106,8,86,6],[106,14,86,12,"success"],[106,21,86,19],[106,24,86,22],[106,30,86,28],[106,34,86,32],[106,35,86,33,"authenticate"],[106,47,86,45],[106,48,87,8],[106,64,87,24,"typeNames"],[106,73,87,33],[106,74,87,34,"join"],[106,78,87,38],[106,79,87,39],[106,85,87,45],[106,86,87,46],[106,125,87,85],[106,127,88,8],[106,137,89,6],[106,138,89,7],[107,8,91,6],[107,12,91,10,"success"],[107,19,91,17],[107,21,91,19],[108,10,92,8],[109,10,93,8],[109,16,93,14,"SecureStorageService"],[109,24,93,34],[109,25,93,34,"SecureStorageService"],[109,45,93,34],[109,46,93,35,"storeBiometricKey"],[109,63,93,52],[109,64,93,53,"masterKey"],[109,73,93,62],[109,74,93,63],[110,10,94,8],[110,16,94,14,"SecureStorageService"],[110,24,94,34],[110,25,94,34,"SecureStorageService"],[110,45,94,34],[110,46,94,35,"setBiometricEnabled"],[110,65,94,54],[110,66,94,55],[110,70,94,59],[110,71,94,60],[111,10,95,8],[111,17,95,15],[111,21,95,19],[112,8,96,6],[113,8,98,6],[113,15,98,13],[113,20,98,18],[114,6,99,4],[114,7,99,5],[114,8,99,6],[114,15,99,13,"error"],[114,20,99,18],[114,22,99,20],[115,8,100,6,"console"],[115,15,100,13],[115,16,100,14,"error"],[115,21,100,19],[115,22,100,20],[115,47,100,45],[115,49,100,47,"error"],[115,54,100,52],[115,55,100,53],[116,8,101,6],[116,15,101,13],[116,20,101,18],[117,6,102,4],[118,4,103,2],[120,4,105,2],[121,4,106,2],[121,17,106,15,"biometricLogin"],[121,31,106,29,"biometricLogin"],[121,32,106,29],[121,34,106,56],[122,6,107,4],[122,10,107,8],[123,8,108,6],[123,14,108,12,"isBiometricEnabled"],[123,32,108,30],[123,35,108,33],[123,41,108,39,"SecureStorageService"],[123,49,108,59],[123,50,108,59,"SecureStorageService"],[123,70,108,59],[123,71,108,60,"isBiometricEnabled"],[123,89,108,78],[123,90,108,79],[123,91,108,80],[124,8,109,6],[124,12,109,10],[124,13,109,11,"isBiometricEnabled"],[124,31,109,29],[124,33,109,31],[125,10,110,8],[125,17,110,15],[125,21,110,19],[126,8,111,6],[127,8,113,6],[127,14,113,12,"success"],[127,21,113,19],[127,24,113,22],[127,30,113,28],[127,34,113,32],[127,35,113,33,"authenticate"],[127,47,113,45],[127,48,114,8],[127,90,114,50],[127,92,115,8],[127,111,116,6],[127,112,116,7],[128,8,118,6],[128,12,118,10,"success"],[128,19,118,17],[128,21,118,19],[129,10,119,8],[130,10,120,8],[130,16,120,14,"masterKey"],[130,25,120,23],[130,28,120,26],[130,34,120,32,"SecureStorageService"],[130,42,120,52],[130,43,120,52,"SecureStorageService"],[130,63,120,52],[130,64,120,53,"getBiometricKey"],[130,79,120,68],[130,80,120,69],[130,81,120,70],[131,10,121,8],[131,17,121,15,"masterKey"],[131,26,121,24],[132,8,122,6],[133,8,124,6],[133,15,124,13],[133,19,124,17],[134,6,125,4],[134,7,125,5],[134,8,125,6],[134,15,125,13,"error"],[134,20,125,18],[134,22,125,20],[135,8,126,6,"console"],[135,15,126,13],[135,16,126,14,"error"],[135,21,126,19],[135,22,126,20],[135,47,126,45],[135,49,126,47,"error"],[135,54,126,52],[135,55,126,53],[136,8,127,6],[136,15,127,13],[136,19,127,17],[137,6,128,4],[138,4,129,2],[140,4,131,2],[141,4,132,2],[141,17,132,15,"biometricPasswordReset"],[141,39,132,37,"biometricPasswordReset"],[141,40,133,4,"email"],[141,45,133,17],[141,47,134,4,"newPassword"],[141,58,134,23],[141,60,135,22],[142,6,136,4],[142,10,136,8],[143,8,137,6],[143,14,137,12,"isBiometricEnabled"],[143,32,137,30],[143,35,137,33],[143,41,137,39,"SecureStorageService"],[143,49,137,59],[143,50,137,59,"SecureStorageService"],[143,70,137,59],[143,71,137,60,"isBiometricEnabled"],[143,89,137,78],[143,90,137,79],[143,91,137,80],[144,8,138,6],[144,12,138,10],[144,13,138,11,"isBiometricEnabled"],[144,31,138,29],[144,33,138,31],[145,10,139,8,"Alert"],[145,15,139,13],[145,16,139,13,"default"],[145,23,139,13],[145,24,139,14,"alert"],[145,29,139,19],[145,30,140,10],[145,57,140,37],[145,59,141,10],[145,119,142,8],[145,120,142,9],[146,10,143,8],[146,17,143,15],[146,22,143,20],[147,8,144,6],[148,8,146,6],[148,14,146,12,"success"],[148,21,146,19],[148,24,146,22],[148,30,146,28],[148,34,146,32],[148,35,146,33,"authenticate"],[148,47,146,45],[148,48,147,8],[148,103,147,63],[148,105,148,8],[148,115,149,6],[148,116,149,7],[149,8,151,6],[149,12,151,10,"success"],[149,19,151,17],[149,21,151,19],[150,10,152,8],[151,10,153,8],[152,10,154,8,"Alert"],[152,15,154,13],[152,16,154,13,"default"],[152,23,154,13],[152,24,154,14,"alert"],[152,29,154,19],[152,30,155,10],[152,48,155,28],[152,50,156,10],[152,96,157,8],[152,97,157,9],[153,10,158,8],[153,17,158,15],[153,21,158,19],[154,8,159,6],[155,8,161,6],[155,15,161,13],[155,20,161,18],[156,6,162,4],[156,7,162,5],[156,8,162,6],[156,15,162,13,"error"],[156,20,162,18],[156,22,162,20],[157,8,163,6,"console"],[157,15,163,13],[157,16,163,14,"error"],[157,21,163,19],[157,22,163,20],[157,56,163,54],[157,58,163,56,"error"],[157,63,163,61],[157,64,163,62],[158,8,164,6],[158,15,164,13],[158,20,164,18],[159,6,165,4],[160,4,166,2],[162,4,168,2],[163,4,169,2],[163,17,169,15,"disableBiometricAuth"],[163,37,169,35,"disableBiometricAuth"],[163,38,169,35],[163,40,169,53],[164,6,170,4],[164,10,170,8],[165,8,171,6],[165,14,171,12,"success"],[165,21,171,19],[165,24,171,22],[165,30,171,28],[165,34,171,32],[165,35,171,33,"authenticate"],[165,47,171,45],[165,48,172,8],[165,98,172,58],[165,100,173,8],[165,110,174,6],[165,111,174,7],[166,8,176,6],[166,12,176,10,"success"],[166,19,176,17],[166,21,176,19],[167,10,177,8],[167,16,177,14,"SecureStorageService"],[167,24,177,34],[167,25,177,34,"SecureStorageService"],[167,45,177,34],[167,46,177,35,"setBiometricEnabled"],[167,65,177,54],[167,66,177,55],[167,71,177,60],[167,72,177,61],[168,10,178,8],[169,10,179,8,"Alert"],[169,15,179,13],[169,16,179,13,"default"],[169,23,179,13],[169,24,179,14,"alert"],[169,29,179,19],[169,30,179,20],[169,39,179,29],[169,41,179,31],[169,76,179,66],[169,77,179,67],[170,8,180,6],[171,6,181,4],[171,7,181,5],[171,8,181,6],[171,15,181,13,"error"],[171,20,181,18],[171,22,181,20],[172,8,182,6,"console"],[172,15,182,13],[172,16,182,14,"error"],[172,21,182,19],[172,22,182,20],[172,57,182,55],[172,59,182,57,"error"],[172,64,182,62],[172,65,182,63],[173,6,183,4],[174,4,184,2],[175,2,185,0],[176,0,185,1],[176,3]],"functionMap":{"names":["<global>","BiometricsService","BiometricsService.isAvailable","BiometricsService.getSupportedTypes","BiometricsService.getBiometricTypeName","BiometricsService.authenticate","BiometricsService.setupBiometricAuth","supportedTypes.map$argument_0","BiometricsService.biometricLogin","BiometricsService.biometricPasswordReset","BiometricsService.disableBiometricAuth"],"mappings":"AAA;OCI;ECE;GDS;EEG;GFO;EGG;GHW;EIG;GJ0B;EKG;2CCY,uCD;GLmB;EOG;GPuB;EQG;GRkC;ESG;GTe"},"hasCjsExports":false},"type":"js/module"}]}